{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{724:function(e,t,o){\"use strict\";o.r(t);var r=o(56),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[o(\"h1\",{attrs:{id:\"github-enterprise-flow-and-tech\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#github-enterprise-flow-and-tech\"}},[e._v(\"#\")]),e._v(\" Github Enterprise - Flow and Tech\")]),e._v(\" \"),o(\"h3\",{attrs:{id:\"flow\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flow\"}},[e._v(\"#\")]),e._v(\" Flow \"),o(\"a\",{attrs:{href:\"#flow\",id:\"flow\"}})]),e._v(\" \"),o(\"ol\",[o(\"li\",[e._v(\"Fetch the monitored projects from Snyk (if the \"),o(\"code\",[e._v(\"skipSnykMonitoredRepos\")]),e._v(\" flag was \"),o(\"strong\",[e._v(\"not set\")]),e._v(\" and the \"),o(\"code\",[e._v(\"SNYK_TOKEN\")]),e._v(\" was exported).\")]),e._v(\" \"),o(\"li\",[e._v(\"Fetch one/some/all the orgs (according to the \"),o(\"code\",[e._v(\"fetchAllOrgs\")]),e._v(\" flag) that the credentials have access to from SCM and create a orgs list.\")]),e._v(\" \"),o(\"li\",[e._v(\"Fetch one/all repos under the fetched/provided orgs.\")]),e._v(\" \"),o(\"li\",[e._v(\"Remove the repos that are not monitored by Snyk (if the \"),o(\"code\",[e._v(\"skipSnykMonitoredRepos\")]),e._v(\" flag was \"),o(\"strong\",[e._v(\"not set\")]),e._v(\" and the \"),o(\"code\",[e._v(\"SNYK_TOKEN\")]),e._v(\" was exported) and create a Repo list.\")]),e._v(\" \"),o(\"li\",[e._v(\"Create an import file for unmonitored repos to use for easily importing repos into Snyk account (if the \"),o(\"code\",[e._v(\"importConfDir\")]),e._v(\" flag was set)\")]),e._v(\" \"),o(\"li\",[e._v(\"Fetch the commits for the fetched/provided repo/s and create a Contributors list.\")]),e._v(\" \"),o(\"li\",[e._v(\"Count the commits for the repo/s by the contributors.\")]),e._v(\" \"),o(\"li\",[e._v(\"Remove the contributors that were specified in the exclusion file (if \"),o(\"code\",[e._v(\"the exclusionFilePath\")]),e._v(\" flag was set and a valid path to a text file was provided).\")]),e._v(\" \"),o(\"li\",[e._v(\"Print the results.\")])]),e._v(\" \"),o(\"h2\",{attrs:{id:\"github-enterprise-api-endpoints-used\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#github-enterprise-api-endpoints-used\"}},[e._v(\"#\")]),e._v(\" Github Enterprise API endpoints used \"),o(\"a\",{attrs:{href:\"#azure-api-endpoints-used\",id:\"azure-api-endpoints-used\"}})]),e._v(\" \"),o(\"ul\",[o(\"li\",[e._v(\"To get the orgs from Github Enterprise: \"),o(\"code\",[e._v(\"api/v3/organizations\")]),e._v(\" (if the \"),o(\"code\",[e._v(\"fetchAllOrgs\")]),e._v(\" flag \"),o(\"strong\",[e._v(\"was\")]),e._v(\" set) or \"),o(\"code\",[e._v(\"api/v3/user/orgs\")]),e._v(\" (if the \"),o(\"code\",[e._v(\"fetchAllOrgs\")]),e._v(\" flag was \"),o(\"strong\",[e._v(\"not\")]),e._v(\" set)\")]),e._v(\" \"),o(\"li\",[e._v(\"To get the list of the repo/s that correlate with the fetched/provided orgs list: \"),o(\"code\",[e._v(\"api/v3/orgs/{Org}/repos\")])]),e._v(\" \"),o(\"li\",[e._v(\"To get the commits for the fetched/provided repo/s list: \"),o(\"code\",[e._v(\"api/v3/repos/{Org}/{Repo}/commits\")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}