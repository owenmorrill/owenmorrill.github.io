{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[572],{968:function(e,t,n){\"use strict\";n.r(t);var s=n(56),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"integrating-iac-custom-rules-within-a-pipeline\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#integrating-iac-custom-rules-within-a-pipeline\"}},[e._v(\"#\")]),e._v(\" Integrating IaC custom rules within a pipeline\")]),e._v(\" \"),n(\"p\",[e._v(\"The ideal scenario for managing, distributing, and enforcing your custom rules is to use a CI/CD like \"),n(\"a\",{attrs:{href:\"https://github.com/features/actions\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"GitHub Actions\"),n(\"OutboundLink\")],1),e._v(\".\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"overview\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#overview\"}},[e._v(\"#\")]),e._v(\" Overview\")]),e._v(\" \"),n(\"p\",[e._v(\"This example shows how a security team can:\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"Store their rules in a GitHub repository\")]),e._v(\" \"),n(\"li\",[e._v(\"Use GitHub Actions to add different development-time steps to their pipelines\")]),e._v(\" \"),n(\"li\",[e._v(\"Configure a different GitHub repository to run a GitHub Action pipeline that uses the custom rules to gate changes.\")])]),e._v(\" \"),n(\"p\",[e._v(\"We use the \"),n(\"a\",{attrs:{href:\"https://github.com/snyk/custom-rules-example\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"snyk/custom-rules-example\"),n(\"OutboundLink\")],1),e._v(\" repository for the example; this repo contains all the custom rules written while \"),n(\"RouterLink\",{attrs:{to:\"/snyk/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/\"}},[e._v(\"getting started with the SDK\")]),e._v(\".\")],1),e._v(\" \"),n(\"h4\",{attrs:{id:\"aims\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aims\"}},[e._v(\"#\")]),e._v(\" Aims\")]),e._v(\" \"),n(\"p\",[e._v(\"We want to configure our pipeline to:\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"Verify that new rules or changes to the existing rules don't break existing functionality.\")]),e._v(\" \"),n(\"li\",[e._v(\"Publish the rules in \"),n(\"code\",[e._v(\"main\")]),e._v(\" to an OCI registry.\")]),e._v(\" \"),n(\"li\",[e._v(\"Enforce the usage of custom rules in other pipelines.\")]),e._v(\" \"),n(\"li\",[e._v(\"(Optionally) Configure the custom rules using environment variables.\")])]),e._v(\" \"),n(\"h3\",{attrs:{id:\"adding-pr-checks-using-github-action\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#adding-pr-checks-using-github-action\"}},[e._v(\"#\")]),e._v(\" Adding PR checks using GitHub Action\")]),e._v(\" \"),n(\"p\",[e._v(\"An example of a PR check can be seen in \"),n(\"a\",{attrs:{href:\"https://github.com/snyk/custom-rules-example/pull/5\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"https://github.com/snyk/custom-rules-example/pull/5\"),n(\"OutboundLink\")],1),e._v(\" where we attempt to add a new rule called \"),n(\"code\",[e._v(\"my_rule\")])]),e._v(\" \"),n(\"p\",[e._v(\"(\"),n(\"strong\",[e._v(\"note\")]),e._v(\": this is the same rule we showed when \"),n(\"RouterLink\",{attrs:{to:\"/snyk/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/writing-a-rule.html\"}},[e._v(\"learning how to write a rule\")]),e._v(\")\")],1),e._v(\" \"),n(\"p\",[e._v(\"To verify that this rule works as expected, we have implemented unit tests. To run the unit tests as part of PR checks, we previously configured a GitHub Action under \"),n(\"code\",[e._v(\".github/workflows\")]),e._v(\" called \"),n(\"code\",[e._v(\"test.yml\")]),e._v(\":\")]),e._v(\" \"),n(\"p\",[e._v('{% code title=\".github/workflows/test.yml\" %}')]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"name: Test Custom Rules\\n\\non:\\n  push:\\n    branches:\\n      - '**'        # matches every branch\\n      - '!main'     # excludes main\\n\\njobs:\\n  unit_test:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: 15\\n\\n      - name: Install snyk-iac-rules\\n        run: npm i -g snyk-iac-rules\\n\\n      - name: Run unit tests\\n        run: snyk-iac-rules test\\n\")])])]),n(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),n(\"p\",[e._v(\"A few things to note about this workflow:\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"We configured it to run on all non-\"),n(\"code\",[e._v(\"main\")]),e._v(\" branches, so that it runs when PRs are open.\")]),e._v(\" \"),n(\"li\",[e._v(\"We added steps to setup a Node.js environment, so that we can then install the \"),n(\"code\",[e._v(\"snyk-iac-rules\")]),e._v(\" SDK using \"),n(\"RouterLink\",{attrs:{to:\"/snyk/products/snyk-infrastructure-as-code/custom-rules/install-the-sdk.html#install-the-sdk-with-npm\"}},[e._v(\"npm\")]),e._v(\".\")],1),e._v(\" \"),n(\"li\",[e._v(\"We added a step to run \"),n(\"code\",[e._v(\"snyk-iac-rules test\")]),e._v(\", which will cause the PR check to fail if any of the tests fail.\")])]),e._v(\" \"),n(\"p\",[e._v('{% hint style=\"info\" %}\\nYou need to configure your '),n(\"code\",[e._v(\"main\")]),e._v(\" branch under \"),n(\"code\",[e._v(\"Settings\")]),e._v(\" -> \"),n(\"code\",[e._v(\"Branches\")]),e._v(\"first, so that no one can push directly to \"),n(\"code\",[e._v(\"main\")]),e._v(\".\\n{% endhint %}\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"snyk-iac-github-action\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#snyk-iac-github-action\"}},[e._v(\"#\")]),e._v(\" Snyk IaC GitHub Action\")]),e._v(\" \"),n(\"p\",[e._v(\"Another way to test the rules is by testing the contract with the \"),n(\"a\",{attrs:{href:\"https://raw.githubusercontent.com/snyk/user-docs/main/docs/../snyk-cli/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Snyk CLI\"),n(\"OutboundLink\")],1),e._v(\" by using the \"),n(\"a\",{attrs:{href:\"https://github.com/snyk/actions/tree/master/iac\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Snyk IaC GitHub Action\"),n(\"OutboundLink\")],1),e._v(\", making sure the generated bundle can be read by the CLI.\")]),e._v(\" \"),n(\"p\",[e._v(\"To do this, you will need a step for installing the Snyk CLI and a \"),n(\"code\",[e._v(\"SNYK_TOKEN\")]),e._v(\", which can be found in your Snyk Account Settings.\")]),e._v(\" \"),n(\"p\",[e._v('{% code title=\".github/workflows/test.yml\" %}')]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"jobs:\\n  contract_test:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: 15\\n\\n      - name: Install snyk-iac-rules\\n        run: npm i -g snyk-iac-rules\\n\\n      - name: Build bundle\\n        run: snyk-iac-rules build .\\n\\n      - name: Run contract with Snyk to check Infrastructure as Code files for issues\\n        continue-on-error: true\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n        with:\\n          args: --rules=bundle.tar.gz\\n\")])])]),n(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),n(\"p\",[e._v(\"You can also expand these tests to use \"),n(\"a\",{attrs:{href:\"https://github.com/shellspec/shellspec\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Shellspec\"),n(\"OutboundLink\")],1),e._v(\" and verify that the desired vulnerabilities get triggered, but we recommend using the unit tests for this.\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"publishing-the-custom-rules\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#publishing-the-custom-rules\"}},[e._v(\"#\")]),e._v(\" Publishing the custom rules\")]),e._v(\" \"),n(\"p\",[e._v(\"Once a PR passes its checks from the previous section and gets merged into the \"),n(\"code\",[e._v(\"main\")]),e._v(\" branch, you can publish our rules to an OCI registry. This allows you to configure a separate pipeline, to download the custom rules bundle from this location, and run the custom rules in order to catch misconfigurations.\")]),e._v(\" \"),n(\"p\",[e._v(\"For this, we will add another workflow under \"),n(\"code\",[e._v(\".github/workflows\")]),e._v(\" called \"),n(\"code\",[e._v(\"publish.yml\")]),e._v(\":\")]),e._v(\" \"),n(\"p\",[e._v('{% code title=\".github/workflows/publish.yml\" %}')]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"name: Publish Custom Rules\\n\\non:\\n  push:\\n    branches:\\n      - 'main'\\n\\njobs:\\n  publish:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: 15\\n\\n      - name: Install snyk-iac-rules\\n        run: npm i -g snyk-iac-rules\\n        \\n      - name: Build bundle\\n        run: snyk-iac-rules build .\\n        \\n      - name: Login to Docker Hub\\n        uses: docker/login-action@v1\\n        with:\\n          username: ${{ secrets.OCI_REGISTRY_USERNAME }}\\n          password: ${{ secrets.OCI_REGISTRY_PASSWORD }}\\n\\n      - name: Publish rules\\n        run: snyk-iac-rules push --registry $OCI_REGISTRY_URL bundle.tar.gz\\n        env:\\n          OCI_REGISTRY_URL: \\\"${{ secrets.OCI_REGISTRY_NAME }}:v1\\\"\\n\")])])]),n(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),n(\"p\",[e._v(\"It looks similar to the previous workflow, but there are a few things to note about this one:\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"We configured it to run only on \"),n(\"code\",[e._v(\"main\")]),e._v(\" branches, so that it runs when PRs are merged.\")]),e._v(\" \"),n(\"li\",[e._v(\"We added a step to authenticate with Docker Hub, our chosen OCI registry. For a list of supported registries read about \"),n(\"RouterLink\",{attrs:{to:\"/snyk/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/pushing-a-bundle.html\"}},[e._v(\"pushing bundles\")]),e._v(\". Use the \"),n(\"a\",{attrs:{href:\"https://github.com/docker/login-action\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"docker/login-action\"),n(\"OutboundLink\")],1),e._v(\" GitHub Action to do that and make sure to configure the GitHub secrets under \"),n(\"code\",[e._v(\"Settings\")]),e._v(\" -> \"),n(\"code\",[e._v(\"Secrets\")]),e._v(\".\")],1),e._v(\" \"),n(\"li\",[e._v(\"We added a step to run \"),n(\"code\",[e._v(\"snyk-iac-rules build\")]),e._v(\" followed by \"),n(\"code\",[e._v(\"snyk-iac-rules push\")]),e._v(\", which will publish our generated custom rules bundle to an OCI registry.\")])]),e._v(\" \"),n(\"h4\",{attrs:{id:\"versioning-rules\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#versioning-rules\"}},[e._v(\"#\")]),e._v(\" Versioning rules\")]),e._v(\" \"),n(\"p\",[e._v(\"If we want to release an experimental version of the custom rules without affecting all our CI/CD pipelines, we can use tagging to version our bundles.\")]),e._v(\" \"),n(\"p\",[e._v(\"So, we can start trialing bundle \"),n(\"code\",[e._v(\"v2-beta\")]),e._v(\" while still using \"),n(\"code\",[e._v(\"v1\")]),e._v(\" in most of our services:\")]),e._v(\" \"),n(\"p\",[e._v('{% code title=\".github/workflows/publish.yml\" %}')]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('      - name: Publish experimental rules\\n        run: snyk-iac-rules push --registry $OCI_REGISTRY_URL bundle.tar.gz\\n        env:\\n          OCI_REGISTRY_URL: \"${{ secrets.OCI_REGISTRY_NAME }}:v1\"\\n      - name: Publish rules\\n        run: snyk-iac-rules push --registry $OCI_REGISTRY_URL bundle.tar.gz\\n        env:\\n          OCI_REGISTRY_URL: \"${{ secrets.OCI_REGISTRY_NAME }}:v2-beta\"\\n')])])]),n(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),n(\"p\",[e._v('{% hint style=\"info\" %}\\nMake sure that the OCI_REGISTRY_NAME configured in the GitHub Secrets does not already contain the tag or the protocol if you want to use this workflow.\\n{% endhint %}')]),e._v(\" \"),n(\"h3\",{attrs:{id:\"enforcing-the-custom-rules\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#enforcing-the-custom-rules\"}},[e._v(\"#\")]),e._v(\" Enforcing the custom rules\")]),e._v(\" \"),n(\"p\",[e._v(\"After publishing the custom rules to an OCI registry, you can configure a separate pipeline to use these rules. One way to do this is by using the \"),n(\"a\",{attrs:{href:\"https://snykv3.docs.apiary.io/#reference/group-settings/infrastructure-as-code/update-infrastructure-as-code-settings\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"public Group IaC Settings API\"),n(\"OutboundLink\")],1),e._v(\".\")]),e._v(\" \"),n(\"p\",[e._v(\"This means configuring the GitHub Action above with another job for updating Snyk to use the configured custom rules bundle:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('      - name: Update Snyk\\n        run: |\\n          curl --location --request PATCH \\'https://api.snyk.io/v3/groups/<group id>/settings/iac/?version=2021-11-03~beta\\' \\\\\\n          --header \\'Content-Type: application/vnd.api+json\\' \\\\\\n          --header \\'Authorization: token ${{ secrets.SNYK_TOKEN }}\\' \\\\\\n          --data-raw \\'{\\n            \"data\": {\\n                  \"type\": \"iac_settings\",\\n                  \"attributes\": {\\n                    \"custom_rules\": {\\n                      \"oci_registry_url\": \"registry-1.${{ secrets.OCI_REGISTRY_NAME }}\",\\n                      \"oci_registry_tag\": \"v1\",\\n                      \"is_enabled\": true\\n                    }\\n                }\\n            }\\n          }\\'\\n')])])]),n(\"p\",[e._v(\"This API call will update the chosen Snyk group and all the organizations underneath it to use the configured custom rules bundle.\")]),e._v(\" \"),n(\"p\",[e._v('{% hint style=\"info\" %}\\nFor now, if we want to configure an organization to use a different bundle, such as the '),n(\"code\",[e._v(\"v2-beta\")]),e._v(\" one, we are limited to using the Snyk Settings page. There we can either configure a new bundle or disable custom rules so that we can use environment variables in our CI/CD pipeline to run the custom rules.\\n{% endhint %}\")]),e._v(\" \"),n(\"p\",[e._v(\"In a different repository, all you have to do is authenticate with one of the organizations underneath this group and add the Snyk IaC GitHub Action to a workflow:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"name: Snyk Infrastructure as Code Custom Rules\\n\\non:\\n  push:\\n\\njobs:\\n  snyk-iac-security:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - name: Run Snyk to check Infrastructure as Code files for issues\\n        continue-on-error: false\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n\")])])]),n(\"p\",[e._v(\"The result is that the GitHub action will fail until the generated misconfigurations have been resolved:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Testing example.tf...\\n\\n\\nInfrastructure as code issues:\\n  ✗ IAM Role missing one of the required tags: owner, description or type [Medium Severity] [CUSTOM-RULE-8]\\n    introduced by input > resource > aws_iam_role[new_role] > tags\\n\\n  ✗ Vendor or Service must have either owneralternate or ticketgroup or both tags. [Medium Severity] [CUSTOM-RULE-9]\\n    introduced by input > resource > aws_iam_role[new_role] > tags\\n\")])])]),n(\"h3\",{attrs:{id:\"configuring-the-custom-rules\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#configuring-the-custom-rules\"}},[e._v(\"#\")]),e._v(\" Configuring the custom rules\")]),e._v(\" \"),n(\"p\",[e._v(\"Additionally, if using an API or the Snyk Settings page seem too restrictive, we also provide a way to configure the custom rules by using the environment variables.\")]),e._v(\" \"),n(\"p\",[e._v(\"You can use the Snyk IaC GitHub Action with the \"),n(\"code\",[e._v(\"SNYK_CFG_OCI_REGISTRY_URL\")]),e._v(\", \"),n(\"code\",[e._v(\"SNYK_CFG_OCI_REGISTRY_USERNAME\")]),e._v(\", and \"),n(\"code\",[e._v(\"SNYK_CFG_OCI_REGISTRY_PASSWORD\")]),e._v(\" environment variables to scan your configuration files for any custom rules which may have been breached.\")]),e._v(\" \"),n(\"p\",[e._v(\"The GitHub Action reads these environment variables and pulls down the bundle pushed in the previous step to the configured OCI registry. The GitHub action will look similar to this:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"name: Snyk Infrastructure as Code Custom Rules\\n\\non:\\n  push:\\n\\njobs:\\n  snyk-iac-security:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - name: Run Snyk to check Infrastructure as Code files for issues\\n        continue-on-error: false\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n          SNYK_CFG_OCI_REGISTRY_URL: ${{ secrets.OCI_REGISTRY_URL }}\\n          SNYK_CFG_OCI_REGISTRY_USERNAME: ${{ secrets.OCI_REGISTRY_USERNAME }}\\n          SNYK_CFG_OCI_REGISTRY_PASSWORD: ${{ secrets.OCI_REGISTRY_PASSWORD }}\\n\")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}