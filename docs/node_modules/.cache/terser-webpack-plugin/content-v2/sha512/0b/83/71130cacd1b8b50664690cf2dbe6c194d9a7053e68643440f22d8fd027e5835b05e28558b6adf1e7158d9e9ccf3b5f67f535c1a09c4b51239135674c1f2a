{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[866],{1262:function(e,t,n){\"use strict\";n.r(t);var a=n(56),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"section-7-create-deployment-manifests\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#section-7-create-deployment-manifests\"}},[e._v(\"#\")]),e._v(\" Section 7: Create Deployment Manifests\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"step-1-create-a-new-branch-for-the-container-files\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#step-1-create-a-new-branch-for-the-container-files\"}},[e._v(\"#\")]),e._v(\" Step 1: Create a new branch for the container files\")]),e._v(\" \"),n(\"p\",[e._v(\"Let's start by creating a new branch from our \"),n(\"code\",[e._v(\"develop\")]),e._v(\" branch, where we'll create the deployment manifests for our application before merging them to \"),n(\"code\",[e._v(\"develop\")]),e._v(\". Call it \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" .\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-createbranch.png)\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"step-2-create-the-application-manifests\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#step-2-create-the-application-manifests\"}},[e._v(\"#\")]),e._v(\" Step 2: Create the application manifests\")]),e._v(\" \"),n(\"p\",[e._v('{% hint style=\"warning\" %}\\nIn this step we create the YAML files with the deployment config for our application. The files in the '),n(\"code\",[e._v(\"iac-actions\")]),e._v(\" branch if you want to copy-paste from there. These are for reference; attempting to merge that branch to \"),n(\"code\",[e._v(\"develop\")]),e._v(\" will cause Merge Conflicts.\\n{% endhint %}\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"create-a-deployment-definition\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-a-deployment-definition\"}},[e._v(\"#\")]),e._v(\" Create a Deployment definition\")]),e._v(\" \"),n(\"p\",[e._v(\"First we create the \"),n(\"code\",[e._v(\"Deployment\")]),e._v(' , the configuration file that tells orchestration environments how to spin up the Goof container. Switch to the new branch, click on \"Add File\", then \"Create new file\".')]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-createfile.png)\")]),e._v(\" \"),n(\"p\",[e._v(\"Call the new file \"),n(\"code\",[e._v(\"goof-deployment.yaml\")]),e._v(\" and paste this in as the contents of the file.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language-text extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: goof\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: goof\\n      tier: frontend\\n  template:\\n    metadata:\\n      labels:\\n        app: goof\\n        tier: frontend\\n    spec:\\n      containers:\\n        - name: goof-app\\n          image: goof:PROD\\n          ports:\\n            - containerPort: 3001\\n            - containerPort: 9229\\n          env:\\n            - name: DOCKER\\n              value: \"1\"\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: goof-mongo\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: goof\\n      tier: backend\\n  template:\\n    metadata:\\n      labels:\\n        app: goof\\n        tier: backend\\n    spec:\\n      containers:\\n        - name: goof-mongo\\n          image: mongo\\n          ports:\\n            - containerPort: 27017\\n')])])]),n(\"p\",[e._v(\"When ready, commit the changes directly to the \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" branch.\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-commitdeployment.png)\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"create-the-service-definition\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-the-service-definition\"}},[e._v(\"#\")]),e._v(\" Create the Service definition\")]),e._v(\" \"),n(\"p\",[e._v(\"Next, we create a \"),n(\"code\",[e._v(\"Service\")]),e._v(\" to define how our application is exposed. In the new branch, add a file, call it \"),n(\"code\",[e._v(\"goof-service.yaml\")]),e._v(\" , and paste this in as the contents.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language-text extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: goof\\nspec:\\n  type: LoadBalancer\\n  ports:\\n    - protocol: TCP\\n      port: 80\\n      targetPort: 3001\\n      name: \"http\"\\n    - protocol: TCP\\n      port: 9229\\n      targetPort: 9229\\n      name: \"debug\"\\n  selector:\\n    app: goof\\n    tier: frontend\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: goof-mongo\\nspec:\\n  ports:\\n    - protocol: TCP\\n      port: 27017\\n      targetPort: 27017\\n      name: \"mongo\"\\n  selector:\\n    app: goof\\n    tier: backend\\n')])])]),n(\"p\",[e._v(\"Commit the file directly to the \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" branch.\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-commitservice.png)\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"step-3-create-a-snyk-iac-test-workflow\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#step-3-create-a-snyk-iac-test-workflow\"}},[e._v(\"#\")]),e._v(\" Step 3: Create a Snyk IaC Test workflow\")]),e._v(\" \"),n(\"p\",[e._v(\"To ensure our manifest files are checked for configuration issues, we'll create a workflow that checks them with Snyk IaC. Create a file called \"),n(\"code\",[e._v(\"snyk-iac-check.yaml\")]),e._v(\" in the \"),n(\"code\",[e._v(\".github/workflows\")]),e._v(\" folder and paste in the following as its contents:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language-text extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"name: Test Infrastructure as Code with Snyk\\non:\\n  push:\\n    paths: \\n      - '**.yaml'\\njobs:\\n  snyk:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n      - name: Check configuration files for security issues with Snyk\\n        continue-on-error: true\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n        with:\\n          file: goof-deployment.yaml goof-service.yaml\\n      - name: Upload result to GitHub Code Scanning\\n        uses: github/codeql-action/upload-sarif@v1\\n        with:\\n          sarif_file: snyk.sarif\\n\")])])]),n(\"p\",[e._v('{% hint style=\"info\" %}\\nThe '),n(\"code\",[e._v(\"files\")]),e._v(\" section tells GitHub Actions to run the workflow when changes are made to the YAML files we created. After it runs, results will be pushed to GitHub Security Code Scanning. For any GitHub activity not relating to these files, nothing happens.\\n{% endhint %}\")]),e._v(\" \"),n(\"p\",[e._v(\"Commit this file directly to the \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" branch.\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"step-4-add-iac-checks-to-the-snyk-gate\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#step-4-add-iac-checks-to-the-snyk-gate\"}},[e._v(\"#\")]),e._v(\" Step 4: Add IaC checks to the Snyk Gate\")]),e._v(\" \"),n(\"p\",[e._v(\"In Part 1, we established that our \"),n(\"code\",[e._v(\"PROD\")]),e._v(\" branch contains the deploy-ready state of our code. With GitHub Actions, it's possible to create workflows to continuously deploy our application to an orchestration environment. For example, there are Actions to:\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[n(\"a\",{attrs:{href:\"https://github.com/marketplace/actions/deploy-to-kubernetes-cluster\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Deploy to Azure Kubernetes \"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"li\",[n(\"a\",{attrs:{href:\"https://github.com/do-community/example-doctl-action\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Deploy to DigitalOcean Kubernetes\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"li\",[n(\"a\",{attrs:{href:\"https://github.com/marketplace/actions/openshift-client-installer\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Set up the \"),n(\"code\",[e._v(\"oc\")]),e._v(\" tool to deploy to OpenShift\"),n(\"OutboundLink\")],1)])]),e._v(\" \"),n(\"p\",[e._v(\"These actions take the manifest files we created as input, and can re-deploy the application when code is pushed into the \"),n(\"code\",[e._v(\"PROD\")]),e._v(\" branch. We will configure our Snyk gate to run during the Pull Request process, to check our deployment manifests for configuration issues and catch issues before they are introduced into our Production environments in those Continuous Deployment scenarios.\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"edit-the-snyk-gate\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#edit-the-snyk-gate\"}},[e._v(\"#\")]),e._v(\" Edit the Snyk Gate\")]),e._v(\" \"),n(\"p\",[e._v(\"Our Snyk Gate is located in \"),n(\"code\",[e._v(\".github/workflows/snyk-gate.yml\")]),e._v(\" . While in the \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" branch, open it with the GitHub web editor.\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-editgate.png)\")]),e._v(\" \"),n(\"p\",[e._v(\"Replace the contents of the file with the following. Notice the new \"),n(\"code\",[e._v(\"iac-security\")]),e._v(\" job. In our job definition, we've decided to fail the check if any medium severity or higher issues are present.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language-text extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"name: Snyk Security Gate\\non: \\n  pull_request:\\n    branches:\\n      PROD\\njobs:\\n  oss-security:\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@master\\n    - name: Check for High Severity OSS Vulnerabilities\\n      uses: snyk/actions/node@master\\n      env:\\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n      with:\\n        args: --severity-threshold=high --fail-on=upgradable\\n  iac-security:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n      - name: Snyk IaC Test\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ Secrets.SNYK_TOKEN }}\\n        with:\\n          file: goof-deployment.yaml goof-service.yaml\\n          args: --severity-threshold=medium\\n\")])])]),n(\"p\",[e._v(\"When ready, commit the changed file directly to the \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" branch.\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-commitgatechanges.png)\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"understand-the-new-snyk-gate-workflow\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#understand-the-new-snyk-gate-workflow\"}},[e._v(\"#\")]),e._v(\" Understand the new Snyk Gate workflow\")]),e._v(\" \"),n(\"p\",[e._v(\"The Snyk Gate now checks for two things when a Pull Request is opened against the PROD branch:\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"Are there application dependencies with High Severity issues that are fixable?\")]),e._v(\" \"),n(\"li\",[e._v(\"Are there Medium severity configuration issues in our deployment manifests?\")])]),e._v(\" \"),n(\"p\",[e._v(\"These are tolerances our team settled on for our Production environment. Automating this check as part of the PR process gives us confidence that what we merge into PROD conforms to these rules.\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"step-5-create-a-pull-request-into-develop\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#step-5-create-a-pull-request-into-develop\"}},[e._v(\"#\")]),e._v(\" Step 5: Create a Pull Request into develop\")]),e._v(\" \"),n(\"p\",[e._v(\"We're ready to merge the \"),n(\"code\",[e._v(\"add-iac-files\")]),e._v(\" branch into the \"),n(\"code\",[e._v(\"develop\")]),e._v(\" branch. In GitHub, initiate a Pull Request from \"),n(\"code\",[e._v(\"develop\")]),e._v(\" to \"),n(\"code\",[e._v(\"PROD\")]),e._v(\". Remember to select your fork as the Base repo.\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-developpr.png)\")]),e._v(\" \"),n(\"p\",[e._v(\"Once the PR is created, we can see the new Snyk IaC check workflow run as part of the Pull Request, which uploads the results into GitHub Security Code Scanning. When it completes, merge the changes.\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"step-6-create-a-pull-request-into-prod\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#step-6-create-a-pull-request-into-prod\"}},[e._v(\"#\")]),e._v(\" Step 6: Create a Pull Request into PROD\")]),e._v(\" \"),n(\"p\",[e._v(\"Our \"),n(\"code\",[e._v(\"develop\")]),e._v(\" branch now has what we need to deploy our application into Kubernetes! Let's open a Pull Request to merge our changes, and our deployment manifests, into \"),n(\"code\",[e._v(\"PROD\")]),e._v(\".\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-prodpr.png)\")]),e._v(\" \"),n(\"p\",[e._v(\"In the PR Checks, we see that our IaC gate failed!\")]),e._v(\" \"),n(\"p\",[e._v(\"(IMAGE REMOVED!) - (https://partner-workshop-assets.s3.us-east-2.amazonaws.com/gh-iac-iacgatefail.png)\")]),e._v(\" \"),n(\"p\",[e._v(\"Leave the Pull Request open for now. In the next section, we'll more about the risks Snyk identified and prevented us from introducing into our Production branch.\")])])}),[],!1,null,null,null);t.default=o.exports}}]);","extractedComments":[]}