{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[923],{1320:function(t,e,s){\"use strict\";s.r(e);var a=s(56),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"create-a-snyk-app-with-typescript\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-a-snyk-app-with-typescript\"}},[t._v(\"#\")]),t._v(\" Create a Snyk App with TypeScript\")]),t._v(\" \"),s(\"p\",[t._v(\"In this tutorial, we'll create a simple Snyk App using TypeScript to show users a list of their projects within Snyk.\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"prerequisites\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#prerequisites\"}},[t._v(\"#\")]),t._v(\" Prerequisites\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"NodeJS\")]),t._v(\" \"),s(\"li\",[t._v(\"A Snyk account\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"configure-the-basics\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#configure-the-basics\"}},[t._v(\"#\")]),t._v(\" Configure the basics\")]),t._v(\" \"),s(\"p\",[t._v(\"To begin, create a directory to house the project somewhere on your device. From within the newly created directory, we'll initialize a \"),s(\"code\",[t._v(\"package.json\")]),t._v(\" manifest for our application to keep track of our dependencies and ensure our project is portable.\")]),t._v(\" \"),s(\"p\",[t._v(\"To do so, run \"),s(\"code\",[t._v(\"npm init\")]),t._v(\" and follow the prompts. You can add as much or as little information as you want here. For now, the default options will suffice.\")]),t._v(\" \"),s(\"p\",[t._v(\"Now that we've got a place to save dependency information, use \"),s(\"code\",[t._v(\"npm\")]),t._v(\" to install TypeScript as a development dependency:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"npm install typescript --save-dev\\n\")])])]),s(\"p\",[t._v(\"At this point, TypeScript has been installed, but we'll need a configuration file to provide compilation options to the \"),s(\"code\",[t._v(\"tsc\")]),t._v(\" binary. Create a TypeScript configuration file in the root of the project called \"),s(\"code\",[t._v(\"tsconfig.json\")]),t._v(\" using the template below.\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-json extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-json\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"compilerOptions\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"target\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"es6\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"module\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"commonjs\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"declaration\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"sourceMap\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"moduleResolution\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"node\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"outDir\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"./dist\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"rootDir\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"./src\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"strict\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"skipLibCheck\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"esModuleInterop\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"exclude\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"./tests\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"./dist\"')]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"The options we've provided tell TypeScript that it should emit ES6 JavaScript, which type of module code to generate, whether or not to provide a corresponding source map for the compiled files and a few other handy options. For a complete overview of the possible options, visit https://aka.ms/tsconfig.json .\")]),t._v(\" \"),s(\"p\",[t._v(\"For the purposes of this tutorial, the most noteworthy options we've set are \"),s(\"code\",[t._v(\"rootDir\")]),t._v(\" and \"),s(\"code\",[t._v(\"outDir\")]),t._v(\". These options describe where our source \"),s(\"code\",[t._v(\".ts\")]),t._v(\" files and our compiled \"),s(\"code\",[t._v(\".js\")]),t._v(\" files, respectively, live within our project. Create the directories referenced by the setting values:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-bash extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"mkdir\")]),t._v(\" ./dist\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"mkdir\")]),t._v(\" ./src\\n\")])])]),s(\"h3\",{attrs:{id:\"test-it-out\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#test-it-out\"}},[t._v(\"#\")]),t._v(\" Test it out\")]),t._v(\" \"),s(\"p\",[t._v(\"Now that we've got the basic parameters in place, we'll create a simple Hello World by creating the file \"),s(\"code\",[t._v(\"./src/index.ts\")]),t._v(\".\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"const world = 'world';\\n\\nexport function hello(world: string = world): string {\\n  return `Hello ${world}! `;\\n}\\n\")])])]),s(\"p\",[t._v(\"Now we can confirm that everything is wired up correctly. Run \"),s(\"code\",[t._v(\"npx tsc\")]),t._v(\" to compile the project.\")]),t._v(\" \"),s(\"p\",[t._v(\"If everything is successful, the project tree should now look like this:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"my-snyk-app/\\n - dist/\\n   - index.d.ts\\n   - index.js\\n   - index.js.map\\n - src/\\n   - index.ts\\n - node_modules/\\n   - <lots of things here>\\n - package-lock.json\\n - tsconfig.json\\n\")])])]),s(\"p\",[t._v(\"The \"),s(\"code\",[t._v(\"tsc\")]),t._v(\" program compiled our source TypeScript file into ES6 JavaScript and provided a source map for debugging!\")]),t._v(\" \"),s(\"p\",[t._v('{% hint style=\"info\" %}\\nThe compiler can also be put into watch mode to continually poll your '),s(\"code\",[t._v(\".ts\")]),t._v(\" files for changes: \"),s(\"code\",[t._v(\"npx tsc -w\")]),t._v(\"\\n{% endhint %}\")])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}