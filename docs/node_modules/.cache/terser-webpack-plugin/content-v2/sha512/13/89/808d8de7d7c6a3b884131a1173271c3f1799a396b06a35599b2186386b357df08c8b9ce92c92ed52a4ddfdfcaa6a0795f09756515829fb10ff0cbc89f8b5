{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[567],{963:function(e,t,s){\"use strict\";s.r(t);var a=s(56),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"testing-a-rule\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#testing-a-rule\"}},[e._v(\"#\")]),e._v(\" Testing a rule\")]),e._v(\" \"),s(\"p\",[e._v(\"If you've generated the rules using the \"),s(\"code\",[e._v(\"template\")]),e._v(\" command, as shown in \"),s(\"RouterLink\",{attrs:{to:\"/snyk/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/writing-a-rule.html\"}},[e._v(\"Writing a rule\")]),e._v(\", then you can also benefit from using the testing functionality that comes with the SDK and the generated rules. \")],1),e._v(\" \"),s(\"p\",[e._v('{% hint style=\"info\" %}\\nYou may also write your own testing functionality or modify the one generated by the SDK, as you prefer. However, the instructions in this page would not apply.\\n{% endhint %}')]),e._v(\" \"),s(\"p\",[e._v(\"Assuming you have written your rule based on the previous tutorial, open the \"),s(\"code\",[e._v(\"main_test.rego\")]),e._v(\" file generated by the SDK's templating functionality and configure the \"),s(\"code\",[e._v(\"fixture\")]),e._v(\" field with the name of the file inside your \"),s(\"code\",[e._v(\"rules/my_rule/fixtures/\")]),e._v(\" folder. The templating functionality has created one file per supported format and configured the tests to run against all of them, but you may remove fixture files as you desire.\")]),e._v(\" \"),s(\"p\",[e._v(\"Create or modify fixture files to store your resources under \"),s(\"code\",[e._v(\"rules/my_rule/fixtures\")]),e._v(\". These files can have any name, so take for example \"),s(\"code\",[e._v(\"denied.tf\")]),e._v(\" and \"),s(\"code\",[e._v(\"allowed.tf\")]),e._v(\":\")]),e._v(\" \"),s(\"p\",[e._v('{% hint style=\"warning\" %}\\nThe file can have any name but pay close attention to the file extension. Be especially careful if you want to write a test for a fixture file containing Terraform Plan JSON Output, make sure the name of the file has the file extension '),s(\"code\",[e._v(\".json.tfplan\")]),e._v(\" so that our testing library can differentiate between plain JSON and Terraform Plan JSON Output.\\n{% endhint %}\")]),e._v(\" \"),s(\"p\",[e._v('{% code title=\"rules/my_rule/fixtures/denied.tf\" %}')]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('resource \"aws_redshift_cluster\" \"denied\" {\\n  cluster_identifier = \"tf-redshift-cluster\"\\n  database_name      = \"mydb\"\\n  master_username    = \"foo\"\\n  master_password    = \"Mustbe8characters\"\\n  node_type          = \"dc1.large\"\\n  cluster_type       = \"single-node\"\\n}\\n')])])]),s(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),s(\"p\",[e._v('{% code title=\"rules/my_rule/fixtures/allowed.tf\" %}')]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('resource \"aws_redshift_cluster\" \"allowed\" {\\n  cluster_identifier = \"tf-redshift-cluster\"\\n  database_name      = \"mydb\"\\n  master_username    = \"foo\"\\n  master_password    = \"Mustbe8characters\"\\n  node_type          = \"dc1.large\"\\n  cluster_type       = \"single-node\"\\n  tags {\\n    owner = \"snyk\"\\n  }\\n}\\n')])])]),s(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),s(\"p\",[e._v(\"In the \"),s(\"code\",[e._v(\"want_msgs\")]),e._v(\" field of the test case, you should add the msg fields of the resources that you expect that your deny rule will evaluate/return, e.g. \"),s(\"code\",[e._v('[\"input.resource.aws_redshift_cluster[denied].tags\"]')]),e._v(\".\")]),e._v(\" \"),s(\"p\",[e._v('{% hint style=\"info\" %}\\nThe '),s(\"code\",[e._v(\"want_msgs\")]),e._v(\" field should be an array containing hardcoded values corresponding to the computed \"),s(\"code\",[e._v(\"msg\")]),e._v(\" field in the appropriate Rego rule.\\n{% endhint %}\")]),e._v(\" \"),s(\"p\",[e._v('{% code title=\"rules/my_rule/main_test.rego\" %}')]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('package rules\\n\\nimport data.lib\\nimport data.lib.testing\\n\\ntest_my_rule {\\n\\t# array containing test cases where the rule is allowed\\n\\tallowed_test_cases := [{\\n\\t\\t\"want_msgs\": [],\\n\\t\\t\"fixture\": \"allowed.tf\",\\n\\t}]\\n\\t# array containing cases where the rule is denied\\n\\tdenied_test_cases := [{\\n\\t\\t\"want_msgs\": [\"input.resource.aws_redshift_cluster[denied].tags\"],\\n\\t\\t\"fixture\": \"denied.tf\",\\n\\t}]\\n\\ttest_cases := array.concat(allowed_test_cases, denied_test_cases)\\n\\ttesting.evaluate_test_cases(\"my_rule\", \"./rules/my_rule/fixtures\", test_cases)\\n}\\n')])])]),s(\"p\",[e._v(\"{% endcode %}\")]),e._v(\" \"),s(\"p\",[e._v(\"To run all tests, run the following command:\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\" snyk-iac-rules test\\n\")])])]),s(\"p\",[e._v(\"If your tests pass successfully, you will see an output similar to the following, assuming you have three different rules in your \"),s(\"code\",[e._v(\"rules/\")]),e._v(\" folder:\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"PASS: 3/3\\n\")])])]),s(\"p\",[e._v(\"However, if any of them fail, you will see an output similar to the following:\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"data.rules.test_my_rule: FAIL (1.12234ms)\\nFAIL: 2/3\\n\")])])]),s(\"p\",[e._v(\"If you have more than one rule in your \"),s(\"code\",[e._v(\"rule/\")]),e._v(\", folder you can target a specific test by running the following command:\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"snyk-iac-rules test --run test_my_rule\\n\")])])]),s(\"p\",[e._v(\"This will output:\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"Executing Rego test cases...\\ndata.rules.test_my_rule: FAIL (1.040468ms)\\n--------------------------------------------------------------------------------\\nFAIL: 1/1\\n\")])])]),s(\"p\",[e._v(\"If you need more details about it, add the \"),s(\"code\",[e._v(\"--explain notes\")]),e._v(\" option:\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\" snyk-iac-rules test --run test_my_rule --explain notes\\n\")])])]),s(\"p\",[e._v(\"This will output more details to debug the failed test.\")]),e._v(\" \"),s(\"p\",[e._v('{% hint style=\"info\" %}\\nIf you have more than your generated rules in the current folder ,consider using the  '),s(\"code\",[e._v(\"--ignore\")]),e._v(\" flag to exclude the folders and files irrelevant to testing (make sure to not exclude \"),s(\"code\",[e._v(\"lib/\")]),e._v(\" and \"),s(\"code\",[e._v(\"rules\")]),e._v(\" if you used the \"),s(\"code\",[e._v(\"template\")]),e._v(\" command). This can speed up the tests and also avoids running into problems where Rego is trying to evaluate non-Rego files.\\n{% endhint %}\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}