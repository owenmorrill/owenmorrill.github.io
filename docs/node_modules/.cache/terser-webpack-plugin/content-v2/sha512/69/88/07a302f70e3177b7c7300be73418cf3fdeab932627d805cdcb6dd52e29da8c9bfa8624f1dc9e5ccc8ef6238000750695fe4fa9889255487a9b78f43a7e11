{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[893],{1291:function(e,t,s){\"use strict\";s.r(t);var a=s(56),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"interpret-scan-results\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#interpret-scan-results\"}},[e._v(\"#\")]),e._v(\" Interpret scan results\")]),e._v(\" \"),s(\"p\",[e._v(\"The \"),s(\"code\",[e._v(\"Projects\")]),e._v(\" page will contain an inventory of all projects added and a high level summary of findings. You can expand on a particular project to learn more about vulnerabilities that may have been found and guidance on how to fix these or optimizations. Let's walk through some examples.\")]),e._v(\" \"),s(\"p\",[e._v(\"The figure below shows the two workloads we imported in the previous section. These have been expanded to show that the results are including two key areas: Kubernetes configuration and container image scan results. Clicking on each of these will present you with additional insights.\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://partner-workshop-assets.s3.us-east-2.amazonaws.com/snyk_scan_01.png\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"Let's begin with examining our Kubernetes configuration by click on each respective workload.\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://partner-workshop-assets.s3.us-east-2.amazonaws.com/snyk_scan_02.png\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://partner-workshop-assets.s3.us-east-2.amazonaws.com/snyk_scan_03.png\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"The results above yield some interesting findings. From this view, we are able to see a summary of \"),s(\"code\",[e._v(\"Vulnerabilities\")]),e._v(\", number of \"),s(\"code\",[e._v(\"Dependencies\")]),e._v(\", and our \"),s(\"code\",[e._v(\"Security configuration\")]),e._v(\". Let's take a closer look and interpret what these results mean.\")]),e._v(\" \"),s(\"p\",[e._v(\"If we examine the \"),s(\"code\",[e._v(\"azure-vote.yaml\")]),e._v(\" manifest we applied to our Kubernetes cluster, we can see that we defined some parameters such as \"),s(\"code\",[e._v(\"cpu\")]),e._v(\" and \"),s(\"code\",[e._v(\"memory\")]),e._v(\" limits. As a result, these were not flagged during the scan.\")]),e._v(\" \"),s(\"div\",{staticClass:\"language-yaml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-yaml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"resources\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"requests\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"cpu\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\" 100m\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"memory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\" 128Mi\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"limits\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"cpu\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\" 250m\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[e._v(\"memory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),e._v(\" 256Mi\\n\")])])]),s(\"p\",[e._v(\"However, our manifest did not set \"),s(\"code\",[e._v(\"securityContext\")]),e._v(\" parameters such as \"),s(\"code\",[e._v(\"readOnlyRootFilesystem\")]),e._v(\", \"),s(\"code\",[e._v(\"runAsNonRoot\")]),e._v(\", \"),s(\"code\",[e._v(\"allowPrivilegeEscalation\")]),e._v(\", and \"),s(\"code\",[e._v(\"capabilities\")]),e._v(\". As a result, we see this in our findings with the \"),s(\"code\",[e._v(\"FAIL\")]),e._v(\" flag.\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[e._v(\"Run as non-root: Whether any containers in the workload have \"),s(\"code\",[e._v(\"container.securityContext.runAsNonRoot\")]),e._v(\" set to \"),s(\"code\",[e._v(\"false\")]),e._v(\" or unset.\")]),e._v(\" \"),s(\"li\",[e._v(\"Read-only root file system: Whether any containers in the workload have \"),s(\"code\",[e._v(\"container.securityContext.readOnlyFilesystem\")]),e._v(\" set to \"),s(\"code\",[e._v(\"false\")]),e._v(\" or unset.\")]),e._v(\" \"),s(\"li\",[e._v(\"Drop capabilities: Whether all capabilities are dropped and \"),s(\"code\",[e._v(\"CAP_SYS_ADMIN\")]),e._v(\" is not added.\")])]),e._v(\" \"),s(\"p\",[e._v(\"Next, let's take a closer look at our container image results:\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://partner-workshop-assets.s3.us-east-2.amazonaws.com/snyk_scan_04.png\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"Here we are immediately advised that a \"),s(\"code\",[e._v(\"Dockerfile\")]),e._v(\" is missing. We know this to be true, because our deployment consisted of a manifest file that is pulling an image from a public registry. In the case of our \"),s(\"code\",[e._v(\"vote-back\")]),e._v(\" and \"),s(\"code\",[e._v(\"vote-front\")]),e._v(\" applications we are pulling the \"),s(\"a\",{attrs:{href:\"https://kubernetes.io/docs/concepts/containers/images/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"image\"),s(\"OutboundLink\")],1),e._v(\" from \"),s(\"code\",[e._v(\"redis\")]),e._v(\" and \"),s(\"code\",[e._v(\"microsoft/azure-vote-front:v1\")]),e._v(\" respectively.\")]),e._v(\" \"),s(\"p\",[e._v(\"A best practice here would be to include a \"),s(\"code\",[e._v(\"Dockerfile\")]),e._v(\" in our Git repo and pull the image from our private registry. That way we can resolve any issues with our base images and also scan & monitor those through Snyk's integrations to \"),s(\"a\",{attrs:{href:\"https://support.snyk.io/hc/en-us/articles/360004002198-Azure-Repos-integration\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Azure Repos\"),s(\"OutboundLink\")],1),e._v(\" and \"),s(\"a\",{attrs:{href:\"https://support.snyk.io/hc/en-us/articles/360003946957-Container-security-with-ACR-integrate-and-test\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Azure Container Registry (ACR)\"),s(\"OutboundLink\")],1),e._v(\".\")]),e._v(\" \"),s(\"p\",[e._v(\"We will dive into these in a later workshop.\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}