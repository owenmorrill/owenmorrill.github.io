{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/examples.md?vue&type=template&id=2a9e5ef2&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/examples.md","mtime":1644439893064},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJyx7YXR0cnM6eyJzbG90LWtleSI6X3ZtLiRwYXJlbnQuc2xvdEtleX19LFtfYygnaDEnLHthdHRyczp7ImlkIjoiZXhhbXBsZXMtb2YtY3VzdG9tLXJ1bGVzIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZXhhbXBsZXMtb2YtY3VzdG9tLXJ1bGVzIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEV4YW1wbGVzIG9mIGN1c3RvbSBydWxlcyIpXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6ImV4YW1wbGUtb2YtYS1zaW1wbGUtYm9vbGVhbi1ydWxlIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZXhhbXBsZS1vZi1hLXNpbXBsZS1ib29sZWFuLXJ1bGUifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgRXhhbXBsZSBvZiBhIHNpbXBsZSBib29sZWFuIHJ1bGUiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJ7JSBoaW50IHN0eWxlPVwiaW5mb1wiICV9XG5Zb3UgY2FuIGZpbmQgYSBmdWxsIGV4YW1wbGUgb2YgdGhpcyBndWlkZSBpbiAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vcGxheS5vcGVucG9saWN5YWdlbnQub3JnL3AvU0NZbmRCald4aCIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigidGhpcyBPUEEgUGxheWdyb3VuZCIpLF9jKCdPdXRib3VuZExpbmsnKV0sMSksX3ZtLl92KCIgYW5kIHRoZSAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrL2N1c3RvbS1ydWxlcy1leGFtcGxlIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJzbnlrL2N1c3RvbS1ydWxlcy1leGFtcGxlIiksX2MoJ091dGJvdW5kTGluaycpXSwxKSxfdm0uX3YoIiByZXBvc2l0b3J5LlxueyUgZW5kaGludCAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkxldOKAmXMgYXNzdW1lIHdlIGhhdmUgZ2VuZXJhdGVkIGEgbmV3IHJ1bGUgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIkNVU1RPTS1SVUxFLTEiKV0pLF92bS5fdigiIHVzaW5nIHRoZSBTREsgKGkuZS4gIiksX2MoJ2NvZGUnLFtfdm0uX3YoInNueWstaWFjLXJ1bGVzIHRlbXBsYXRlIC0tcnVsZSBDVVNUT00tUlVMRS0xIildKSxfdm0uX3YoIikgYW5kIGhhdmUgYSB2ZXJ5IHNpbXBsZSBmaXh0dXJlIGZpbGUgY29udGFpbmluZyBhIFRlcnJhZm9ybSByZXNvdXJjZToiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJ7JSBjb2RlIHRpdGxlPVwicnVsZXMvQ1VTVE9NLVJVTEUtMS9maXh0dXJlcy9kZW5pZWQudGZcIiAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigicmVzb3VyY2UgXCJhd3NfcmVkc2hpZnRfY2x1c3RlclwiIFwiZGVuaWVkXCIge1xuICBjbHVzdGVyX2lkZW50aWZpZXIgPSBcInRmLXJlZHNoaWZ0LWNsdXN0ZXJcIlxuICBub2RlX3R5cGUgICAgICAgICAgPSBcImRjMS5sYXJnZVwiXG4gIHRhZ3MgPSB7XG4gIH1cbn1cbiIpXSldKV0pLF9jKCdwJyxbX3ZtLl92KCJ7JSBlbmRjb2RlICV9IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiTm93LCB3ZSB3YW50IHRvIG1vZGlmeSB0aGUgZ2VuZXJhdGVkIFJlZ28gdG8gZW5mb3JjZSByZXNvdXJjZXMgdGFnZ2VkIHdpdGggYW4gb3duZXI6IildKSxfdm0uX3YoIiAiKSxfYygnb2wnLFtfYygnbGknLFtfdm0uX3YoIkNyZWF0ZSBhIHZhcmlhYmxlICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJbbmFtZV0iKV0pLF92bS5fdigiIHRvIHRvIGVudW1lcmF0ZSBhY3Jvc3MgYWxsIG9mIHRoZSAiKSxfYygnY29kZScsW192bS5fdigiYXdzX3JlZHNoaWZ0X2NsdXN0ZXIiKV0pLF92bS5fdigiIHJlc291cmNlcy4gVGhpcyB2YXJpYWJsZSBjYW4gYmUgbmFtZWQgYW55dGhpbmcgeW91IGxpa2UgKGUuZy4gIiksX2MoJ2NvZGUnLFtfdm0uX3YoImkiKV0pLF92bS5fdigiLCAiKSxfYygnY29kZScsW192bS5fdigiaiIpXSksX3ZtLl92KCIsICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJuYW1lIildKSxfdm0uX3YoIiwgZXRjLikuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlN0b3JlIHRoaXMgaW50byB0aGUgcmVzb3VyY2UgdmFyaWFibGUgYnkgYXNzaWduaW5nIHRoZSB2YWx1ZSB0byBpdCB3aXRoIGEgd2FscnVzIG9wZXJhdG9yICIpLF9jKCdjb2RlJyxbX3ZtLl92KCI6PSIpXSksX3ZtLl92KCI7IGUuZy4gIiksX2MoJ2NvZGUnLFtfdm0uX3YoInJlc291cmNlIDo9IGlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyW25hbWVdIildKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiQ2hlY2sgaWYgdGhlIG93bmVyIHRhZyBleGlzdHMgZm9yIGVhY2ggcmVzb3VyY2U7IHRvIGRvIHRoYXQsIGNoZWNrIGlmIHRoZSBwYXRoICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJyZXNvdXJjZS50YWdzLm93bmVyIildKSxfdm0uX3YoImlzIGRlZmluZWQuIElmIGl0IGlzIHVuZGVmaW5lZCwgaXQgd2lsbCBldmFsdWF0ZSB0byB1bmRlZmluZWQuIFNvLCB1c2UgdGhlICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJOT1QiKV0pLF92bS5fdigiIGtleXdvcmQgaW4gZnJvbnQgb2YgaXQsIHdoaWNoIHdpbGwgZXZhbHVhdGUgdG8gIiksX2MoJ2NvZGUnLFtfdm0uX3YoIlRSVUUiKV0pLF92bS5fdigiOyBlLmcuIiksX2MoJ2NvZGUnLFtfdm0uX3YoIm5vdCByZXNvdXJjZS50YWdzLm93bmVyIildKV0pXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRoZSBtb2RpZmllZCBSZWdvIGlzOiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoInslIGNvZGUgdGl0bGU9XCJydWxlcy9DVVNUT00tUlVMRS0xL21haW4ucmVnb1wiICV9IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJwYWNrYWdlIHJ1bGVzXG5cbmRlbnlbbXNnXSB7XG4gICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV1cbiAgICBub3QgcmVzb3VyY2UudGFncy5vd25lclxuXG4gICAgbXNnIDo9IHtcbiAgICAgICAgXCJwdWJsaWNJZFwiOiBcIkNVU1RPTS1SVUxFLTFcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIk1pc3NpbmcgYW4gb3duZXIgZnJvbSB0YWdcIixcbiAgICAgICAgXCJzZXZlcml0eVwiOiBcIm1lZGl1bVwiLFxuICAgICAgICBcIm1zZ1wiOiBzcHJpbnRmKFwiaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbJXNdLnRhZ3NcIiwgW25hbWVdKSxcbiAgICAgICAgXCJpc3N1ZVwiOiBcIlwiLFxuICAgICAgICBcImltcGFjdFwiOiBcIlwiLFxuICAgICAgICBcInJlbWVkaWF0aW9uXCI6IFwiXCIsXG4gICAgICAgIFwicmVmZXJlbmNlc1wiOiBbXSxcbiAgICB9XG59XG4iKV0pXSldKSxfYygncCcsW192bS5fdigieyUgZW5kY29kZSAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoInslIGhpbnQgc3R5bGU9XCJpbmZvXCIgJX1cblRvIHVuZGVyc3RhbmQgaG93IHRoZSBSZWdvIGNvZGUgZXZhbHVhdGVzIHRoZSBUZXJyYWZvcm0gZmlsZSBwcm92aWRlZCBlYXJsaWVyLCBoYXZlIGEgbG9vayBhdCBob3cgdGhlIFNESyBpcyBhYmxlIHRvICIpLF9jKCdSb3V0ZXJMaW5rJyx7YXR0cnM6eyJ0byI6Ii9zbnlrL3Byb2R1Y3RzL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS9jdXN0b20tcnVsZXMvZ2V0dGluZy1zdGFydGVkLXdpdGgtdGhlLXNkay9wYXJzaW5nLWFuLWlucHV0LWZpbGUuaHRtbCJ9fSxbX3ZtLl92KCJwYXJzZSBhIGZpeHR1cmUgZmlsZSIpXSksX3ZtLl92KCIgaW50byBKU09OLlxueyUgZW5kaGludCAlfSIpXSwxKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgaGludCBzdHlsZT1cIndhcm5pbmdcIiAlfVxuV2UgcmVjb21tZW5kIGFsd2F5cyB2YWxpZGF0aW5nIHRoYXQgeW91ciBydWxlIGlzIGNvcnJlY3QgYnkgIiksX2MoJ1JvdXRlckxpbmsnLHthdHRyczp7InRvIjoiL3NueWsvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2N1c3RvbS1ydWxlcy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC10aGUtc2RrL3Rlc3RpbmctYS1ydWxlLmh0bWwifX0sW192bS5fdigidXBkYXRpbmcgYW5kIHJ1bm5pbmcgdGhlIHVuaXQgdGVzdHMiKV0pLF92bS5fdigiLlxueyUgZW5kaGludCAlfSIpXSwxKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiVGhlIHRlc3QgZm9yIHRoaXMgcnVsZSB2ZXJpZmllcyB0aGF0IHRoZSBSZWdvIHJ1bGUgaXMgYWJsZSB0byBpZGVudGlmeSB0aGF0IHRoZSBmaXh0dXJlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBndWlkZSBpcyBpbnZhbGlkOiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoInslIGNvZGUgdGl0bGU9XCJydWxlcy9DVVNUT00tUlVMRS0xL21haW5fdGVzdC5yZWdvXCIgJX0iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2UgcnVsZXNcblxuaW1wb3J0IGRhdGEubGliXG5pbXBvcnQgZGF0YS5saWIudGVzdGluZ1xuXG50ZXN0X0NVU1RPTV9SVUxFXzEge1xuXHQjIGFycmF5IGNvbnRhaW5pbmcgdGVzdCBjYXNlcyB3aGVyZSB0aGUgcnVsZSBpcyBhbGxvd2VkXG5cdGFsbG93ZWRfdGVzdF9jYXNlcyA6PSBbe1xuXHRcdFwid2FudF9tc2dzXCI6IFtdLFxuXHRcdFwiZml4dHVyZVwiOiBcImFsbG93ZWQudGZcIixcblx0fV1cblxuXHQjIGFycmF5IGNvbnRhaW5pbmcgY2FzZXMgd2hlcmUgdGhlIHJ1bGUgaXMgZGVuaWVkXG5cdGRlbmllZF90ZXN0X2Nhc2VzIDo9IFt7XG5cdFx0XCJ3YW50X21zZ3NcIjogW1wiaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbZGVuaWVkXS50YWdzXCJdLFxuXHRcdFwiZml4dHVyZVwiOiBcImRlbmllZC50ZlwiLFxuXHR9XVxuXG5cdHRlc3RfY2FzZXMgOj0gYXJyYXkuY29uY2F0KGFsbG93ZWRfdGVzdF9jYXNlcywgZGVuaWVkX3Rlc3RfY2FzZXMpXG5cdHRlc3RpbmcuZXZhbHVhdGVfdGVzdF9jYXNlcyhcIkNVU1RPTS1SVUxFLTFcIiwgXCIuL3J1bGVzL0NVU1RPTS1SVUxFLTEvZml4dHVyZXNcIiwgdGVzdF9jYXNlcylcbn1cbiIpXSldKV0pLF9jKCdwJyxbX3ZtLl92KCJ7JSBlbmRjb2RlICV9IildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZXhhbXBsZS13aXRoLWxvZ2ljYWwtYW5kIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZXhhbXBsZS13aXRoLWxvZ2ljYWwtYW5kIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEV4YW1wbGUgd2l0aCBsb2dpY2FsIEFORCIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkxldOKAmXMgdHJ5IGFuZCBleHRlbmQgdGhlIGV4YW1wbGUgYWJvdmUgYW5kIHVwZGF0ZSB0aGUgcnVsZSB0byBhbGxvdyBhbGwgY2FzZXMgdGhhdCBzdWZmaWNlIHR3byBjb25kaXRpb25zOiIpXSksX3ZtLl92KCIgIiksX2MoJ29sJyxbX2MoJ2xpJyxbX3ZtLl92KCJBIHJlc291cmNlIGhhcyBhbiDigJxvd25lcuKAnSB0YWciKSxfYygnYnInKSxfdm0uX3YoIiAiKSxfYygnc3Ryb25nJyxbX3ZtLl92KCJBTkQiKV0pXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJBIHJlc291cmNlIGhhcyBhIOKAnGRlc2NyaXB0aW9u4oCdIHRhZyIpXSldKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiVG8gdGVzdCB0aGlzIG5ldyBjb25kaXRpb24sIHdlIGdlbmVyYXRlIGEgbmV3IHJ1bGUgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIkNVU1RPTS1SVUxFLTIiKV0pLF92bS5fdigiIHVzaW5nIHRoZSAiKSxfYygnY29kZScsW192bS5fdigidGVtcGxhdGUiKV0pLF92bS5fdigiIGNvbW1hbmQgYW5kIHdyaXRlIHRoZSBmb2xsb3dpbmcgZml4dHVyZSBmaWxlOiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoInslIGNvZGUgdGl0bGU9XCJydWxlcy9DVVNUT00tUlVMRS0yL2ZpeHR1cmVzL2RlbmllZC50ZlwiICV9IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJyZXNvdXJjZSBcImF3c19yZWRzaGlmdF9jbHVzdGVyXCIgXCJkZW5pZWRcIiB7XG4gIGNsdXN0ZXJfaWRlbnRpZmllciA9IFwidGYtcmVkc2hpZnQtY2x1c3RlclwiXG4gIG5vZGVfdHlwZSAgICAgICAgICA9IFwiZGMxLmxhcmdlXCJcbiAgdGFncyA9IHtcbiAgICBvd25lciA9IFwidGVhbS0xMjNcIlxuICB9XG59XG4iKV0pXSldKSxfYygncCcsW192bS5fdigieyUgZW5kY29kZSAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkpvaW5pbmcgbXVsdGlwbGUgZXhwcmVzc2lvbnMgdG9nZXRoZXIgZXhwcmVzc2VzIGxvZ2ljYWwgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIkFORCIpXSksX3ZtLl92KCIuICIpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJZb3UgY2FuIGRvIHRoaXMgd2l0aCB0aGUgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIjsiKV0pLF92bS5fdigiIG9wZXJhdG9yLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJPciwgeW91IGNhbiBvbWl0IHRoZSAiKSxfYygnY29kZScsW192bS5fdigiOyIpXSksX3ZtLl92KCIgKCIpLF9jKCdjb2RlJyxbX3ZtLl92KCJBTkQiKV0pLF92bS5fdigiKSBvcGVyYXRvciBieSBzcGxpdHRpbmcgZXhwcmVzc2lvbnMgYWNyb3NzIG11bHRpcGxlIGxpbmVzLiIpXSldKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgaGludCBzdHlsZT1cImluZm9cIiAlfVxuVGhlIGxvZ2ljYWwgQU5EIGlzIGNvdmVyZWQgYWxzbyBpbiB0aGUgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy5vcGVucG9saWN5YWdlbnQub3JnL2RvY3MvbGF0ZXN0LyNleHByZXNzaW9ucy1sb2dpY2FsLWFuZCIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiT1BBIGRvY3VtZW50YXRpb24iKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpLF92bS5fdigiLlxueyUgZW5kaGludCAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoInslIGNvZGUgdGl0bGU9XCJydWxlcy9DVVNUT00tUlVMRS0yL21haW4ucmVnb1wiICV9IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJwYWNrYWdlIHJ1bGVzXG5cbmF3c19yZWRzaGlmdF9jbHVzdGVyX3RhZ3NfcHJlc2VudChyZXNvdXJjZSkge1xuICAgIHJlc291cmNlLnRhZ3Mub3duZXJcbiAgICByZXNvdXJjZS50YWdzLmRlc2NyaXB0aW9uXG59XG5cbmRlbnlbbXNnXSB7XG4gICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV1cbiAgICBub3QgYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19wcmVzZW50KHJlc291cmNlKVxuICAgIG1zZyA6PSB7XG4gICAgICAgIFwicHVibGljSWRcIjogXCJDVVNUT00tUlVMRS0yXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJNaXNzaW5nIGEgZGVzY3JpcHRpb24gYW5kIGFuIG93bmVyIGZyb20gdGhlIHRhZ1wiLFxuICAgICAgICBcInNldmVyaXR5XCI6IFwibWVkaXVtXCIsXG4gICAgICAgIFwibXNnXCI6IHNwcmludGYoXCJpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3Rlclslc10udGFnc1wiLCBbbmFtZV0pLFxuICAgICAgICBcImlzc3VlXCI6IFwiXCIsXG4gICAgICAgIFwiaW1wYWN0XCI6IFwiXCIsXG4gICAgICAgIFwicmVtZWRpYXRpb25cIjogXCJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VzXCI6IFtdLFxuICAgIH1cbn1cbiIpXSldKV0pLF9jKCdwJyxbX3ZtLl92KCJ7JSBlbmRjb2RlICV9IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgaGludCBzdHlsZT1cIndhcm5pbmdcIiAlfVxuV2UgcmVjb21tZW5kIGFsd2F5cyB2YWxpZGF0aW5nIHRoYXQgeW91ciBydWxlIGlzIGNvcnJlY3QgYnkgIiksX2MoJ1JvdXRlckxpbmsnLHthdHRyczp7InRvIjoiL3NueWsvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2N1c3RvbS1ydWxlcy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC10aGUtc2RrL3Rlc3RpbmctYS1ydWxlLmh0bWwifX0sW192bS5fdigidXBkYXRpbmcgYW5kIHJ1bm5pbmcgdGhlIHVuaXQgdGVzdHMiKV0pLF92bS5fdigiLlxueyUgZW5kaGludCAlfSIpXSwxKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiVGhlIHRlc3QgZm9yIHRoaXMgcnVsZSB3aWxsIGxvb2sgdGhlIHNhbWUgYXMgdGhlIG9uZSBmb3IgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIkNVU1RPTS1SVUxFLTEiKV0pLF92bS5fdigiLCBidXQgdGhlIG5hbWUgb2YgdGhlIHRlc3QgYW5kIHRoZSBmaXJzdCB0d28gYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgIiksX2MoJ2NvZGUnLFtfdm0uX3YoInRlc3RpbmcuZXZhbHVhdGVfdGVzdF9jYXNlcyIpXSksX3ZtLl92KCIgZnVuY3Rpb24gd2lsbCBkaWZmZXI6IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgY29kZSB0aXRsZT1cInJ1bGVzL0NVU1RPTS1SVUxFLTIvbWFpbl90ZXN0LnJlZ29cIiAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigicGFja2FnZSBydWxlc1xuXG5pbXBvcnQgZGF0YS5saWJcbmltcG9ydCBkYXRhLmxpYi50ZXN0aW5nXG5cbnRlc3RfQ1VTVE9NX1JVTEVfMiB7XG5cdCMgYXJyYXkgY29udGFpbmluZyB0ZXN0IGNhc2VzIHdoZXJlIHRoZSBydWxlIGlzIGFsbG93ZWRcblx0YWxsb3dlZF90ZXN0X2Nhc2VzIDo9IFt7XG5cdFx0XCJ3YW50X21zZ3NcIjogW10sXG5cdFx0XCJmaXh0dXJlXCI6IFwiYWxsb3dlZC50ZlwiLFxuXHR9XVxuXHQjIGFycmF5IGNvbnRhaW5pbmcgY2FzZXMgd2hlcmUgdGhlIHJ1bGUgaXMgZGVuaWVkXG5cdGRlbmllZF90ZXN0X2Nhc2VzIDo9IFt7XG5cdFx0XCJ3YW50X21zZ3NcIjogW1wiaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbZGVuaWVkXS50YWdzXCJdLFxuXHRcdFwiZml4dHVyZVwiOiBcImRlbmllZC50ZlwiLFxuXHR9XVxuXHR0ZXN0X2Nhc2VzIDo9IGFycmF5LmNvbmNhdChhbGxvd2VkX3Rlc3RfY2FzZXMsIGRlbmllZF90ZXN0X2Nhc2VzKVxuXHR0ZXN0aW5nLmV2YWx1YXRlX3Rlc3RfY2FzZXMoXCJDVVNUT00tUlVMRS0yXCIsIFwiLi9ydWxlcy9DVVNUT00tUlVMRS0yL2ZpeHR1cmVzXCIsIHRlc3RfY2FzZXMpXG59XG4iKV0pXSldKSxfYygncCcsW192bS5fdigieyUgZW5kY29kZSAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6ImV4YW1wbGUtd2l0aC1sb2dpY2FsLW9yIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZXhhbXBsZS13aXRoLWxvZ2ljYWwtb3IifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgRXhhbXBsZSB3aXRoIGxvZ2ljYWwgT1IiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJXZSBjYW4gYWxzbyByZXdyaXRlIHRoZSBydWxlIGFib3ZlIGJ5IGNvbWJpbmluZyB0aGUgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIk5PVCIpXSksX3ZtLl92KCIgb3BlcmF0b3Igd2l0aCB0aGUgT1IgZnVuY3Rpb25hbGl0eS4iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJMZXTigJlzIHVwZGF0ZSB0aGUgZXhhbXBsZSBpbiBhIG5ldyBydWxlICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJDVVNUT00tUlVMRS0zIildKSxfdm0uX3YoIiwgdG8gZGVueSBhbGwgY2FzZXMgdGhhdCBmYWlsICIpLF9jKCdzdHJvbmcnLFtfdm0uX3YoImVpdGhlciIpXSksX3ZtLl92KCIgb2YgdGhlIHR3byBjb25kaXRpb25zOyB3ZSB3YW50IHRvIGRlbnkgYWxsICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJhd3NfcmVkc2hpZnRfY2x1c3RlciIpXSksX3ZtLl92KCIgcmVzb3VyY2VzIHRoYXQgYXJlIG1pc3NpbmcgZWl0aGVyOiIpXSksX3ZtLl92KCIgIiksX2MoJ29sJyxbX2MoJ2xpJyxbX3ZtLl92KCJhbiDigJxvd25lcuKAnSB0YWcgLCBPUiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJBIOKAnGRlc2NyaXB0aW9u4oCdIHRhZyIpXSldKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiRm9yIHRoaXMsIHdlIHdpbGwgdXNlIHR3byBuZXcgZml4dHVyZSBmaWxlcywgb25lIGZvciBlYWNoIGNhc2U6IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgY29kZSB0aXRsZT1cInJ1bGVzL0NVU1RPTS1SVUxFLTMvZml4dHVyZXMvZGVuaWVkMS50ZlwiICV9IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJyZXNvdXJjZSBcImF3c19yZWRzaGlmdF9jbHVzdGVyXCIgXCJkZW5pZWQxXCIge1xuICBjbHVzdGVyX2lkZW50aWZpZXIgPSBcInRmLXJlZHNoaWZ0LWNsdXN0ZXJcIlxuICBub2RlX3R5cGUgICAgICAgICAgPSBcImRjMS5sYXJnZVwiXG4gIHRhZ3MgPSB7XG4gICAgb3duZXIgPSBcInRlYW0tMTIzQGNvcnAtZG9tYWluLmNvbVwiXG4gIH1cbn1cbiIpXSldKV0pLF9jKCdwJyxbX3ZtLl92KCJ7JSBlbmRjb2RlICV9IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgY29kZSB0aXRsZT1cInJ1bGVzL0NVU1RPTS1SVUxFLTMvZml4dHVyZXMvZGVuaWVkMi50Z1wiICV9IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJyZXNvdXJjZSBcImF3c19yZWRzaGlmdF9jbHVzdGVyXCIgXCJkZW5pZWQyXCIge1xuICBjbHVzdGVyX2lkZW50aWZpZXIgPSBcInRmLXJlZHNoaWZ0LWNsdXN0ZXJcIlxuICBub2RlX3R5cGUgICAgICAgICAgPSBcImRjMS5sYXJnZVwiXG4gIHRhZ3MgPSB7XG4gICAgZGVzY3JpcHRpb24gPSBcImRlc2NyaXB0aW9uXCIsXG4gIH1cbn1cbiIpXSldKV0pLF9jKCdwJyxbX3ZtLl92KCJ7JSBlbmRjb2RlICV9IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiVG8gZXhwcmVzcyBsb2dpY2FsIE9SIGluIFJlZ28sIHdlIGNhbiBkZWZpbmUgbXVsdGlwbGUgcnVsZXMgb3IgZnVuY3Rpb25zIHdpdGggdGhlIHNhbWUgbmFtZS4gVGhpcyBpcyBhbHNvIGRlc2NyaWJlZCBpbiB0aGUgT1BBIGRvY3VtZW50YXRpb24gZm9yIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy5vcGVucG9saWN5YWdlbnQub3JnL2RvY3MvbGF0ZXN0LyNsb2dpY2FsLW9yIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCIgTG9naWNhbCBPUiIpLF9jKCdPdXRib3VuZExpbmsnKV0sMSksX3ZtLl92KCIuIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiRmlyc3QsIHdlIHdpbGwgYWRkIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGltcGxlbWVudCB0aGUgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIk5PVCIpXSksX3ZtLl92KCIgZm9yIGVhY2ggdGFnLiBUaGVuLCB3ZSB3aWxsIGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHRoZSByZXNvdXJjZToiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJ7JSBjb2RlIHRpdGxlPVwicnVsZXMvQ1VTVE9NLVJVTEUtMy9tYWluLnJlZ29cIiAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigicGFja2FnZSBydWxlc1xuXG5hd3NfcmVkc2hpZnRfY2x1c3Rlcl90YWdzX21pc3NpbmcocmVzb3VyY2UpIHtcbiAgICBub3QgcmVzb3VyY2UudGFncy5vd25lclxufVxuXG5hd3NfcmVkc2hpZnRfY2x1c3Rlcl90YWdzX21pc3NpbmcocmVzb3VyY2UpIHtcbiAgICBub3QgcmVzb3VyY2UudGFncy5kZXNjcmlwdGlvblxufVxuXG5kZW55W21zZ10ge1xuICAgIHJlc291cmNlIDo9IGlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyW25hbWVdXG4gICAgYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKVxuICAgIG1zZyA6PSB7XG4gICAgICAgIFwicHVibGljSWRcIjogXCJDVVNUT00tUlVMRS0zXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJNaXNzaW5nIGEgZGVzY3JpcHRpb24gb3IgYW4gb3duZXIgZnJvbSB0aGUgdGFnXCIsXG4gICAgICAgIFwic2V2ZXJpdHlcIjogXCJtZWRpdW1cIixcbiAgICAgICAgXCJtc2dcIjogc3ByaW50ZihcImlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyWyVzXS50YWdzXCIsIFtuYW1lXSksXG4gICAgICAgIFwiaXNzdWVcIjogXCJcIixcbiAgICAgICAgXCJpbXBhY3RcIjogXCJcIixcbiAgICAgICAgXCJyZW1lZGlhdGlvblwiOiBcIlwiLFxuICAgICAgICBcInJlZmVyZW5jZXNcIjogW10sXG4gICAgfVxufVxuIildKV0pXSksX2MoJ3AnLFtfdm0uX3YoInslIGVuZGNvZGUgJX0iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJUaGlzIHdpbGwgc3VjY2Vzc2Z1bGx5IHJldHVybiBhbGwgdGhlIHJ1bGVzIHRoYXQgZGVueS4iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJ7JSBoaW50IHN0eWxlPVwid2FybmluZ1wiICV9XG5XZSByZWNvbW1lbmQgYWx3YXlzIHZhbGlkYXRpbmcgdGhhdCB5b3VyIHJ1bGUgaXMgY29ycmVjdCBieSAiKSxfYygnUm91dGVyTGluaycse2F0dHJzOnsidG8iOiIvc255ay9wcm9kdWN0cy9zbnlrLWluZnJhc3RydWN0dXJlLWFzLWNvZGUvY3VzdG9tLXJ1bGVzL2dldHRpbmctc3RhcnRlZC13aXRoLXRoZS1zZGsvI3Rlc3QtYS1jdXN0b20tcnVsZSJ9fSxbX3ZtLl92KCJ1cGRhdGluZyBhbmQgcnVubmluZyB0aGUgdW5pdCB0ZXN0cyIpXSksX3ZtLl92KCIuXG57JSBlbmRoaW50ICV9IildLDEpLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJUaGUgdGVzdCBmb3IgdGhpcyBydWxlIHdpbGwgbm93IGNvbnRhaW4gbXVsdGlwbGUgdGVzdCBjYXNlcywgdG8gc2hvdyB0aGF0IHRoZSBsb2dpY2FsIE9SIHdvcmtzIGFzIGV4cGVjdGVkOiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoInslIGNvZGUgdGl0bGU9XCJydWxlcy9DVVNUT00tUlVMRS0zL21haW5fdGVzdC5yZWdvXCIgJX0iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2UgcnVsZXNcblxuaW1wb3J0IGRhdGEubGliXG5pbXBvcnQgZGF0YS5saWIudGVzdGluZ1xuXG50ZXN0X0NVU1RPTV9SVUxFXzMge1xuXHQjIGFycmF5IGNvbnRhaW5pbmcgdGVzdCBjYXNlcyB3aGVyZSB0aGUgcnVsZSBpcyBhbGxvd2VkXG5cdGFsbG93ZWRfdGVzdF9jYXNlcyA6PSBbe1xuXHRcdFwid2FudF9tc2dzXCI6IFtdLFxuXHRcdFwiZml4dHVyZVwiOiBcImFsbG93ZWQudGZcIixcblx0fV1cblx0IyBhcnJheSBjb250YWluaW5nIGNhc2VzIHdoZXJlIHRoZSBydWxlIGlzIGRlbmllZFxuXHRkZW5pZWRfdGVzdF9jYXNlcyA6PSBbe1xuXHRcdFwid2FudF9tc2dzXCI6IFtcImlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyW2RlbmllZDFdLnRhZ3NcIl0sXG5cdFx0XCJmaXh0dXJlXCI6IFwiZGVuaWVkMS50ZlwiLFxuXHR9LHtcblx0XHRcIndhbnRfbXNnc1wiOiBbXCJpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3RlcltkZW5pZWQyXS50YWdzXCJdLFxuXHRcdFwiZml4dHVyZVwiOiBcImRlbmllZDIudGZcIixcblx0fV1cblx0dGVzdF9jYXNlcyA6PSBhcnJheS5jb25jYXQoYWxsb3dlZF90ZXN0X2Nhc2VzLCBkZW5pZWRfdGVzdF9jYXNlcylcblx0dGVzdGluZy5ldmFsdWF0ZV90ZXN0X2Nhc2VzKFwiQ1VTVE9NLVJVTEUtM1wiLCBcIi4vcnVsZXMvQ1VTVE9NLVJVTEUtMy9maXh0dXJlc1wiLCB0ZXN0X2Nhc2VzKVxufVxuIildKV0pXSksX2MoJ3AnLFtfdm0uX3YoInslIGVuZGNvZGUgJX0iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJleGFtcGxlLXdpdGgtc3RyaW5ncyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2V4YW1wbGUtd2l0aC1zdHJpbmdzIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEV4YW1wbGUgd2l0aCBzdHJpbmdzIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiTGV04oCZcyBleHRlbmQgdGhpcyBmdXJ0aGVyIGFuZCBhZGQgYSB0aGlyZCBjb25kaXRpb24uIERlbnkgYWxsIHJlc291cmNlcyB0aGF0IGFyZSBtaXNzaW5nIGVpdGhlcjoiKV0pLF92bS5fdigiICIpLF9jKCdvbCcsW19jKCdsaScsW192bS5fdigiQW4g4oCcb3duZXLigJ0gdGFnICwgT1IiKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiQSDigJxkZXNjcmlwdGlvbuKAnSB0YWcsIE9SIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlRoZSBlbWFpbCBvZiB0aGUgb3duZXIgZG9lcyBub3QgYmVsb25nIHRvIHRoZSDigJxAY29ycC1kb21haW4uY29t4oCdIGRvbWFpbiIpXSldKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgY29kZSB0aXRsZT1cInJ1bGVzL0NVU1RPTS1SVUxFLTQvbWFpbi5yZWdvXCIgJX0iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2UgcnVsZXNcblxuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKSB7XG4gICAgbm90IHJlc291cmNlLnRhZ3Mub3duZXJcbn1cblxuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKSB7XG4gICAgbm90IHJlc291cmNlLnRhZ3MuZGVzY3JpcHRpb25cbn1cblxuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKSB7XG4gICAgbm90IGVuZHN3aXRoKHJlc291cmNlLnRhZ3Mub3duZXIsIFwiQGNvcnAtZG9tYWluLmNvbVwiKVxufVxuXG5kZW55W21zZ10ge1xuICAgIHJlc291cmNlIDo9IGlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyW25hbWVdXG4gICAgYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKVxuICAgIG1zZyA6PSB7XG4gICAgICAgIFwicHVibGljSWRcIjogXCJDVVNUT00tUlVMRS00XCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJNaXNzaW5nIGEgZGVzY3JpcHRpb24gYW5kIGFuIG93bmVyIGZyb20gdGFnLCBvciBvd25lciB0YWcgZG9lcyBub3QgY29tcGx5IHdpdGggZW1haWwgcmVxdWlyZW1lbnRzXCIsXG4gICAgICAgIFwic2V2ZXJpdHlcIjogXCJtZWRpdW1cIixcbiAgICAgICAgXCJtc2dcIjogc3ByaW50ZihcImlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyWyVzXS50YWdzXCIsIFtuYW1lXSksXG4gICAgICAgIFwiaXNzdWVcIjogXCJcIixcbiAgICAgICAgXCJpbXBhY3RcIjogXCJcIixcbiAgICAgICAgXCJyZW1lZGlhdGlvblwiOiBcIlwiLFxuICAgICAgICBcInJlZmVyZW5jZXNcIjogW10sXG4gICAgfVxufVxuIildKV0pXSksX2MoJ3AnLFtfdm0uX3YoInslIGVuZGNvZGUgJX0iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJ7JSBoaW50IHN0eWxlPVwid2FybmluZ1wiICV9XG5XZSByZWNvbW1lbmQgYWx3YXlzIHZhbGlkYXRpbmcgdGhhdCB5b3VyIHJ1bGUgaXMgY29ycmVjdCBieSAiKSxfYygnUm91dGVyTGluaycse2F0dHJzOnsidG8iOiIvc255ay9wcm9kdWN0cy9zbnlrLWluZnJhc3RydWN0dXJlLWFzLWNvZGUvY3VzdG9tLXJ1bGVzL2dldHRpbmctc3RhcnRlZC13aXRoLXRoZS1zZGsvdGVzdGluZy1hLXJ1bGUuaHRtbCJ9fSxbX3ZtLl92KCJ1cGRhdGluZyBhbmQgcnVubmluZyB0aGUgdW5pdCB0ZXN0cyIpXSksX3ZtLl92KCIuXG57JSBlbmRoaW50ICV9IildLDEpLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJUaGUgdGVzdCBmb3IgdGhpcyBydWxlIHdpbGwgbG9vayB2ZXJ5IHNpbWlsYXIgdG8gdGhlIG9uZXMgZnJvbSBwcmV2aW91cyBleGFtcGxlIGFuZCB3aWxsIGFsc28gcmVxdWlyZSBpdHMgb3duIGZpeHR1cmUgZmlsZS4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJleGFtcGxlLXdpdGgteG9yIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZXhhbXBsZS13aXRoLXhvciJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBFeGFtcGxlIHdpdGggWE9SIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiTm93IGxldOKAmXMgc2F5IHRoYXQgd2Ugd2FudCB0byBhZGQgbW9yZSBjb21wbGV4aXR5IGFuZCBjaGVjayB0aGUgZm9sbG93aW5nOiIpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJJZiB0aGUgdGFnIHR5cGUgaXMgYSDigJx1c2Vy4oCdLCB0aGVuIHdlIHdhbnQgdGhlIHRhZyDigJxlbWFpbOKAnSB0byBleGlzdCBhcyB3ZWxsLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJJZiBub3QgKGFzc3VtZSB0aGUgb3RoZXIgdHlwZSBpcyBhIOKAnHNlcnZpY2XigJ0pLCB3ZSB3YW50IGl0IHRvIGhhdmUgYSBzZXJ2aWNlRGVzY3JpcHRpb24uIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlRoZXNlIHR3byB3aWxsIGJlIG11dHVhbGx5IGV4Y2x1c2l2ZTsgaWYgdGhlIGZpcnN0IGNvbmRpdGlvbiBhcHBsaWVzLCB0aGUgc2Vjb25kIG9uZSBzaG91bGRu4oCZdCwgYW5kIHZpY2UgdmVyc2EuIildKV0pLF92bS5fdigiICIpLF9jKCd0YWJsZScsW19jKCd0aGVhZCcsW19jKCd0cicsW19jKCd0aCcsW192bS5fdigiVHlwZSIpXSksX3ZtLl92KCIgIiksX2MoJ3RoJyxbX3ZtLl92KCJFbWFpbCIpXSksX3ZtLl92KCIgIiksX2MoJ3RoJyxbX3ZtLl92KCJTZXJ2aWNlRGVzY3JpcHRpb24iKV0pXSldKSxfdm0uX3YoIiAiKSxfYygndGJvZHknLFtfYygndHInLFtfYygndGQnLFtfdm0uX3YoIlVzZXIiKV0pLF92bS5fdigiICIpLF9jKCd0ZCcsW192bS5fdigiWUVTIildKSxfdm0uX3YoIiAiKSxfYygndGQnLFtfdm0uX3YoIk5PIildKV0pLF92bS5fdigiICIpLF9jKCd0cicsW19jKCd0ZCcsW192bS5fdigiU2VydmljZSIpXSksX3ZtLl92KCIgIiksX2MoJ3RkJyxbX3ZtLl92KCJOTyIpXSksX3ZtLl92KCIgIiksX2MoJ3RkJyxbX3ZtLl92KCJZRVMiKV0pXSldKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJUbyBkbyB0aGlzLCB3ZSBhcmUgZ29pbmcgdG8gcmVmYWN0b3Igb3VyIGNvZGUgdG8gdXNlIGEgY2hlY2tUYWdzIGhlbHBlciBmdW5jdGlvbi4gVGhpcyBjYW4gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSB0YWdzLCBidXQgYWxzbyBjaGVjayBmb3IgdGhlIHR3byBjb25kaXRpb25zIGFib3ZlIHdpdGggYW4gT1IuIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgY29kZSB0aXRsZT1cInJ1bGVzL0NVU1RPTS1SVUxFLTUvbWFpbi5yZWdvXCIgJX0iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2UgcnVsZXNcblxuY2hlY2tUYWdzKHJlc291cmNlKXtcbiAgICByZXNvdXJjZS50YWdzLnR5cGUgPT0gXCJ1c2VyXCJcbiAgICBub3QgcmVzb3VyY2UudGFncy5lbWFpbFxufVxuXG5jaGVja1RhZ3MocmVzb3VyY2Upe1xuICAgIHJlc291cmNlLnRhZ3MudHlwZSA9PSBcInNlcnZpY2VcIlxuICAgIG5vdCByZXNvdXJjZS50YWdzLnNlcnZpY2VEZXNjcmlwdGlvblxufVxuXG5jaGVja1RhZ3MocmVzb3VyY2Upe1xuICAgIGNvdW50KHJlc291cmNlLnRhZ3MpID09IDBcbn1cblxuZGVueVttc2ddIHtcbiAgICByZXNvdXJjZSA6PSBpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3RlcltuYW1lXVxuICAgIGNoZWNrVGFncyhyZXNvdXJjZSkgICBcblxuICAgIG1zZyA6PSB7XG4gICAgICAgIFwicHVibGljSWRcIjogXCJDVVNUT00tUlVMRS01XCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJDb21wbGV4IHJ1bGVcIixcbiAgICAgICAgXCJzZXZlcml0eVwiOiBcIm1lZGl1bVwiLFxuICAgICAgICBcIm1zZ1wiOiBzcHJpbnRmKFwiaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbJXZdLnRhZ3NcIiwgW25hbWVdKSxcbiAgICAgICAgXCJpc3N1ZVwiOiBcIlwiLFxuICAgICAgICBcImltcGFjdFwiOiBcIlwiLFxuICAgICAgICBcInJlbWVkaWF0aW9uXCI6IFwiXCIsXG4gICAgICAgIFwicmVmZXJlbmNlc1wiOiBbXSxcbiAgICB9XG59XG4iKV0pXSldKSxfYygncCcsW192bS5fdigieyUgZW5kY29kZSAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRvIGNvbnZlcnQgdGhpcyB0byBhbiBYT1Igd2UgY2FuIHVzZSBhbiAiKSxfYygnY29kZScsW192bS5fdigiZWxzZSIpXSksX3ZtLl92KCIgcnVsZToiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJ7JSBjb2RlIHRpdGxlPVwicnVsZXMvQ1VTVE9NLVJVTEUtNS9tYWluLnJlZ29cIiAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigicGFja2FnZSBydWxlc1xuXG5jaGVja1VzZXJUYWcocmVzb3VyY2Upe1xuICAgIG5vdCByZXNvdXJjZS50YWdzLmVtYWlsXG59XG5cbmNoZWNrVXNlclRhZyhyZXNvdXJjZSl7XG4gICAgcmVzb3VyY2UudGFncy5zZXJ2aWNlRGVzY3JpcHRpb25cbn1cblxuY2hlY2tTZXJ2aWNlVGFnKHJlc291cmNlKXtcbiAgICBub3QgcmVzb3VyY2UudGFncy5zZXJ2aWNlRGVzY3JpcHRpb25cbn1cblxuY2hlY2tTZXJ2aWNlVGFnKHJlc291cmNlKXtcbiAgICByZXNvdXJjZS50YWdzLmVtYWlsXG59XG5cbmNoZWNrVGFncyhyZXNvdXJjZSl7XG5cdGNvdW50KHJlc291cmNlLnRhZ3MpID09IDBcbn1cblxuY2hlY2tUYWdzKHJlc291cmNlKSB7XG4gICAgcmVzb3VyY2UudGFncy50eXBlID09IFwidXNlclwiXG4gICAgY2hlY2tVc2VyVGFnKHJlc291cmNlKVxufSBlbHNlIHtcbiAgICByZXNvdXJjZS50YWdzLnR5cGUgPT0gXCJzZXJ2aWNlXCJcbiAgICBjaGVja1NlcnZpY2VUYWcocmVzb3VyY2UpXG59XG5cbmRlbnlbbXNnXSB7XG4gICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV1cblx0Y2hlY2tUYWdzKHJlc291cmNlKVxuICAgIG1zZyA6PSB7XG4gICAgICAgIFwicHVibGljSWRcIjogXCJDVVNUT00tUlVMRS01XCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJNaXNzaW5nIHRoZSByaWdodCB0YWdzIGZyb20gZm9yIGEgcmVzb3VyY2Ugb2YgdHlwZSB1c2VyIG9yIHNlcnZpY2VcIixcbiAgICAgICAgXCJzZXZlcml0eVwiOiBcIm1lZGl1bVwiLFxuICAgICAgICBcIm1zZ1wiOiBzcHJpbnRmKFwiaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbJXZdLnRhZ3NcIiwgW25hbWVdKSxcbiAgICAgICAgXCJpc3N1ZVwiOiBcIlwiLFxuICAgICAgICBcImltcGFjdFwiOiBcIlwiLFxuICAgICAgICBcInJlbWVkaWF0aW9uXCI6IFwiXCIsXG4gICAgICAgIFwicmVmZXJlbmNlc1wiOiBbXSxcbiAgICB9XG59XG4iKV0pXSldKSxfYygncCcsW192bS5fdigieyUgZW5kY29kZSAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIklmIHlvdSB3YW50IHRvIHRyeSBpdCBvdXQgeW91cnNlbHZlcywgd2UgaGF2ZSBwcm92aWRlZCB0aGUgc2FtZSBleGFtcGxlIGluIGFuICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9wbGF5Lm9wZW5wb2xpY3lhZ2VudC5vcmcvcC8xeGNkajlrSlJ3IiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJPUEEgUGxheWdyb3VuZCIpLF9jKCdPdXRib3VuZExpbmsnKV0sMSksX3ZtLl92KCIuIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgaGludCBzdHlsZT1cIndhcm5pbmdcIiAlfVxuV2UgcmVjb21tZW5kIGFsd2F5cyB2YWxpZGF0aW5nIHRoYXQgeW91ciBydWxlIGlzIGNvcnJlY3QgYnkiKSxfYygnUm91dGVyTGluaycse2F0dHJzOnsidG8iOiIvc255ay9wcm9kdWN0cy9zbnlrLWluZnJhc3RydWN0dXJlLWFzLWNvZGUvY3VzdG9tLXJ1bGVzL2dldHRpbmctc3RhcnRlZC13aXRoLXRoZS1zZGsvdGVzdGluZy1hLXJ1bGUuaHRtbCJ9fSxbX3ZtLl92KCIgdXBkYXRpbmcgYW5kIHJ1bm5pbmcgdGhlIHVuaXQgdGVzdHMiKV0pLF92bS5fdigiLlxueyUgZW5kaGludCAlfSIpXSwxKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiVGhlIHRlc3QgZm9yIHRoaXMgcnVsZSB3aWxsIGxvb2sgdmVyeSBzaW1pbGFyIHRvIHRoZSBvbmVzIGZyb20gcHJldmlvdXMgZXhhbXBsZSBhbmQgd2lsbCBhbHNvIHJlcXVpcmUgaXRzIG93biBmaXh0dXJlIGZpbGUuIildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZXhhbXBsZXMtd2l0aC1ncm91cGVkLXJlc291cmNlcyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2V4YW1wbGVzLXdpdGgtZ3JvdXBlZC1yZXNvdXJjZXMifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgRXhhbXBsZXMgd2l0aCBncm91cGVkIHJlc291cmNlcyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIldlIGNhbiBhbHNvIGl0ZXJhdGUgb3ZlciBtYW55IHJlc291cmNlcyBieSBhZGRpbmcgdGhlbSB0byBhbiBhcnJheSBvZiByZXNvdXJjZXMuIildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJcInJlc291cmNlc1wiOiBbXG4gICAgICAgICAgICBcImF3c19pYW1fcG9saWN5XCIsXG4gICAgICAgICAgICBcImF3c19pYW1fZ3JvdXBfcG9saWN5XCIsXG4gICAgICAgICAgICBcImF3c19pYW1fdXNlcl9wb2xpY3lcIixcbiAgICAgICAgICAgIFwiYXdzX2lhbV9yb2xlX3BvbGljeVwiLFxuICAgICAgICAgICAgXCJkYXRhLmF3c19pYW1fcG9saWN5X2RvY3VtZW50XCIsXG5dXG4iKV0pXSldKSxfYygncCcsW192bS5fdigiT25lIHdheSB0byBsZXZlcmFnZSB0aGlzIGlzIHRvIGltcGxlbWVudCBkZW55bGlzdCBydWxlcy4gIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiRm9yIGV4YW1wbGUsIHdlIG1heSB3YW50IHRvIGVuc3VyZSB0aGF0IGlmIHNvbWVvbmUgZGVmaW5lcyBhIEt1YmVybmV0ZXMgQ29uZmlnTWFwLCB0aGVuIHRoZXkgY2Fubm90IHVzZSBpdCB0byBzdG9yZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gc3VjaCBhcyBwYXNzd29yZHMsIHNlY3JldCBrZXlzLCBhbmQgYWNjZXNzIHRva2Vucy4iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJXZSBjYW4gZG8gdGhhdCBhbmQgZXhwYW5kIHdoYXQgd2UgZGVmaW5lIGFzIFwic2Vuc2l0aXZlIGluZm9ybWF0aW9uXCIgb3ZlciB0aW1lIGJ5IGRlZmluaW5nIGEgZ3JvdXAgb2Ygc2Vuc2l0aXZlIHRva2VucyBpbnNpZGUgYSBkZW55bGlzdDoiKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2UgcnVsZXNcblxuc2Vuc2l0aXZlX2RlbnlsaXN0IDo9IFtcblx0XCJwYXNzXCIsXG5cdFwic2VjcmV0XCIsXG5cdFwia2V5XCIsXG5cdFwidG9rZW5cIixcbl1cblxuY2hlY2tfc2Vuc2l0aXZlKGtleXMsIGRlbnlsaXN0KSB7XG5cdF8gPSBrZXlzW2tleV1cblx0Y29udGFpbnMoa2V5LCBkZW55bGlzdFtfXSlcbn1cblxuZGVueVttc2ddIHtcblx0aW5wdXQua2luZCA9PSBcIkNvbmZpZ01hcFwiXG5cdGlucHV0LmRhdGEgPSBrZXlzXG5cdGNoZWNrX3NlbnNpdGl2ZShrZXlzLCBzZW5zaXRpdmVfZGVueWxpc3QpXG5cdG1zZyA6PSB7XG5cdFx0XCJwdWJsaWNJZFwiOiBcIkNVU1RPTS1SVUxFLTdcIixcblx0XHRcInRpdGxlXCI6IFwiQ29uZmlnTWFwIGV4cG9zZXMgc2Vuc2l0aXZlIGRhdGFcIixcblx0XHRcInNldmVyaXR5XCI6IFwiaGlnaFwiLFxuXHRcdFwibXNnXCI6IFwiaW5wdXQuZGF0YVwiLFxuXHRcdFwiaXNzdWVcIjogXCJcIixcblx0XHRcImltcGFjdFwiOiBcIlwiLFxuXHRcdFwicmVtZWRpYXRpb25cIjogXCJcIixcblx0XHRcInJlZmVyZW5jZXNcIjogW10sXG5cdH1cbn1cblxuIildKV0pXSksX2MoJ3AnLFtfdm0uX3YoIkFueSBrZXkgY29udGFpbmluZyB0aGUgc3Vic3RyaW5ncyBcInBhc3NcIiwgXCJzZWNyZXRcIiwgXCJrZXlcIiwgYW5kIFwidG9rZW5cIiBjYW4gYmUgY29uc2lkZXJlZCBzZW5zaXRpdmUgYW5kIHNvIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIENvbmZpZ01hcC4iKV0pLF92bS5fdigiICIpLF9jKCdoMicse2F0dHJzOnsiaWQiOiIifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiMifX0sW192bS5fdigiIyIpXSldKV0pfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}