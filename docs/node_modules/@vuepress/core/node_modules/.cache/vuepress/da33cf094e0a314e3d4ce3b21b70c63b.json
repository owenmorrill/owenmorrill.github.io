{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/products/snyk-infrastructure-as-code/README.md?vue&type=template&id=41d96cef&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/products/snyk-infrastructure-as-code/README.md","mtime":1646940843131},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAic255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzbnlrLWluZnJhc3RydWN0dXJlLWFzLWNvZGUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU255ayBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSAoSWFDKSBoZWxwcyBkZXZlbG9wZXJzIHRvIHdyaXRlIHNlY3VyZSBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9ucy4gIFNueWsgSWFDIHByb3ZpZGVzIGZpeCBhZHZpY2Ugc28geW91IGNhbiBtYWtlIGNoYW5nZXMgZGlyZWN0bHkgdG8gY29kZSwgYmVmb3JlIGFwcGxpY2F0aW9ucyByZWFjaCBwcm9kdWN0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlNueWsgSWFDIGhlbHBzIGRldmVsb3BlcnMgd3JpdGUgc2VjdXJlIGNvbmZpZ3VyYXRpb25zIGZvciAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvZ3VpZGUvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL3NjYW4tdGVycmFmb3JtLWZpbGVzLyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiSGFzaGlDb3JwIFRlcnJhZm9ybSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvZ3VpZGUvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL3NjYW4tY2xvdWRmb3JtYXRpb24tZmlsZXMvIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJBV1MgQ2xvdWRGb3JtYXRpb24iKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL3Byb2R1Y3RzL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS9zY2FuLWt1YmVybmV0ZXMtY29uZmlndXJhdGlvbi1maWxlcy8iLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkt1YmVybmV0ZXMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgYW5kICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi9ndWlkZS9wcm9kdWN0cy9zbnlrLWluZnJhc3RydWN0dXJlLWFzLWNvZGUvc2Nhbi1hcm0tY29uZmlndXJhdGlvbi1maWxlcy5odG1sIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJBenVyZSBSZXNvdXJjZSBNYW5hZ2VyIChBUk0pIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuICIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZpbmQtYW5kLWZpeC1taXNjb25maWd1cmF0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZmluZC1hbmQtZml4LW1pc2NvbmZpZ3VyYXRpb25zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZpbmQgYW5kIGZpeCBtaXNjb25maWd1cmF0aW9ucyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJLbm93aW5nIGhvdyB0byBzZWN1cmVseSBkZXBsb3kgdG8gS3ViZXJuZXRlcywgb3IgaG93IHRvIHNlY3VyZWx5IHByb3Zpc2lvbiBpbmZyYXN0cnVjdHVyZSB3aXRoIFRlcnJhZm9ybSwgY2FuIGJlIGVhc3kgdG8gZ2V0IHdyb25nLCBjYXVzaW5nIGNvbmZpZ3VyYXRpb24gZXJyb3JzICgiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigibWlzY29uZmlndXJhdGlvbnMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIpLiBUaGVzZSBtaXNjb25maWd1cmF0aW9ucyBjYW4gY2F1c2Ugc2VjdXJpdHkgcHJvYmxlbXM7IGZvciBleGFtcGxlLCBzdHVkaWVzIHNob3cgdGhhdCBtaXNjb25maWd1cmF0aW9ucyBzdWNoIGFzIGluc2VjdXJlIGNsb3VkIHN0b3JhZ2UgYXJlIHRoZSBzZWNvbmQgbW9zdCBjb21tb24gZXJyb3IgbGVhZGluZyB0byBicmVhY2hlcyBpbiB0aGUgZmluYW5jZSBhbmQgaW5zdXJhbmNlIHNlY3Rvci4gIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInNueWstaWFjLWFuZC1taXNjb25maWd1cmF0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1pYWMtYW5kLW1pc2NvbmZpZ3VyYXRpb25zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgSWFDIGFuZCBtaXNjb25maWd1cmF0aW9ucyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbnlrIElhQyBpbnRlZ3JhdGVzIHNlY3VyaXR5IGNoZWNrcyBmb3IgbWlzY29uZmlndXJhdGlvbnMgaW50byB5b3VyIGRldmVsb3BtZW50IGxpZmVjeWNsZToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL3Byb2R1Y3RzL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS9zbnlrLWNsaS1mb3ItaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS8iLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlNueWsgQ0xJIGZvciBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIHByb3ZpZGVzIGltbWVkaWF0ZSBsb2NhbCBmZWVkYmFjayBhcyB5b3Ugd3JpdGUgY29uZmlndXJhdGlvbnMsIHNvIHlvdSBjYW4gZml4IGlzc3VlcyBiZWZvcmUgeW91IGNvbW1pdC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW50ZWdyYXRlIFNueWsgaW50byB5b3VyIENJL0NEIHByb2Nlc3NlcyB0byBhdXRvbWF0ZSBzZWN1cml0eSBjaGVja3MuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbXBvcnQgeW91ciBzb3VyY2UgcmVwb3NpdG9yaWVzIGludG8gU255ayBmb3Igb25nb2luZyBtb25pdG9yaW5nIGFuZCBhbmFseXNpcy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkludGVncmF0ZSB3aXRoIEhhc2hpY29ycCBUZXJyYWZvcm0gQ2xvdWQgdG8gc2NhbiBhcyBwYXJ0IG9mIHlvdXIgZGVwbG95bWVudCBwaXBlbGluZSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNueWstaWFjLXNlY3VyaXR5LXJ1bGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzbnlrLWlhYy1zZWN1cml0eS1ydWxlcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTbnlrIElhQyBzZWN1cml0eSBydWxlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiU255ayBJYUMgaGFzIGEgY29tcHJlaGVuc2l2ZSBzZXQgb2YgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc255ay5pby9zZWN1cml0eS1ydWxlcyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJwcmVkZWZpbmVkIHNlY3VyaXR5IHJ1bGVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBiYXNlZCBvbiBpbmR1c3RyeSBiZW5jaG1hcmtzLCBjbG91ZC1wcm92aWRlciBiZXN0IHByYWN0aWNlcywgYW5kIHRocmVhdCBtb2RlbCByZXNlYXJjaCBmcm9tIFNueWvigJlzIHNlY3VyaXR5IGludGVsbGlnZW5jZSB0ZWFtLiAiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJZb3UgY2FuIGFsc28gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL3Byb2R1Y3RzL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS9jdXN0b20tcnVsZXMvIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJidWlsZCB5b3VyIG93biBjdXN0b20gcnVsZXMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgbGV2ZXJhZ2luZyBPcGVuIFBvbGljeSBBZ2VudCAoT1BBKS4iKSwKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}