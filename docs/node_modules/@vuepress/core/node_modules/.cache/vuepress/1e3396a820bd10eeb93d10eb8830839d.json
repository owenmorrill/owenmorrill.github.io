{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/products/snyk-open-source/language-and-package-manager-support/snyk-for-php.md?vue&type=template&id=6b4fcdf4&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/products/snyk-open-source/language-and-package-manager-support/snyk-for-php.md","mtime":1646940843164},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAic255ay1mb3ItcGhwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzbnlrLWZvci1waHAiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgZm9yIFBIUCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbnlrIG9mZmVycyBzZWN1cml0eSBzY2FubmluZyB0byB0ZXN0IHlvdXIgcHJvamVjdHMgZm9yIHZ1bG5lcmFiaWxpdGllcywgYm90aCB0aHJvdWdoIHlvdXIgQ0xJIGFuZCB0aHJvdWdoIGRpZmZlcmVudCBpbnRlZ3JhdGlvbnMgZnJvbSBvdXIgVUkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmb2xsb3dpbmcgZGVzY3JpYmVzIGhvdyB0byB1c2UgU255ayB0byBzY2FuIHlvdXIgUEhQIHByb2plY3RzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJmZWF0dXJlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZmVhdHVyZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZlYXR1cmVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCd7JSBoaW50IHN0eWxlPSJpbmZvIiAlfVxuJyksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGUiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkZlYXR1cmVzIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUsIGRlcGVuZGluZyBvbiB5b3VyIHN1YnNjcmlwdGlvbiBwbGFuLlxueyUgZW5kaGludCAlfSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlBhY2thZ2UgbWFuYWdlcnMgLyBGZWF0dXJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX2MoInAiLCBbX3ZtLl92KCJDTEkiKV0pLCBfYygicCIsIFtfdm0uX3YoInN1cHBvcnQiKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX2MoInAiLCBbX3ZtLl92KCJHaXQiKV0pLCBfYygicCIsIFtfdm0uX3YoInN1cHBvcnQiKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJMaWNlbnNlIHNjYW5uaW5nIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkZpeCBQUnMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiUnVudGltZSBtb25pdG9yaW5nIildKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dldGNvbXBvc2VyLm9yZyIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJDb21wb3NlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigi4pyU77iOIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIuKclO+4jiIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCLinJTvuI4iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctaXQtd29ya3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2hvdy1pdC13b3JrcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkhvdyBpdCB3b3JrcyIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJPbmNlIHdl4oCZdmUgYnVpbHQgdGhlIHRyZWUsIHdlIGNhbiB1c2Ugb3VyICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3NueWsuaW8vdnVsbiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJ2dWxuZXJhYmlsaXR5IGRhdGFiYXNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRvIGZpbmQgdnVsbmVyYWJpbGl0aWVzIGluIGFueSBvZiB0aGUgcGFja2FnZXMgYW55d2hlcmUgaW4gdGhlIGRlcGVuZGVuY3kgdHJlZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG4nKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZSIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuSW4gb3JkZXIgdG8gc2NhbiB5b3VyIGRlcGVuZGVuY2llcywgeW91IG11c3QgZW5zdXJlIHlvdSBoYXZlIGZpcnN0IGluc3RhbGxlZCB0aGUgcmVsZXZhbnQgcGFja2FnZSBtYW5hZ2VyLCBhbmQgdGhhdCB5b3VyIHByb2plY3QgY29udGFpbnMgdGhlIHN1cHBvcnRlZCBtYW5pZmVzdCBmaWxlcy5cbnslIGVuZGhpbnQgJX0iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHdheSBieSB3aGljaCBTbnlrIGFuYWx5emVzIGFuZCBidWlsZHMgdGhlIHRyZWUgdmFyaWVzIGRlcGVuZGluZyBvbiB0aGUgbGFuZ3VhZ2UgYW5kIHBhY2thZ2UgbWFuYWdlciBvZiB0aGUgcHJvamVjdCwgYXMgd2VsbCBhcyB0aGUgbG9jYXRpb24gb2YgeW91ciBwcm9qZWN0OiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9zbnlrLW9wZW4tc291cmNlL2xhbmd1YWdlLWFuZC1wYWNrYWdlLW1hbmFnZXItc3VwcG9ydC9zbnlrLWZvci1waHAiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlNueWsgQ0xJIHRvb2wgZm9yIFBIUCBwcm9qZWN0cyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL3NueWsvcHJvZHVjdHMvc255ay1vcGVuLXNvdXJjZS9sYW5ndWFnZS1hbmQtcGFja2FnZS1tYW5hZ2VyLXN1cHBvcnQvc255ay1mb3ItcGhwLmh0bWwjZ2l0LXNlcnZpY2VzLWZvci1waHAtcHJvamVjdHMiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkdpdCBzZXJ2aWNlcyBmb3IgUEhQIHByb2plY3RzIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInNueWstY2xpLXRvb2wtZm9yLXBocC1wcm9qZWN0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1jbGktdG9vbC1mb3ItcGhwLXByb2plY3RzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgQ0xJIHRvb2wgZm9yIFBIUCBwcm9qZWN0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgd2F5IGJ5IHdoaWNoIFNueWsgYW5hbHl6ZXMgYW5kIGJ1aWxkcyB0aGUgdHJlZSB2YXJpZXMgZGVwZW5kaW5nIG9uIHRoZSBsYW5ndWFnZSBhbmQgcGFja2FnZSBtYW5hZ2VyIG9mIHRoZSBwcm9qZWN0LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSW4gb3JkZXIgdG8gYnVpbGQgdGhlIGRlcGVuZGVuY3kgdHJlZSBTbnlrIGFuYWx5emVzIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbXBvc2VyLmpzb24iKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbXBvc2VyLmxvY2siKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZmlsZXMgdGhhdCBpdCBmaW5kcyB0byBhbmFseXplIHRoZSBkZXBlbmRlbmNpZXMgYW5kIHRoZWlyIHZlcnNpb25zLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjbGktcGFyYW1ldGVycy1mb3ItcGhwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjbGktcGFyYW1ldGVycy1mb3ItcGhwIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDTEkgcGFyYW1ldGVycyBmb3IgUEhQIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJlcmVxdWlzaXRlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJlcmVxdWlzaXRlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlByZXJlcXVpc2l0ZXMiKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFbnN1cmUgeW91J3ZlIGluc3RhbGxlZCB0aGUgcmVsZXZhbnQgcGFja2FnZSBtYW5hZ2VyIGJlZm9yZSB5b3UgYmVnaW4gdXNpbmcgdGhlIFNueWsgQ0xJIHRvb2wuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFbnN1cmUgeW91J3ZlIGluY2x1ZGVkIHRoZSByZWxldmFudCBtYW5pZmVzdCBmaWxlcyBzdXBwb3J0ZWQgYnkgU255ayBiZWZvcmUgdGVzdGluZy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkluc3RhbGwgYW5kIGF1dGhlbnRpY2F0ZSB0aGUgU255ayBDTEkgdG8gc3RhcnQgYW5hbHl6aW5nIHByb2plY3RzIGZyb20geW91ciBsb2NhbCBlbnZpcm9ubWVudC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwYXJhbWV0ZXJzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwYXJhbWV0ZXJzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUGFyYW1ldGVycyIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGVyZSBhcmUgbm8gdW5pcXVlIHBhcmFtZXRlcnMgd2hlbiBydW5uaW5nIFNueWsgZm9yIFBIUC4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJSZWFkIG1vcmUgYWJvdXQgb3VyIENMSSBpbiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvc255ay9mZWF0dXJlcy9zbnlrLWNsaS9ndWlkZXMtZm9yLW91ci1jbGkvZ2V0dGluZy1zdGFydGVkLXdpdGgtdGhlLWNsaS5odG1sIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJHZXR0aW5nIHN0YXJ0ZWQgd2l0aCB0aGUgQ0xJIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZ2l0LXNlcnZpY2VzLWZvci1waHAtcHJvamVjdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2dpdC1zZXJ2aWNlcy1mb3ItcGhwLXByb2plY3RzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEdpdCBzZXJ2aWNlcyBmb3IgUEhQIHByb2plY3RzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlBIUCBwcm9qZWN0cyBjYW4gYmUgaW1wb3J0ZWQgZnJvbSBhbnkgb2YgdGhlIEdpdCBzZXJ2aWNlcyB3ZSBzdXBwb3J0LiBPbmNlIGltcG9ydGVkLCBTbnlrIGFuYWx5emVzIHlvdXIgcHJvamVjdHMgYmFzZWQgb24gdGhlaXIgc3VwcG9ydGVkIG1hbmlmZXN0IGZpbGVzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmNlIHlvdSBzZWxlY3QgYSBwcm9qZWN0IGZvciBpbXBvcnQsIHdlIGJ1aWxkIHRoZSBkZXBlbmRlbmN5IHRyZWUgYmFzZWQgb24gdGhlc2UgbWFuaWZlc3QgZmlsZXM6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNvbXBvc2VyLmpzb24iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImNvbXBvc2VyLmxvY2siKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJnaXQtc2V0dGluZ3MtZm9yLXBocCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZ2l0LXNldHRpbmdzLWZvci1waHAiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdpdCBzZXR0aW5ncyBmb3IgUEhQIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQnkgZGVmYXVsdCwgU255ayBzY2FucyB5b3VyIHByb2R1Y3Rpb24gZGVwZW5kZW5jaWVzLiBGcm9tIHRoZSBTbnlrIFVJIHlvdSBjYW4gY29uZmlndXJlIHdoZXRoZXIgdG8gaW5jbHVkZSB5b3VyIGRldmVsb3BtZW50IGRlcGVuZGVuY2llcyAoIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXF1aXJlX2RldiIpXSksCiAgICAgICAgX3ZtLl92KCIpIGluIHRoZSBzY2FuIGZvciB2dWxuZXJhYmlsaXRpZXMuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInRvLXVwZGF0ZS1sYW5ndWFnZS1wcmVmZXJlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdG8tdXBkYXRlLWxhbmd1YWdlLXByZWZlcmVuY2VzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUbyB1cGRhdGUgbGFuZ3VhZ2UgcHJlZmVyZW5jZXM6IildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9nIGluIHRvIHlvdXIgYWNjb3VudCBhbmQgbmF2aWdhdGUgdG8gdGhlIHJlbGV2YW50IGdyb3VwIGFuZCBvcmdhbml6YXRpb24gdGhhdCB5b3Ugd2FudCB0byBtYW5hZ2UiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2xpY2sgb24gc2V0dGluZ3MgIiksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2NvZ19pY29uLnBuZyIpLAogICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiPiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMYW5ndWFnZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDbGljayAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFZGl0IHNldHRpbmdzIildKSwKICAgICAgICAgIF92bS5fdigiIGZvciBQSFAgYW5kIHNlbGVjdCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTY2FuIGRldiBkZXBlbmRlbmNpZXMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvIHNldCBmb3IgeW91ciBQSFAgcHJvamVjdHMgaW4gdGhlIHNwZWNpZmljIG9yZ2FuaXphdGlvbiB0byBpbmNsdWRlIGJvdGggZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb24gZGVwZW5kZW5jaWVzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDbGljayAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJVcGRhdGUgc2V0dGluZ3MiKV0pLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXNlIHNldHRpbmdzIHdpbGwgdGhlbiBiZSBhcHBsaWVkIHRvIGFsbCBuZXdseSBpbXBvcnRlZCBwcm9qZWN0cywgYW5kIG9uY2UgcmUtdGVzdGVkLCB0byBhbGwgZXhpc3RpbmcgcHJvamVjdHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRyb3VibGVzaG9vdGluZy1mb3IteW91ci1waHAtcHJvamVjdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Ryb3VibGVzaG9vdGluZy1mb3IteW91ci1waHAtcHJvamVjdHMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVHJvdWJsZXNob290aW5nIGZvciB5b3VyIFBIUCBwcm9qZWN0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJlcnJvci1tZXNzYWdlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZXJyb3ItbWVzc2FnZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEVycm9yIG1lc3NhZ2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmb2xsb3dpbmcgZXJyb3IgbWVzc2FnZXMgbWF5IGFwcGVhciBmb3IgeW91IHdoZW4gd29ya2luZyB3aXRoIHlvdXIgUEhQIHByb2plY3RzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJjb21wb3Nlci5qc29uIG9yIGNvbXBvc2VyLmxvY2sgbm90IGZvdW5kIGluIHBhdGgiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1hbmlmZXN0IGZpbGUgbm90IGZvdW5kIGluIHBhdGgiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkxvY2tmaWxlIG1pc3NpbmcgcGFja2FnZXMgcHJvcGVydHkiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkxvY2tmaWxlIG9yIG1hbmlmZXN0IGZpbGUgaXMgbm90IGEgdmFsaWQgSlNPTiIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN1cHBvcnQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3N1cHBvcnQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3VwcG9ydCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgcnVuIGFjcm9zcyBhbnkgb2YgdGhlc2UsIG9yIG90aGVyIGlzc3Vlcywgc2VuZCB0aGUgZm9sbG93aW5nIGZpbGVzIHRvIHVzIGF0ICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAibWFpbHRvOnN1cHBvcnRAc255ay5pbyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoInN1cHBvcnRAc255ay5pbyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIGFuZCB3ZSdsbCBoZWxwIHlvdSBvdXQ6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfYygiY29kZSIsIFtfdm0uX3YoImNvbXBvc2VyLmpzb24iKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigiY29tcG9zZXIubG9jayIpXSldKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}