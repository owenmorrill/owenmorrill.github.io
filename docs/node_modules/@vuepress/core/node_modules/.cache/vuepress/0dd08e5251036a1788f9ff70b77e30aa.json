{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/tutorials/amazon-web-services/aws-code-suite/snyk-security/exercise-fixing-the-vulnerability.md?vue&type=template&id=2fd87d5c&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/tutorials/amazon-web-services/aws-code-suite/snyk-security/exercise-fixing-the-vulnerability.md","mtime":1646940843175},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiZXhlcmNpc2UtZml4aW5nLXRoZS12dWxuZXJhYmlsaXR5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNleGVyY2lzZS1maXhpbmctdGhlLXZ1bG5lcmFiaWxpdHkiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRXhlcmNpc2UgLSBGaXhpbmcgdGhlIFZ1bG5lcmFiaWxpdHkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFjY29yZGluZyB0byB0aGUgZml4IGFkdmljZSwgd2UgbmVlZCB0byBmaXggdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHJpbWVGYWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgZGVwZW5kZW5jeSBhbmQgdXBkYXRlIGl0IGZyb20gdmVyc2lvbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjYuMSIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI2LjIiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZXQgdXMgcHJldGVuZCB0aGUgZGV2ZWxvcGVyIGZpeGVkIGl0IGFuZCBjaGVja2VkIGl0IGluLCBjb21pbmcgYmFjayBpbnRvIHRoZSBwaXBlbGluZS4gVGhpcyBpcyBkb25lIGJ5IGNoYW5naW5nLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAifi9lbnZpcm9ubWVudC9hd3MtbW9kZXJuaXphdGlvbi13b3Jrc2hvcC9tb2R1bGVzL2NvbnRhaW5lcml6ZS1hcHBsaWNhdGlvbi9hcHAvcG9tLnhtbCIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImVtIiwgW192bS5fdigiQ2hhbmdpbmc6IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCI8dmVyc2lvbi5wcmltZWZhY2VzPjYuMTwvdmVyc2lvbi5wcmltZWZhY2VzPlxuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlRvOiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigiPHZlcnNpb24ucHJpbWVmYWNlcz42LjI8L3ZlcnNpb24ucHJpbWVmYWNlcz5cbiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlJ1biB0aGlzIGNvbW1hbmQgdG8gY29weSBvdmVyIG91ciBmaXhlZCB2ZXJzaW9uIGluIHRoZSBsYWI6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJjcCBtb2R1bGVzL3NueWsvcG9tLnhtbCBtb2R1bGVzL2NvbnRhaW5lcml6ZS1hcHBsaWNhdGlvbi9hcHAvXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlNhdmUgY2hhbmdlczoiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoJ2dpdCBjb21taXQgLWFtICJGaXggdnVsbmVyYWJsZSBvcGVuIHNvdXJjZSBkZXAuIlxuJyksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlB1c2g6IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCBwdXNoIC1mIGNvZGVjb21taXQgbWFzdGVyXG4iKV0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIHRpbWUgY2hlY2sgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDb2RlIEJ1aWxkZXIiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCB3ZSBzZWUgaXQgc3VjY2VlZGVkLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL3BhcnRuZXItd29ya3Nob3AtYXNzZXRzLnMzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tL3NueWtfNGJfYnVpbGQucG5nIiwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUZXN0ZWQgMzcgZGVwZW5kZW5jaWVzIGZvciBrbm93biB2dWxuZXJhYmlsaXRpZXMsIG5vIHZ1bG5lcmFibGUgcGF0aHMgZm91bmQuXG5OZXh0IHN0ZXBzOlxuLSBSdW4gYHNueWsgbW9uaXRvcmAgdG8gYmUgbm90aWZpZWQgYWJvdXQgbmV3IHJlbGF0ZWQgdnVsbmVyYWJpbGl0aWVzLlxuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZSB2dWxuZXJhYmlsaXR5IGlzIGZpeGVkIGFuZCB0aGUgYnVpbGQgc3VjY2VlZGVkISIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5leHQsIHdlIGFsc28gc2VlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTbnlrIildKSwKICAgICAgICBfdm0uX3YoIiBzdWNjZXNzZnVsbHkgc2Nhbm5lZCB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEb2NrZXIgSW1hZ2UiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYW5kIHRoZXJlIHdlcmUgbm8gcGFja2FnZSBkZXBlbmRlbmN5IGlzc3VlcyB3aXRoIG91ciBEb2NrZXIgY29udGFpbmVyISIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQ29udGFpbmVyXSAyMDE4LzExLzA5IDAzOjU0OjE0IFJ1bm5pbmcgY29tbWFuZCAkUFdEVVRJTFMvc255ayB0ZXN0IC0tZG9ja2VyICRSRVBPU0lUT1JZX1VSSTpsYXRlc3RcblRlc3RpbmcgMzAwMzI2OTAyNjAwLmRrci5lY3IudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vcGV0c3RvcmVfZnJvbnRlbmQ6bGF0ZXN0Li4uXG5Pcmdhbml6YXRpb246IHNhbXBsZS1pbnRlZ3JhdGlvbnNcblBhY2thZ2UgbWFuYWdlcjogcnBtXG5Eb2NrZXIgaW1hZ2U6IDMwMDMyNjkwMjYwMC5ka3IuZWNyLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tL3BldHN0b3JlX2Zyb250ZW5kOmxhdGVzdFxu4pyTIFRlc3RlZCAxOTAgZGVwZW5kZW5jaWVzIGZvciBrbm93biB2dWxuZXJhYmlsaXRpZXMsIG5vIHZ1bG5lcmFibGUgcGF0aHMgZm91bmQuXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}