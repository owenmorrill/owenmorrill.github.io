{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/features/integrations/ci-cd-integrations/azure-pipelines-integration.md?vue&type=template&id=7d589d38&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/features/integrations/ci-cd-integrations/azure-pipelines-integration.md","mtime":1646940842959},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYXp1cmUtcGlwZWxpbmVzLWludGVncmF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhenVyZS1waXBlbGluZXMtaW50ZWdyYXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQXp1cmUgUGlwZWxpbmVzIGludGVncmF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm92ZXJ2aWV3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNvdmVydmlldyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3ZlcnZpZXciKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayBlbmFibGVzIHNlY3VyaXR5IGFjcm9zcyB0aGUgTWljcm9zb2Z0IEF6dXJlIGVjb3N5c3RlbSwgaW5jbHVkaW5nIGZvciBBenVyZSBQaXBlbGluZXMsIGF1dG9tYXRpY2FsbHkgZmluZGluZyBhbmQgZml4aW5nIGFwcGxpY2F0aW9uIGFuZCBjb250YWluZXIgdnVsbmVyYWJpbGl0aWVzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJSZWFkeS10by11c2UgdGFza3MgZm9yIEF6dXJlIFBpcGVsaW5lcyBjYW4gYmUgcXVpY2tseSBpbnNlcnRlZCBkaXJlY3RseSBmcm9tIHRoZSBBenVyZSBpbnRlcmZhY2UsIGVuYWJsaW5nIHlvdSB0byBjdXN0b21pemUgYW5kIGF1dG9tYXRlIHlvdXIgcGlwZWxpbmVzIHdpdGggbm8gZXh0cmEgY29kaW5nLiBBbW9uZyB0aGUgdGFza3MgaW5jbHVkZWQgaXMgdGhlIFNueWsgdGFzay4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiBpbmNsdWRlIHRoZSBTbnlrIHRhc2sgaW4geW91ciBwaXBlbGluZSB0byB0ZXN0IGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgYW5kIGxpY2Vuc2luZyBpc3N1ZXMgYXMgcGFydCBvZiB5b3VyIHJvdXRpbmUgd29yazsgaW4gdGhpcyB3YXksIHlvdSBjYW4gdGVzdCBhbmQgbW9uaXRvciB5b3VyIGFwcGxpY2F0aW9uIGRlcGVuZGVuY2llcyBhbmQgY29udGFpbmVyIGltYWdlcyBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiBPbmNlIHRlc3RlZCwgeW91IGNhbiByZXZpZXcgYW5kIHdvcmsgd2l0aCByZXN1bHRzIGRpcmVjdGx5IGZyb20gdGhlIEF6dXJlIFBpcGVsaW5lcyBvdXRwdXQsIGFzIHdlbGwgYXMgZnJvbSB0aGUgU255ayBpbnRlcmZhY2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgc3VwcG9ydCIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPdXIgU255ayBTZWN1cml0eSBTY2FuIHRhc2sgaXMgYXZhaWxhYmxlIGZvciBhbGwgbGFuZ3VhZ2VzIHN1cHBvcnRlZCBieSBTbnlrIGFuZCBBenVyZSBEZXZPcHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImhvdy1pdC13b3JrcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaG93LWl0LXdvcmtzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb3cgaXQgd29ya3MiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWZ0ZXIgdGhlIFNueWsgU2VjdXJpdHkgU2NhbiB0YXNrIGlzIGFkZGVkIHRvIGEgcGlwZWxpbmUsIHRoZW4gZWFjaCB0aW1lIHRoZSBwaXBlbGluZSBydW5zLCB0aGUgU255ayB0YXNrIHdpbGwgZG8gdGhlIGZvbGxvd2luZzoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidGVzdCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdGVzdCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVGVzdCIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRlc3RzIHRoZSBhcHBsaWNhdGlvbiBkZXBlbmRlbmNpZXMgb3IgY29udGFpbmVyIGltYWdlcyBmb3IgdnVsbmVyYWJpbGl0aWVzIGFuZCBsaWNlbnNpbmcgaXNzdWVzIGFuZCBsaXN0cyB0aGVtLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgU255ayBmaW5kcyB2dWxuZXJhYmlsaXRpZXMgb3IgbGljZW5zZSBpc3N1ZXMsIGl0IGRvZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgKGJhc2VkIG9uIHlvdXIgY29uZmlndXJhdGlvbik6XG4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJGYWlscyB0aGUgcGlwZWxpbmUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTGV0cyB0aGUgcGlwZWxpbmUgY29udGludWUiKV0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1vbml0b3IiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI21vbml0b3IiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1vbml0b3IiKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWZ0ZXIgdGhlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIHRlc3QiKV0pLAogICAgICAgIF92bS5fdigiIGlzIGNvbXBsZXRlLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIGRvaW5nICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIG1vbml0b3IiKV0pLAogICAgICAgIF92bS5fdigiLiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigic255ayBtb25pdG9yIildKSwKICAgICAgICBfdm0uX3YoIiB3aWxsIHNhdmUgYSBzbmFwc2hvdCBvZiB0aGUgcHJvamVjdCBkZXBlbmRlbmNpZXMgaW4geW91ciAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmlvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInNueWsuaW8iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYWNjb3VudCwgd2hlcmUgeW91IGNhbiBzZWUgdGhlIGRlcGVuZGVuY3kgdHJlZSB3aXRoIGFsbCBvZiB0aGUgaXNzdWVzIGFuZCBiZSBhbGVydGVkIGlmIGFuZCB3aGVuIG5ldyBpc3N1ZXMgYXJlIGZvdW5kIGluIHRoZSBkZXBlbmRlbmNpZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogImluc3RhbGwtdGhlLXNueWstZXh0ZW5zaW9uLWZvci15b3VyLWF6dXJlLXBpcGVsaW5lcyIgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2luc3RhbGwtdGhlLXNueWstZXh0ZW5zaW9uLWZvci15b3VyLWF6dXJlLXBpcGVsaW5lcyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEluc3RhbGwgdGhlIFNueWsgZXh0ZW5zaW9uIGZvciB5b3VyIEF6dXJlIHBpcGVsaW5lcyIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBzdGFydCB1c2luZyBvdXIgdGFzayBhcyBwYXJ0IG9mIHlvdXIgcGlwZWxpbmUgYnVpbGQsIGZpcnN0IGluc3RhbGwgdGhlIGV4dGVuc2lvbiBpbnRvIHlvdXIgQXp1cmUgRGV2T3BzIGluc3RhbmNlIHBlciBvcmdhbml6YXRpb24sIGZyb20gdGhlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXM/aXRlbU5hbWU9U255ay5zbnlrLXNlY3VyaXR5LXNjYW4iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiVmlzdWFsIFN0dWRpbyBNYXJrZXRwbGFjZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlByZXJlcXVpc2l0ZXM6IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ3JlYXRlIGEgU255ayBhY2NvdW50IGF0ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmlvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJodHRwczovL3NueWsuaW8vIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRW5zdXJlIHlvdSBhcmUgYW4gb3duZXIgb2Ygb3IgYW4gYWRtaW5pc3RyYXRvciBmb3IgdGhpcyBhY2NvdW50LiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0ZXBzOiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBY2Nlc3MgeW91ciBTbnlrIGFjY291bnQuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZvciBmcmVlIHBsYW5zLCBnbyB0byB5b3VyICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdlbmVyYWwgQWNjb3VudCBTZXR0aW5ncyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgYW5kIGZpbmQsIGNvcHkgYW5kIHNhdmUgeW91ciBwZXJzb25hbCBBUEkgYXV0aGVudGljYXRpb24gdG9rZW4gb24gdGhlIHNpZGUuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGb3IgcGFpZCBwbGFucywgbmF2aWdhdGUgdG8gdGhlIG9yZ2FuaXphdGlvbiB5b3XigJlkIGxpa2UgdG8gaW50ZWdyYXRlIHdpdGgsIHRoZW4gZ28gdG8gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTZXR0aW5ncyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gY3JlYXRlIGEgbmV3IHNlcnZpY2UgYWNjb3VudCB0b2tlbi4gQ29weSBhbmQgc2F2ZSBpdCBvbiB0aGUgc2lkZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQWNjZXNzIHlvdXIgQXp1cmUgRGV2T3BzIGFjY291bnQgYW5kIG5hdmlnYXRlIHRvICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkV4dGVuc2lvbnMgLT4gQnJvd3NlIG1hcmtldHBsYWNlLiIpXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJTZWFyY2ggZm9yIHRoZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTbnlrIFNlY3VyaXR5IFNjYW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZXh0ZW5zaW9uLCBjbGljayAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJHZXQgaXQgZnJlZSIpXSksCiAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNyZWF0ZSBhIG5ldyAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIlNlcnZpY2UgQ29ubmVjdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpbiB5b3VyIHByb2plY3QgdmlhICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlByb2plY3QgU2V0dGluZ3MiKV0pLAogICAgICAgICAgX3ZtLl92KCIg4oCUPiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQaXBlbGluZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIg4oCUPiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTZXJ2aWNlIENvbm5lY3Rpb25zIildKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoJ1NlbGVjdCAiJyksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBBdXRoZW50aWNhdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoJyIgc2VydmljZSBjb25uZWN0aW9uOicpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkluIHRoZSBTbnlrIEF1dGhlbnRpY2F0aW9uIHNlcnZpY2UgY29ubmVjdGlvbiBmb3JtLCBlbnRlciB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTZXJ2ZXIgVVJMIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCB0aGUgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBBUEkgVG9rZW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgYWxvbmcgd2l0aCBhICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNlcnZpY2UgY29ubmVjdGlvbiBuYW1lIildKSwKICAgICAgICAgIF92bS5fdigiOiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2xpY2sgb24gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU2F2ZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIGVuc3VyaW5nIHRoZSBuZXcgc2VydmljZSBjb25uZWN0aW9uIGFwcGVhcnMgaW4geW91ciBsaXN0IG9mIHNlcnZpY2UgY29ubmVjdGlvbnMuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvYXBfLV9zZWFyY2guanBnIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9hcF8tX2NvbmZpZy5qcGciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYWRkLXRoZS1zbnlrLXNlY3VyaXR5LXRhc2stdG8teW91ci1waXBlbGluZXMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FkZC10aGUtc255ay1zZWN1cml0eS10YXNrLXRvLXlvdXItcGlwZWxpbmVzIiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgQWRkIHRoZSBTbnlrIFNlY3VyaXR5IFRhc2sgdG8geW91ciBwaXBlbGluZXMiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiUHJlcmVxdWlzaXRlcyIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFbnN1cmUgeW91IGhhdmUgYSBwaXBlbGluZSB3aXRoaW4gdGhlIHJlcG9zaXRvcnkgZm9yIHRoZSBjb2RlIHlvdeKAmWQgbGlrZSB0byB0ZXN0LiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgeW91IGNyZWF0ZWQgYSBwaXBlbGluZSB3aXRoIHRoZSBBenVyZSBSZXBvcyB3aXphcmQsIHRoaXMgZmlsZSBpcyBjYWxsZWQgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYXp1cmUtcGlwZWxpbmVzLnltbCIpXSksCiAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJZiB0aGlzIHJlcG9zaXRvcnkgaGFzIG11bHRpcGxlIHNlcnZpY2UgY29ubmVjdGlvbnMsIGNoZWNrIHdpdGggeW91ciBTbnlrIGFkbWluIHdoaWNoIHRvIHVzZSBmb3IgeW91ciBwaXBlbGluZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIklmIHlvdSB3YW50IHRvIGFkZCB5b3VyIERvY2tlcmZpbGUgZm9yIGFkZGl0aW9uYWwgYmFzZSBpbWFnZSBkYXRhIHdoZW4gdGVzdGluZyB5b3VyIGNvbnRhaW5lciwgZW5zdXJlIHRoZSBpbWFnZSBoYXMgZmlyc3QgYmVlbiBidWlsdC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXF1aXJlbWVudHMiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBleHRlbnNpb24gcmVxdWlyZXMgdGhhdCBOb2RlLmpzIGFuZCBucG0gYmUgaW5zdGFsbGVkIG9uIHRoZSBidWlsZCBhZ2VudC4gVGhlc2UgYXJlIGF2YWlsYWJsZSBieSBkZWZhdWx0IG9uIGFsbCBNaWNyb3NvZnQtaG9zdGVkIGJ1aWxkIGFnZW50cy4gSG93ZXZlciwgaWYgeW91IGFyZSB1c2luZyBhIHNlbGYtaG9zdGVkIGJ1aWxkIGFnZW50LCB5b3UgbWF5IG5lZWQgdG8gZXhwbGljaXRseSBhY3RpdmF0ZSBOb2RlLmpzIGFuZCBucG0gYW5kIGVuc3VyZSB0aGV5IGFyZSBpbiB5b3VyICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QQVRIXyh2YXJpYWJsZSkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUEFUSCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIFRoaXMgY2FuIGJlIGRvbmUgdXNpbmcgdGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9kZXZvcHMvcGlwZWxpbmVzL3Rhc2tzL3Rvb2wvbm9kZS1qcz92aWV3PWF6dXJlLWRldm9wcyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJOb2RlVG9vbCB0YXNrIGZyb20gTWljcm9zb2Z0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBwcmlvciB0byB0aGUgU255a1NlY3VyaXR5U2NhbiB0YXNrIGluIHlvdXIgcGlwZWxpbmUuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0ZXBzOiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBZGQgdGhlIFNueWsgU2VjdXJpdHkgU2NhbiB0YXNrIHdoZW4geW91IGNyZWF0ZSB5b3VyIHBpcGVsaW5lIG9yIHdoaWxlIGVkaXRpbmcgYW4gZXhpc3Rpbmcgb25lLiBTZWUgdGhlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9kZXZvcHMvcGlwZWxpbmVzLz92aWV3PWF6dXJlLWRldm9wcyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkF6dXJlIFBpcGVsaW5lcyBkb2N1bWVudGF0aW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRnJvbSBBenVyZSwgYWNjZXNzIHRoZSBwaXBlbGluZSB0aGF0IHlvdeKAmWQgbGlrZSB0byBzY2FuIGZvciB2dWxuZXJhYmlsaXRpZXMsIG9wZW4gaXQgZm9yIGVkaXRpbmcgYW5kIGNoZWNrIHRoYXQgdGhlIEJ1aWxkIHN0ZXAgaXMgaW5jbHVkZWQganVzdCBiZWZvcmUgdGhlIHBvaW50IGF0IHdoaWNoIHlvdeKAmWQgbGlrZSB0byBpbnNlcnQgdGhlIFNueWsgdGFzayAodGhpcyBpcyBub3QgcmVxdWlyZWQgYnV0IGlzIGNvbnNpZGVyZWQgYmVzdCBwcmFjdGljZSBmb3IgY29uc2lzdGVuY3kgYWNyb3NzIHByb2plY3RzKS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJPcGVuIHRoZSAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImFzc2lzdGFudCIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCBzZWFyY2ggZm9yIHRoZSBTbnlrIFNlY3VyaXR5IFNjYW4gdGFzayBhbmQgY2xpY2sgaXQuIFRoZSBjb25maWd1cmF0aW9uIHBhbmVsIG9wZW5zIG9uIHRvcCBvZiB0aGUgYXNzaXN0YW50LiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2F6dXJlLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAicCIsCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQ29tcGxldGUgdGhlIGZpZWxkcyBpbiB0aGUgY29uZmlndXJhdGlvbi4gRmluZCBmdWxsIGRldGFpbHMgYWJvdXQgdGhlIHBhcmFtZXRlcnMgaW4gdGhlICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc255ay9zbnlrLWF6dXJlLXBpcGVsaW5lcy10YXNrI3Rhc2stcGFyYW1ldGVycyIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJHaXRIdWIgcmVwbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgb3IgaW4gdGhpcyBzZWN0aW9uIGJlbG93OiAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0bzogIi9ndWlkZS9mZWF0dXJlcy9pbnRlZ3JhdGlvbnMvY2ktY2QtaW50ZWdyYXRpb25zL2F6dXJlLXBpcGVsaW5lcy1pbnRlZ3JhdGlvbi5odG1sIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJTbnlrIFNlY3VyaXR5IFNjYW4gdGFzayBwYXJhbWV0ZXJzIGFuZCB2YWx1ZXMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiLiAiKSwKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIElmIHRoZSAiKSwKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRmFpbCBidWlsZCBpZiBTbnlrIGZpbmRzIGlzc3VlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIG9wdGlvbiBpcyBjaGVja2VkLCB0aGVuIGlmIHRoZSBidWlsZCBmYWlscywgdGhlIHBpcGVsaW5lIGpvYiB3aWxsIGJlIGZhaWxlZCBieSB0aGUgU255ayB0YXNrLiBJZiB5b3UgcmVtb3ZlIHRoZSBjaGVja21hcmsgZnJvbSB0aGUgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkZhaWwgYnVpbGQgaWYgU255ayBmaW5kcyBpc3N1ZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBvcHRpb24sIHRoZSBTbnlrIHRhc2sgdGVzdHMgZm9yIHZ1bG5lcmFiaWxpdGllcywgYnV0IGRvZXMgbm90IGNhdXNlIHRoZSBwaXBlbGluZSBqb2IgdG8gZmFpbC4gV2hlbiB0ZXN0aW5nIGEgY29udGFpbmVyIGltYWdlLCB5b3UgY2FuIHNwZWNpZnkgdGhlIHBhdGggdG8gdGhlIERvY2tlcmZpbGUgd2l0aCB0aGUgZG9ja2VyZmlsZVBhdGggcHJvcGVydHkgaW4gb3JkZXIgdG8gcmVjZWl2ZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGlzc3VlcyBpbiB5b3VyIGJhc2UgaW1hZ2UuIFRvIGFkZCB5b3VyIERvY2tlcmZpbGUgZm9yIGFkZGl0aW9uYWwgYmFzZSBpbWFnZSBkYXRhIHdoZW4gdGVzdGluZyB5b3VyIGNvbnRhaW5lciwgZW5zdXJlIHRoZSBpbWFnZSBoYXMgZmlyc3QgYmVlbiBidWlsdC4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJQbGFjZSB5b3VyIGN1cnNvciBpbnNpZGUgdGhlIHBpcGVsaW5lLCBlbnN1cmluZyB5b3UgcGxhY2UgaXQgYmVmb3JlIGEgZGVwbG95bWVudCBzdGVwLCBzdWNoIGFzICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIm5wbSBwdWJsaXNoIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJkb2NrZXIgcHVzaCIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGU6IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgWW91IGNhbiBoYXZlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGUgU255ayBTZWN1cml0eSBTY2FuIHRhc2sgd2l0aGluIHlvdXIgcGlwZWxpbmUuIFRoaXMgbWlnaHQgYmUgdXNlZnVsLCBmb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUgbXVsdGlwbGUgcHJvamVjdCBtYW5pZmVzdCBmaWxlcyB5b3Ugd2FudCB0byB0ZXN0IG9yIGlmIHlvdSB3YW50IHRvIHRlc3QgYm90aCB0aGUgYXBwbGljYXRpb24gYW5kIHRoZSBjb250YWluZXIgaW1hZ2VzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkZyb20gdGhlIGNvbmZpZ3VyYXRpb24gcGFuZWwsIGNsaWNrICIpLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQWRkIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIuIFRoZSB0YXNrIGlzIGluc2VydGVkIGludG8geW91ciBwaXBlbGluZSB3aGVyZSB5b3VyIGN1cnNvciB3YXMgcGxhY2VkLCBhcHBlYXJpbmcgc2ltaWxhciB0byB0aGUgZm9sbG93aW5nOiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgICAtIHRhc2s6IFNueWtTZWN1cml0eVNjYW5AMVxuICAgICBpbnB1dHM6XG4gICAgICAgdGVzdFR5cGU6ICdhcHAnXG4gICAgICAgbW9uaXRvcldoZW46ICdhbHdheXMnXG4gICAgICAgZmFpbE9uSXNzdWVzOiB0cnVlXG4iCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk9uY2UgaW5jbHVkZWQgaW4geW91ciBwaXBlbGluZSwgdGhlIHRhc2sgcnVucyBlYWNoIHRpbWUgdGhlIHBpcGVsaW5lIHJ1bnMsIGFuZCB0aGUgcmVzdWx0cyBhcHBlYXIgaW4gdGhlIEF6dXJlIFBpcGVsaW5lcyBvdXRwdXQgdmlldzoiCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvdXVpZC1kNTcwZTM0Yi0zOTczLTIwNDQtNTk4Yi1jYjg5YzgyYTFkYjAtZW4ucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgdGhlIFNueWsgdGFzayBmYWlscyB0aGUgYnVpbGQsIGFuIGVycm9yIG1lc3NhZ2UgYXBwZWFycyBpbiB0aGUgcmVzdWx0cyBpbmRpY2F0aW5nIHRoYXQgdGhlIGJ1aWxkIGZhaWxlZCBkdWUgdG8gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayB0ZXN0IildKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInNueWstc2VjdXJpdHktc2Nhbi10YXNrLXBhcmFtZXRlcnMtYW5kLXZhbHVlcyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1zZWN1cml0eS1zY2FuLXRhc2stcGFyYW1ldGVycy1hbmQtdmFsdWVzIiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgU255ayBTZWN1cml0eSBTY2FuIHRhc2sgcGFyYW1ldGVycyBhbmQgdmFsdWVzIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgc2VjdGlvbiBkZXNjcmliZXMgdGhlIFNueWsgdGFzayBwYXJhbWV0ZXJzIGZvciBBenVyZSBQaXBlbGluZXMgaW50ZWdyYXRpb24sIHRoZWlyIHBhcmFsbGVsIGNvbmZpZ3VyYXRpb24gZmllbGRzIChmcm9tIHRoZSBjb25maWd1cmF0aW9uIHBhbmVsIGluIEF6dXJlIFBpcGVsaW5lcykgYW5kIHRoZWlyIHZhbGlkIHZhbHVlczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCBbCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29uZmlndXJhdGlvbiBmaWVsZCIpXSksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF92bS5fdigiKFBhcmFtZXRlcikiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRlc2NyaXB0aW9uIildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXF1aXJlZCIpXSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiRGVmYXVsdCIpXSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiVHlwZSIpXSldKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgQVBJIHRva2VuIildKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNlcnZpY2UiKV0pLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfdm0uX3YoIihDb25uZWN0aW9uRW5kcG9pbnQpIiksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJUaGUgQXp1cmUgRGV2T3BzIHNlcnZpY2UgY29ubmVjdGlvbiBlbmRwb2ludCB3aGVyZSB5b3VyIFNueWsgQVBJIHRva2VuIGlzIGRlZmluZWQuIFlvdXIgYWRtaW4gZGVmaW5lcyB0aGlzIHdpdGhpbiB5b3VyIEF6dXJlIERldk9wcyBwcm9qZWN0IHNldHRpbmdzLCBhc3NpZ25pbmcgaXQgd2l0aCBhIHVuaXF1ZSBzdHJpbmcgaW4gb3JkZXIgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGRpZmZlcmVudCBjb25uZWN0aW9ucy4iCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiVGhlIGNvbmZpZ3VyYXRpb24gcGFuZWwgZGlzcGxheXMgYWxsIGF2YWlsYWJsZSBTbnlrIHNlcnZpY2UgY29ubmVjdGlvbnMgZnJvbSBhIGRyb3Bkb3duIGxpc3QgbGlrZSB0aGUgZm9sbG93aW5nOiAiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy91dWlkLTljNmExMmI0LTJjMDMtMjI0OC1hZDBlLWM3NDM3YTM1ZTE0Mi1lbi5wbmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJpbWFnZTMucG5nIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiSWYgbXVsdGlwbGUgU255ayBzZXJ2aWNlIGNvbm5lY3Rpb25zIGFyZSBhdmFpbGFibGUgZnJvbSB0aGUgZHJvcGRvd24gbGlzdCwgYXNrIHlvdXIgYWRtaW5pc3RyYXRvciB3aGljaCB0byB1c2UgZm9yIHRoZSBwaXBlbGluZSB5b3XigJlyZSB3b3JraW5nIHdpdGguIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJZZXMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9uZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlN0cmluZyAvIEF6dXJlIFNlcnZpY2UgQ29ubmVjdGlvbiBFbmRwb2ludCBvZiB0eXBlIFNueWtBdXRoIC8gU255ayBBdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJXaGF0IGRvIHlvdSB3YW50IHRvIHRlc3Q/IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiKHRlc3RUeXBlKSIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJEZXRlcm1pbmVzIHdoaWNoIGR5bmFtaWMgZmllbGRzIHRvIGRpc3BsYXkgYXMgZGVzY3JpYmVkIGluIHRoZSByZXN0IG9mIHRoaXMgdGFibGUuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiWWVzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoJyJhcHBsaWNhdGlvbiInKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdignc3RyaW5nOiAiYXBwIiBvciAiY29udGFpbmVyIicpXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNvbnRhaW5lciBJbWFnZSBOYW1lIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIihkb2NrZXJJbWFnZU5hbWUpIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lciBpbWFnZSB0byB0ZXN0LiIpXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlRoaXMgZHluYW1pYyBmaWVsZCBhcHBlYXJzIHdoZW4gIiksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiV2hhdCBkbyB5b3Ugd2FudCB0byB0ZXN0IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIGlzIHNldCB0byAiKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDb250YWluZXIgSW1hZ2VyIildKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiU2V0IHRvICIpLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlllcyIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBpZiBjb250YWluZXIgaW1hZ2UgdGVzdC4iKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJZZXMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9uZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQYXRoIHRvIERvY2tlcmZpbGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKGRvY2tlcmZpbGVQYXRoKSIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVGhlIHBhdGggdG8gdGhlIERvY2tlcmZpbGUgY29ycmVzcG9uZGluZyB0byB0aGUgIiksCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImRvY2tlckltYWdlTmFtZSIpXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlRoaXMgZHluYW1pYyBmaWVsZCBhcHBlYXJzIHdoZW4gIiksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiV2hhdCBkbyB5b3Ugd2FudCB0byB0ZXN0IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIGlzIHNldCB0byAiKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDb250YWluZXIgSW1hZ2VyIildKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJTZXQgdG8gIiksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiWWVzIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIGlmIGNvbnRhaW5lciBpbWFnZSB0ZXN0LiIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIlllcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub25lIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoInN0cmluZyIpXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkN1c3RvbSBwYXRoIHRvIG1hbmlmZXN0IGZpbGUgdG8gdGVzdCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIodGFyZ2V0RmlsZSkiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJBcHBsaWNhYmxlIHRvIGFwcGxpY2F0aW9uIHR5cGUgdGVzdHMgb25seS4gVGhlIHBhdGggdG8gdGhlIG1hbmlmZXN0IGZpbGUgdG8gYmUgdXNlZCBieSBTbnlrLiBTaG91bGQgb25seSBiZSBwcm92aWRlZCBpZiBub24tc3RhbmRhcmQuIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVGhpcyBkeW5hbWljIGZpZWxkIGFwcGVhcnMgd2hlbiAiKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJXaGF0IGRvIHlvdSB3YW50IHRvIHRlc3QiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgc2V0IHRvICIpLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFwcGxpY2F0aW9uIildKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJObyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub25lIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoInN0cmluZyIpXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlRlc3Rpbmcgc2V2ZXJpdHkgdGhyZXNob2xkIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIihzZXZlcml0eVRocmVzaG9sZCkiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJUaGUgc2V2ZXJpdHktdGhyZXNob2xkIHRvIHVzZSB3aGVuIHRlc3RpbmcuIEJ5IGRlZmF1bHQsIGlzc3VlcyBvZiBhbGwgc2V2ZXJpdHkgdHlwZXMgd2lsbCBiZSBmb3VuZC4iCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGUiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IGlmIG5vdCBjb2ZpZ3VyZWQsIHRoZSBkZWZhdWx0IHNldmVyaXR5IGlzIHNldCB0byAiKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMb3ciKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm8iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdignImxvdyInKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdignc3RyaW5nOiAibG93IiBvciAibWVkaXVtIiBvciAiaGlnaCInKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJXaGVuIHRvIHJ1biBTbnlrIE1vbml0b3IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKG1vbml0b3JXaGVuKSIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIldoZW4gdG8gcnVuICIpLAogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIG1vbml0b3IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgdG8gY2FwdHVyZSB0aGUgZGVwZW5kZW5jeSB0cmVlIG9mIHRoZSBhcHBsaWNhdGlvbiAvIGNvbnRhaW5lciBpbWFnZSBhbmQgbW9uaXRvciBpdCB3aXRoaW4gU255ay4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJZZXMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdignImFsd2F5cyInKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdignc3RyaW5nOiAiYWx3YXlzIiwgIm9uSXNzdWVzRm91bmQiLCBvciAibmV2ZXIiJyldKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJGYWlsIGJ1aWxkIGlmIFNueWsgZmluZHMgaXNzdWVzIildKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIihmYWlsT25Jc3N1ZXMpIildKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoaXMgc3BlY2lmaWVzIGlmIHBpcGVsaW5lIGpvYnMgc2hvdWxkIGJlIGZhaWxlZCBvciBjb250aW51ZWQgYmFzZWQgb24gaXNzdWVzIGZvdW5kIGJ5IFNueWsuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiWWVzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoInRydWUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiYm9vbGVhbiIpXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlByb2plY3QgbmFtZSBpbiBTbnlrIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIihwcm9qZWN0TmFtZSkiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkEgY3VzdG9tIG5hbWUgZm9yIHRoZSBTbnlrIHByb2plY3QgdG8gYmUgY3JlYXRlZCBvbiBzbnlrLmlvIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm8iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9uZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk9yZ2FuaXphdGlvbiBuYW1lIChvciBJRCkgaW4gU255ayIpXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIob3JnYW5pemF0aW9uKSIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJOYW1lIG9mIHRoZSBTbnlrIG9yZ2FuaXphdGlvbiBuYW1lLCB1bmRlciB3aGljaCB0aGlzIHByb2plY3Qgc2hvdWxkIGJlIHRlc3RlZCBhbmQgbW9uaXRvcmVkIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm8iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9uZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUZXN0IChXb3JraW5nKSBEaXJlY3RvcnkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKHRlc3REaXJlY3RvcnkpIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJBbHRlcm5hdGUgd29ya2luZyBkaXJlY3RvcnkuIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB0ZXN0IGEgbWFuaWZlc3QgZmlsZSBpbiBhIGRpcmVjdG9yeSBvdGhlciB0aGFuIHRoZSByb290IG9mIHlvdXIgcmVwbywgeW91IHdvdWxkIHB1dCBpbiBhIHJlbGF0aXZlIHBhdGggdG8gdGhhdCBkaXJlY3RvcnkuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm8iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9uZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJBZGRpdGlvbmFsIGNvbW1hbmQtbGluZSBhcmdzIGZvciBTbnlrIENMSSAoYWR2YW5jZWQpIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIoYWRkaXRpb25hbEFyZ3VtZW50cykiKV0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQWRkaXRpb25hbCBTbnlrIENMSSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIGluLiBTZWUgIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9zbnlrLWNsaS9ndWlkZXMtZm9yLW91ci1jbGkvY2xpLXJlZmVyZW5jZSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ0xJIHJlZmVyZW5jZSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIGZvciBkZXRhaWxzLiIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlRpcCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogYWRkICIpLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tYWxsLXByb2plY3RzIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBhcyBnb29kIHByYWN0aWNlIChmb3IgZXhhbXBsZSwgZm9yIC5ORVQpLCBpZiBubyBwcm9qZWN0IGhhcyBiZWVuIGZvdW5kLiIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm8iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9uZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJzdHJpbmciKV0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkV4YW1wbGUgb2YgYSBTbnlrIHRhc2sgdG8gdGVzdCBhIG5vZGUuanMgKG5wbSkgYmFzZWQgYXBwbGljYXRpb24iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIHNlY3Rpb24gZGlzcGxheXMgZXhhbXBsZXMgb2YgU255ayBTZWN1cml0eSBTY2FuIHRhc2sgY29uZmlndXJhdGlvbnMgYW5kIFtwYXJhbWV0ZXJzIHdoZW4gdGVzdGluZyBhIE5vZGUuanMgKG5wbSkgYXBwbGljYXRpb24uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGUgY29uZmlndXJhdGlvbiBwYW5lbCBhcHBlYXJzIGFzIGZvbGxvd3M6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9tY2VjbGlwMC0yNC0ucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQ2xpY2sgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImFkZCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIGl0IGlzIGFkZGVkIHRvIHlvdXIgcGlwZWxpbmUgYXMgZm9sbG93czoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvbWNlY2xpcDEtMTUtLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiU2ltcGxlIEFwcGxpY2F0aW9uIFRlc3RpbmcgRXhhbXBsZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLSB0YXNrOiBTbnlrU2VjdXJpdHlTY2FuQDBcbiAgaW5wdXRzOlxuICAgIHNlcnZpY2VDb25uZWN0aW9uRW5kcG9pbnQ6ICdzbnlrVG9rZW4nXG4gICAgdGVzdFR5cGU6ICdhcHAnXG4gICAgbW9uaXRvcldoZW46ICdhbHdheXMnXG4gICAgZmFpbE9uSXNzdWVzOiB0cnVlXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoIkV4YW1wbGUgb2YgYSBTbnlrIHRhc2sgZm9yIGEgY29udGFpbmVyIGltYWdlIHBpcGVsaW5lIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmb2xsb3dpbmcgaXMgYW4gZXhhbXBsZSBvZiB0aGUgU255ayBTZWN1cml0eSBTY2FuIHRhc2sgd2l0aGluIHRoZSBzY3JpcHQgZm9yIGEgY29udGFpbmVyIGltYWdlIHBpcGVsaW5lLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGVuIHBvcHVsYXRlZCB3aXRoIHRoZSBtb3N0IGNvbW1vbiBzZXR0aW5ncywgdGhlIGNvbmZpZ3VyYXRpb24gcGFuZWwgaW4gQXp1cmUgYXBwZWFycyBzaW1pbGFyIHRvIHRoZSBmb2xsb3dpbmc6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL21jZWNsaXAyLTUtLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9sbG93aW5nIGlzIGFuIGV4YW1wbGUgb2YgdGhlIHNhbWUgY29uZmlndXJhdGlvbiBvbmNlIHlvdSd2ZSBhZGRlZCBpdCB0byB5b3VyIHBpcGVsaW5lLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9tY2VjbGlwMy0xLS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNpbXBsZSBDb250YWluZXIgSW1hZ2UgVGVzdGluZyBFeGFtcGxlIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIi0gdGFzazogU255a1NlY3VyaXR5U2NhbkAxXG4gIGlucHV0czpcbiAgICBzZXJ2aWNlQ29ubmVjdGlvbkVuZHBvaW50OiAnc255a1Rva2VuJ1xuICAgIHRlc3RUeXBlOiAnY29udGFpbmVyJ1xuICAgIGRvY2tlckltYWdlTmFtZTogJ2dvb2YnXG4gICAgZG9ja2VyZmlsZVBhdGg6ICdEb2NrZXJmaWxlJ1xuICAgIG1vbml0b3JXaGVuOiAnYWx3YXlzJ1xuICAgIGZhaWxPbklzc3VlczogdHJ1ZVxuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}