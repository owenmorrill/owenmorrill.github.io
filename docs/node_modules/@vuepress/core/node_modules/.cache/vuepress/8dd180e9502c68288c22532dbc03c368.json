{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/docs/features/integrations/ide-tools/jetbrains-plugins.md?vue&type=template&id=74587c44&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/docs/features/integrations/ide-tools/jetbrains-plugins.md","mtime":1646940842975},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiamV0YnJhaW5zLXBsdWdpbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2pldGJyYWlucy1wbHVnaW5zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEpldEJyYWlucyBwbHVnaW5zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgaGFzIGEgcGx1Z2luIGZvciBKZXRicmFpbnMgSURFcywgd2hpY2ggc3VwcG9ydCBhbGwgU255ayBwcm9kdWN0czogIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL3NueWstb3Blbi1zb3VyY2UiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU255ayBPcGVuIFNvdXJjZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9zbnlrLWNvZGUiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU255ayBDb2RlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL3Byb2R1Y3RzL3NueWstY29udGFpbmVyIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIlNueWsgQ29udGFpbmVyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL3Byb2R1Y3RzL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJTbnlrIEluZnJhc3RydWN0dXJlIGFzIENvZGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFNueWvigJlzIEpldEJyYWlucyBwbHVnaW4gdG91Y2hlcyBvbiBhbGwgYXNwZWN0cyBvZiBzZWN1cmluZyB5b3VyIGFwcGxpY2F0aW9uIGluY2x1ZGluZzoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIGluIG9wZW4gc291cmNlIGRlcGVuZGVuY2llcyAoU255ayBPcGVuIFNvdXJjZSkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgYW5kIGNvZGUgcXVhbGl0eSBpc3N1ZXMgaW4gZmlyc3QgcGFydHkgY29kZSAoU255ayBDb2RlKS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbmZpZ3VyYXRpb24gaXNzdWVzIGluIHlvdXIgaW5mcmFzdHJ1Y3R1cmUgYXMgY29kZSBzdWNoIGFzIFRlcnJhZm9ybSwgQVdTIENsb3VkRm9ybWF0aW9uLCBLdWJlcm5ldGVzLCBhbmQgQXp1cmUgUmVzb3VyY2UgTWFuYWdlciAoQVJNKSAoU255ayBJYUMpIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgaW4geW91ciBjb250YWluZXIgaW1hZ2VzIGZvdW5kIGluIEt1YmVybmV0ZXMgd29ya2xvYWQgZmlsZXMgKFNueWsgQ29udGFpbmVyKSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5TbnlrXCdzIEpldEJyYWlucyBwbHVnaW4gaXMgYXZhaWxhYmxlIGZvciBpbnN0YWxsIG9uIHRoZSBtYXJrZXRwbGFjZTogJwogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vcGx1Z2lucy5qZXRicmFpbnMuY29tL3BsdWdpbi8xMDk3Mi1zbnlrLXZ1bG5lcmFiaWxpdHktc2Nhbm5lciIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzEwOTcyLXNueWstdnVsbmVyYWJpbGl0eS1zY2FubmVyIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuXG57JSBlbmRoaW50ICV9IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN1cHBvcnRlZC1qZXRicmFpbnMtaWRlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3VwcG9ydGVkLWpldGJyYWlucy1pZGVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN1cHBvcnRlZCBKZXRCcmFpbnMgSURFcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICd7JSBoaW50IHN0eWxlPSJpbmZvIiAlfVxuSmV0QnJhaW5zIHBsdWdpbiB2ZXJzaW9uczogd2Ugc3VwcG9ydCBwbHVnaW4gdmVyc2lvbnMgZnJvbSB2ZXJzaW9uIDIwMjAuMiBvbi5cbnslIGVuZGhpbnQgJX0nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQW5kcm9pZCBTdHVkaW8iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkFwcENvZGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkdvTGFuZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW50ZWxsaUoiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlBocFN0b3JtIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJQeUNoYXJtIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSaWRlciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUnVieU1pbmUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIldlYlN0b3JtIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXRoZS1wbHVnaW4td29ya3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10aGUtcGx1Z2luLXdvcmtzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJIb3cgdGhlIHBsdWdpbiB3b3JrcyIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBwbHVnaW4gaXMgYmFzZWQgb24gU255ayBDTEkgKGJ1dCBub3Qgb25seSkuIFRoZSBwbHVnaW4gc3VwcG9ydHMgYWxsIHByb2R1Y3QgZmVhdHVyZXMgdGhhdCBhcmUgY29taW5nIGZyb20gdGhlIENMSSBmb3IgU255ayBPcGVuIFNvdXJjZSwgU255ayBJYUMgYW5kIFNueWsgQ29udGFpbmVyLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBwbHVnaW4gd2lsbCBhdXRvbWF0aWNhbGx5IGRvd25sb2FkIHRoZSBDTEkgaW4gdGhlIGJhY2tncm91bmQgKHdpbGwgYXNrIHlvdSB0byAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9kb2NzL2ZlYXR1cmVzL2ludGVncmF0aW9ucy9pZGUtdG9vbHMvamV0YnJhaW5zLXBsdWdpbnMuaHRtbCNhdXRoZW50aWNhdGlvbiIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiYXV0aGVudGljYXRlIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiKS4iKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIldlIHN1cHBvcnQgYWxsIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL3Byb2R1Y3RzL3NueWstY29kZS9zbnlrLWNvZGUtbGFuZ3VhZ2UtYW5kLWZyYW1ld29yay1zdXBwb3J0I2xhbmd1YWdlLXN1cHBvcnQtd2l0aC1zbnlrLWNvZGUtYWktZW5naW5lIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJsYW5ndWFnZXMgc3VwcG9ydGVkIGJ5IFNueWsgQ29kZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvZGF5LiBZb3UgY2FuIGluc3RhbGwgdGhlIHBsdWdpbiBvbiBhbnkgb2YgdGhlIElERXMgKHN1Y2ggYXMgUnVieU1pbmUpIGFuZCB3aXRoIHRoZSBwbHVnaW4gd2Ugd291bGQgYW5hbHl6ZSBhbGwgdGhlIGxhbmd1YWdlIGZpbGVzIHdlIGZpbmQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJZiB0aGUgQ0xJIGlzIGFscmVhZHkgaW5zdGFsbGVkIG9uIHRoZSBtYWNoaW5lLCB0aGUgcGx1Z2luIHdpbGwgdXNlIHRoZSB0b2tlbiBwcm92aWRlZCB0byBpdCwgb3RoZXJ3aXNlLCB5b3XigJlsbCBuZWVkIHRvIHByb3ZpZGUgdGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuIHZpYSB0aGUgcGx1Z2luIGF1dGhlbnRpY2F0aW9uIG1lY2hhbmlzbS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJpbnN0YWxsLXRoZS1wbHVnaW4iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luc3RhbGwtdGhlLXBsdWdpbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW5zdGFsbCB0aGUgcGx1Z2luIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBpbnN0YWxsYXRpb24gaXMgZG9uZSB2aWEgdGhlIElERSBwbHVnaW5zIGNhdGFsb2cvbGlicmFyeToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJPcGVuIHRoZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcmVmZXJlbmNlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiB3aW5kb3cgZnJvbSB0aGUgSURFLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTmF2aWdhdGUgdG8gdGhlICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBsdWdpbnMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdGFiLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSW4gdGhlICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBsdWdpbnMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdGFiLCBzZWFyY2ggZm9yICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsiKV0pLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJTZWxlY3QgdGhlICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgVnVsbmVyYWJpbGl0eSBTY2FubmluZyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBwbHVnaW4uIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDbGljayBvbiB0aGUgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW5zdGFsbCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBidXR0b24uIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiT25jZSBpbnN0YWxsZWQsIHJlc3RhcnQgdGhlIElERS4iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pZGUucG5nIiksIGFsdDogIiIgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29uZmlndXJhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29uZmlndXJhdGlvbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uZmlndXJhdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJlbnZpcm9ubWVudCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZW52aXJvbm1lbnQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEVudmlyb25tZW50IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGFuYWx5emUgcHJvamVjdHMsIHRoZSBwbHVnaW4gdXNlcyB0aGUgU255ayBDTEkgd2hpY2ggbmVlZHMgc29tZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIFRoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFyZSBuZWVkZWQgb3IgaGVscGZ1bCwgZGVwZW5kZW50IG9uIHRoZSB0eXBlIG9mIHByb2plY3QgeW91IGFuYWx5c2U6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUEFUSCIpXSksCiAgICAgICAgICBfdm0uX3YoIjogdGhlIHBhdGggdG8gbmVlZGVkIGJpbmFyaWVzLCAoZm9yIGV4YW1wbGUsIHRvIG1hdmVuKS4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkpBVkFfSE9NRSIpXSksCiAgICAgICAgICBfdm0uX3YoIjogdGhlIHBhdGggdG8gdGhlIEpESyB0byB1c2UgdG8gYW5hbHl6ZSBKYXZhIGRlcGVuZGVuY2llcyIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTZXR0aW5nIHRoZXNlIHZhcmlhYmxlcyBvbmx5IGluIGEgc2hlbGwgZW52aXJvbm1lbnQgKGZvciBleGFtcGxlLCB1c2luZyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4vLmJhc2hyYyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIikgaXMgbm90IHN1ZmZpY2llbnQsIGlmIHlvdSBkbyBub3Qgc3RhcnQgdGhlIEpldGJyYWlucyBJREUgZnJvbSB0aGUgY29tbWFuZCBsaW5lIG9yIGNyZWF0ZSBhIHNjcmlwdCBmaWxlIHRoYXQgc3RhcnRzIGl0IHVzaW5nIGEgc2hlbGwgZW52aXJvbm1lbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiT24gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiV2luZG93cyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIHlvdSBjYW4gc2V0IHRoZSB2YXJpYWJsZXMsIHVzaW5nIHRoZSBHVUkgb3Igb24gdGhlIGNvbW1hbmQgbGluZSB1c2luZyB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2V0eCIpXSksCiAgICAgICAgICBfdm0uX3YoIiB0b29sLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiT24gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigibWFjT1MiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIHRoZSBwcm9jZXNzICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsYXVuY2hkIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBuZWVkcyB0byBrbm93IHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaWYgeW91IHdhbnQgdG8gbGF1bmNoIHRoZSBJREUgZnJvbSBGaW5kZXIgZGlyZWN0bHkuIFNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIGFwcGxpY2F0aW9ucyBsYXVuY2hlZCB2aWEgRmluZGVyIHVzaW5nIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsYXVuY2hjdGwgc2V0ZW52IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBjb21tYW5kIChmb3IgZXhhbXBsZSwgb24gc3RhcnQtdXAgb3IgdmlhIGEgc2NyaXB0IHlvdSBsYXVuY2ggYXQgdXNlciBsb2dpbikuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRoZSBwcm92aXNpb24gb2YgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSBtYWNPUyBVSSBjYW4gY2hhbmdlIGJldHdlZW4gb3BlcmF0aW5nIHN5c3RlbSByZWxlYXNlcywgc28gaXQgY2FuIGJlIGVhc2llciB0byBjcmVhdGUgYSBzbWFsbCBzaGVsbCBzY3JpcHQgdGhhdCBsYXVuY2hlcyB0aGUgSURFIHRvIGxldmVyYWdlIHRoZSBzaGVsbCBlbnZpcm9ubWVudCwgdGhhdCBjYW4gYmUgZGVmaW5lZCB2aWEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigifi8uYmFzaHJjIildKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiT24gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTGludXgiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIHVwZGF0aW5nIHRoZSBmaWxlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIvZXRjL2Vudmlyb25tZW50IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBjYW4gYmUgdXNlZCB0byBwcm9wYWdhdGUgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byB0aGUgd2luZG93cyBtYW5hZ2VyIGFuZCBVSS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcm94eSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJveHkiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUHJveHkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91IG5lZWQgdG8gdXNlIGEgcHJveHkgc2VydmVyIHRvIGNvbm5lY3QgdG8gdGhlIGludGVybmV0LCBjb25maWd1cmUgaXQgdXNpbmcgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5qZXRicmFpbnMuY29tL2hlbHAvaWRlYS9zZXR0aW5ncy1odHRwLXByb3h5Lmh0bWwiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiSmV0YnJhaW5zIElERSBzZXR0aW5ncyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIFRoZSBTbnlrIHBsdWdpbiB3aWxsIHVzZSB0aGVtLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhdXRoZW50aWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYXV0aGVudGljYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEF1dGhlbnRpY2F0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmaXJzdCB0aW1lIGl0IGlzIG5lZWRlZCwgdGhlIHBsdWdpbiBhdXRvbWF0aWNhbGx5IGRvd25sb2FkcyB0aGUgQ0xJIGluIHRoZSBiYWNrZ3JvdW5kLiBUaGVyZSBhcmUgYSBmZXcgd2F5cyB0byBhdXRoZW50aWNhdGUgb25jZSB0aGUgcGx1Z2luIGlzIGluc3RhbGxlZDoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQWZ0ZXIgdGhlIHBsdWdpbiBpbnN0YWxscywgeW91IGFyZSBwcm9tcHRlZCB0byBhdXRoZW50aWNhdGUgYW5kIGNvbm5lY3QgdGhlIElERSBwbHVnaW4gdG8gU255ay4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIhW1Byb21wdCB0byBhdXRoZW50aWNhdGUgYW5kIHN0YXJ0IHRlc3RpbmcgeW91ciBjb2RlLl0oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9TY3JlZW5zaG90IDIwMjItMDItMTAgYXQgMTcuMDcuNTIucG5nPikiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDbGljayAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUZXN0IGNvZGUgbm90ZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIFRoZSBwbHVnaW4gcmVsaWVzIG9uIHRoZSBTbnlrIENMSSwgd2hpY2ggYXV0aGVudGljYXRlcyB5b3UgYWdhaW5zdCBTbnlr4oCZcyB3ZWIgYXBwbGljYXRpb24uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNsaWNrICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkF1dGhlbnRpY2F0ZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiB3aGVuIHByb21wdGVkIGJ5IFNueWsuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3NjcmVlbi1zaG90LTIwMjEtMDktMjktYXQtNC4wNC4yOS1wbS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiR290dGEgYXV0aGVudGljYXRlIHRvIGdldCB0aGF0IHN3ZWV0LCBzd2VldCBBUEkvQ0xJL09yZyBJRC90b2tlbiBnb29kbmVzcy4iLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQWZ0ZXIgYXV0aGVudGljYXRpb24geW91IHdpbGwgc2VlIGEgY29uZmlybWF0aW9uIG1lc3NhZ2UgZm9yIHRoZSBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvc2NyZWVuLXNob3QtMjAyMS0wOS0yOS1hdC00LjA1LjU1LXBtLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJUaGlzIGlzIHRoYXQgY29uZmlybWF0aW9uIG1lc3NhZ2Ugd2UgdGFsa2VkIGFib3V0LiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgSURFIHdpbGwgcmVhZCBhbmQgc2F2ZSB0aGUgYXV0aGVudGljYXRpb24gb24geW91ciBsb2NhbCBtYWNoaW5lLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJZb3UgY2FuIG5vdyBjbG9zZSB0aGUgYnJvd3NlciB3aW5kb3cgYW5kIHJldHVybiB0byB0aGUgSURFLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSBhbmFseXNpcyBzaG91bGQgaGF2ZSBzdGFydGVkIGF1dG9tYXRpY2FsbHk6IildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvU2NyZWVuc2hvdCAyMDIyLTAyLTEwIGF0IDE3LjI2LjQ0LnBuZz4pIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImFkZC10b2tlbi1tYW51YWxseSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWRkLXRva2VuLW1hbnVhbGx5IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFkZCB0b2tlbiBtYW51YWxseSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlByb2R1Y2UgdG9rZW4gaGVyZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXBwLnNueWsuaW8vYWNjb3VudCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiaHR0cHM6Ly9hcHAuc255ay5pby9hY2NvdW50IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCJbSmV0QnJhaW5zIElERV0gPj4gUHJlZmVyZW5jZXMgPj4gVG9vbHMgPj4gU255ayIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJQYXN0ZSBvciBlbnRlciB0aGUgdG9rZW4gdW5kZXIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29ubmVjdCBJREUgdG8gU255ayIpXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2xpY2sgIiksIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBcHBseSBvciBPSyIpXSldKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvc2NyZWVuLXNob3QtMjAyMS0wOS0zMC1hdC04LjEwLjIxLWFtLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWFudWFsbHktYXV0aGVudGljYXRpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI21hbnVhbGx5LWF1dGhlbnRpY2F0aW5nIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1hbnVhbGx5IGF1dGhlbnRpY2F0aW5nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vdywgc29tZXRpbWVzIGJhZCB0aGluZ3MgaGFwcGVuIGFuZCB3ZSBjYW4ndCBhdXRoZW50aWNhdGUuIFdoZW4gdGhhdCBoYXBwZW5zLCBydW4gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrIGF1dGgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZnJvbSB0aGUgY29tbWFuZCBsaW5lIGFuZCB5b3Ugc2hvdWxkIGdldCB0aGUgdmVyeSBzYW1lIGF1dGhlbnRpY2F0aW9uIHNjcmVlbiBhcyBhYm92ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvc2NyZWVuLXNob3QtMjAyMS0wOS0yOS1hdC0zLjU3LjI2LXBtLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJJZiB0aGlzIGRvZXNuJ3Qgd29yaywgSSdsbCBoYXZlIHRvIHRhbGsgdG8gbXkgZW5naW5lZXJzIGFuZCBnZXQgYmFjayB0byB5b3UuIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJ1bi1hbi1hbmFseXNpcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcnVuLWFuLWFuYWx5c2lzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSdW4gYW4gYW5hbHlzaXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cbk1ha2Ugc3VyZSB5b3VyIHByb2plY3QgZmlsZSAoZm9yIGV4YW1wbGUsIHJlcXVpcmVtZW50cy50eHQpIGlzIHNhdmVkIGJlZm9yZSBydW5uaW5nIGFuIGFuYWx5c2lzLlxueyUgZW5kaGludCAlfScKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyB0cmlnZ2VyIGFuIGFuYWx5c2lzIGR1cmluZyB5b3VyIGRhaWx5IGNvZGluZyB3b3JrZmxvdywgY2xpY2sgZWl0aGVyIHRoZSBydW4gKHBsYXkpIGJ1dHRvbiwgb3IgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlJ1biBzY2FuIildKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvcGxheS1ydW4ucG5nIiksCiAgICAgICAgICAgIGFsdDogInBsYXktcnVuLnBuZyIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhbmFseXNpcy1yZXN1bHRzLXNueWstb3Blbi1zb3VyY2UiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FuYWx5c2lzLXJlc3VsdHMtc255ay1vcGVuLXNvdXJjZSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBbmFseXNpcyByZXN1bHRzOiBTbnlrIE9wZW4gU291cmNlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgT3BlbiBTb3VyY2UgYW5hbHlzaXMgc2hvd3MgYSBsaXN0IG9mIHZ1bG5lcmFiaWxpdGllcyBhbmQgbGljZW5zZSBpc3N1ZXMgZm91bmQgaW4gdGhlIG1hbmlmZXN0IGZpbGUuIEZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLCB5b3UgY2FuIHNlbGVjdCBhIHZ1bG5lcmFiaWxpdHkvbGljZW5zZSBpc3N1ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvcmVzdWx0cy1vcy5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFuYWx5c2lzLXJlc3VsdHMtc255ay1jb2RlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhbmFseXNpcy1yZXN1bHRzLXNueWstY29kZSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBbmFseXNpcyByZXN1bHRzOiBTbnlrIENvZGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayBDb2RlIGFuYWx5c2lzIHNob3dzIGEgbGlzdCBvZiBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgYW5kIGNvZGUgaXNzdWVzIGZvdW5kIGluIHlvdXIgYXBwbGljYXRpb24gY29kZS4gRm9yIG1vcmUgZGV0YWlscyBhbmQgZXhhbXBsZXMgZml4ZXMgb24gaG93IG90aGVycyBmaXhlZCB0aGUgaXNzdWUsIHlvdSBqdXN0IG5lZWQgdG8gc2VsZWN0IHRoZSBzZWN1cml0eSB2dWxuZXJhYmlsaXR5IG9yIHRoZSBjb2RlIHNlY3VyaXR5IGlzc3VlOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9yZXN1bHRzLWNvZGUucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhbmFseXNpcy1yZXN1bHRzLXNueWstY29uZmlndXJhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYW5hbHlzaXMtcmVzdWx0cy1zbnlrLWNvbmZpZ3VyYXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQW5hbHlzaXMgcmVzdWx0czogU255ayBDb25maWd1cmF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgQ29uZmlndXJhdGlvbiBhbmFseXNpcyByZXN1bHRzIHNob3dzIGlzc3VlcyBpbiB5b3VyIFRlcnJhZm9ybSwgS3ViZXJuZXRlcywgQVdTIENsb3VkRm9ybWF0aW9uLCBhbmQgQXp1cmUgUmVzb3VyY2UgTWFuYWdlciAoQVJNKSBjb2RlIHdpdGggZXZlcnkgc2Nhbi4gQmFzZWQgb24gU255a+KAmXMgQ0xJLCB0aGUgc2NhbiBpcyBmYXN0IGFuZCBmcmllbmRseSBmb3IgbG9jYWwgZGV2ZWxvcG1lbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ludGVsbGlqX2lhY19pc3N1ZXMucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3IgcXVpY2tseSB1bmRlcnN0YW5kaW5nIGFuZCBmaXhpbmcgdGhlIHVuZGVybHlpbmcgaXNzdWUgU255a+KAmXMgcGx1Z2luIHRlbGxzIHlvdToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRlc2NyaXB0aW9uOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiB3aGF0IHRoZSBtaXNjb25maWd1cmF0aW9uIGlzLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJbXBhY3Q6IildKSwKICAgICAgICAgIF92bS5fdigiIGhvdyB0aGUgbWlzY29uZmlndXJhdGlvbiBjb3VsZCBwb3RlbnRpYWxseSBiZSBleHBsb2l0ZWQuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBhdGg6IildKSwKICAgICAgICAgIF92bS5fdigiIHdoaWNoIHBhdGggaW4gdGhlIHRyZWUgdGhlIGlzc3VlIG9jY3Vycy4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUmVtZWRpYXRpb246IildKSwKICAgICAgICAgIF92bS5fdigiIGhvdyB0byBmaXggdGhlIGlzc3VlLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJSZWZlcmVuY2VzOiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgd2hlcmUgeW91IGNhbiBpbnZlc3RpZ2F0ZSBkZWVwZXIgZnJvbSBhIHZhcmlldHkgb2Ygc291cmNlcy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJZ25vcmU6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBJZiB0aGUgaXNzdWUgbmVlZHMgdG8gYmUgaWdub3JlZCwgeW91IGdvdCB5b3UgY292ZXJlZCBhcyB3ZWxsLSB0aGVyZSBpcyBhIGJ1dHRvbiB0byBkbyBzbyBpbiB0aGUgdG9wIHJpZ2h0IGNvcm5lci4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhbmFseXNpcy1yZXN1bHRzLXNueWstY29udGFpbmVyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhbmFseXNpcy1yZXN1bHRzLXNueWstY29udGFpbmVyIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFuYWx5c2lzIHJlc3VsdHM6IFNueWsgQ29udGFpbmVyIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBwbHVnaW4gc2NhbnMgS3ViZXJuZXRlcyBjb25maWd1cmF0aW9uIGZpbGVzIGFuZCBzZWFyY2hlcyBmb3IgY29udGFpbmVyIGltYWdlcy4gVnVsbmVyYWJpbGl0aWVzIGFyZSBmb3VuZCBmYXN0IHVzaW5nIHRoZSBleHRyYWN0ZWQgY29udGFpbmVyIGltYWdlcyBhbmQgY29tcGFyYXRpdmUgYW5hbHlzaXMgYWdhaW5zdCB0aGUgbGF0ZXN0IGluZm9ybWF0aW9uIGZyb20gdGhlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3NlY3VyaXR5LnNueWsuaW8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU255ayBJbnRlbCBWdWxuZXJhYmlsaXR5IERhdGFiYXNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGhhdmUgdGhlIGFiaWxpdHkgdG8gZ28gb3ZlciBlYWNoIG9mIHRoZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgeW91ciBpbWFnZSBtaWdodCBiZSB2dWxuZXJhYmxlIHRvLCBhbmQgaW4gdGhlIHNhbWUgbWFubmVyIGxpa2Ugb3VyIE9wZW4gU291cmNlIGZpbmRpbmdzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pbnRlbGxpal9jb250YWluZXJfdnVsbmVyYWJpbGl0ZXMucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgY29sb3JmdWwgY29tcGFyaXNvbiB0YWJsZSAoZnJvbSBhYm92ZSkgd2l0aCB2YXJpb3VzIHNldmVyaXR5IGxldmVscyAoY3JpdGljYWwsIGhpZ2gsIGV0Yy4pIHByb3ZpZGVzIHRoZSBkaWZmZXJlbmNlIGluIHZ1bG5lcmFiaWxpdGllcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGltYWdlIGFuZCB0aGUgcmVjb21tZW5kZWQgYnkgU255ayBpbWFnZSB3aXRoIHRoZSBzYW1lIGNoYXJhY3RlcmlzdGljcyBzb3J0ZWQgYnkgc2V2ZXJ0aXkuIFRoaXMgaGVscHMgeW91IHRvIG1ha2UgYSBkZWNpc2lvbiBpZiB5b3Ugd2FudCB0byB1cGdyYWRlIHlvdXIgaW1hZ2UgdG8gdGhlIHJlY29tbWVuZGVkIG9uZSBhbmQgaW5jcmVhc2UgdGhlIGxldmVsIG9mIGNvbmZpZGVuY2UgaW4gdGhlIGltYWdlIHlvdSBhcmUgcnVubmluZyBpbiBwcm9kdWN0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImhvdy1zbnlrLWNvbnRhaW5lci1rdWJlcm5ldGVzLWludGVncmF0aW9uLXdvcmtzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjaG93LXNueWstY29udGFpbmVyLWt1YmVybmV0ZXMtaW50ZWdyYXRpb24td29ya3MiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBIb3cgU255ayBDb250YWluZXIgLyBLdWJlcm5ldGVzIGludGVncmF0aW9uIHdvcmtzPyIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgcGx1Z2luIHNjYW5zIHlvdXIgS3ViZXJuZXRlcyB3b3JrbG9hZCBmaWxlcyBhbmQgY29sbGVjdHMgdGhlIGltYWdlcyB1c2VkLiBUbyB0cm91Ymxlc2hvb3Qgd2hldGhlciBhIHBsdWdpbiBpcyBjb3JyZWN0bHkgc2Nhbm5pbmcgYSBjb250YWluZXIgaW1hZ2UsIHlvdSBjYW4gdmVyaWZ5OlxuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJpZiB0aGUgaW1hZ2UgZGVmaW5pdGlvbiBpcyBpbiB0aGUgS3ViZXJuZXRlcyBZQU1MIGZpbGUgaW4gdGhlIHByb2plY3QuIE1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgaW1hZ2Ugc3BlY2lmaWVkIHdpdGggYSBZQU1MIHZhbHVlIHRvIHRoZSBZQU1MIGltYWdlIGtleS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgImlmIHRoZSBjb250YWluZXIgaW1hZ2UgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGJ1aWx0IGxvY2FsbHkgYW5kL29yIHB1c2hlZCB0byBhIGNvbnRhaW5lciByZWdpc3RyeS4gSXQgaXMgYWxzbyBhIGdvb2QgcHJhY3RpY2UgdG8gZG8gdGhpcyBiZWZvcmUgcmVmZXJyaW5nIHRvIHRoZSBjb250YWluZXIgaW1hZ2UgaW4gdGhlIEt1YmVybmV0ZXMgWUFNTCBmaWxlLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIklmIHlvdSwgaG93ZXZlciwgZW5jb3VudGVyIGFuIGVycm9yLCAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnNueWsuaW8vZmVhdHVyZXMvaW50ZWdyYXRpb25zL2lkZS10b29scy9qZXRicmFpbnMtcGx1Z2lucyNzdXBwb3J0LWNvbnRhY3QiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigibGV0IHVzIGtub3ciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIHNvIHdlIGNhbiBsb29rIGludG8gaXQuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRm9yIGVhY2ggaW1hZ2Ugd2UndmUgZm91bmQsIHdlIHBlcmZvcm0gYSB0ZXN0IHdpdGggb3VyIENMSS5cbiIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNsaWNrICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9wcm9kdWN0cy9zbnlrLWNvbnRhaW5lci9zbnlrLWNsaS1mb3ItY29udGFpbmVyLXNlY3VyaXR5I3Rlc3RpbmctYW4taW1hZ2UiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiaGVyZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBpZiB5b3Ugd2FudCB0byBsZWFybiBtb3JlIGFib3V0IGhvdyBTbnlrIENvbnRhaW5lciBwZXJmb3JtcyBhIHRlc3Qgb24gdGhlIGltYWdlLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRHVyaW5nIHRlc3RpbmcgdGhlIGltYWdlIHRoZSBDTEkgd2lsbCBkb3dubG9hZCB0aGUgaW1hZ2UgaWYgaXQgaXMgbm90IGFscmVhZHkgYXZhaWxhYmxlIGxvY2FsbHkgaW4geW91ciBEb2NrZXIgZGFlbW9uLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldlIHdpbGwgYmUgZXhwYW5kaW5nIHRoZSBzY29wZSBvZiBDb250YWluZXIgc2Nhbm5pbmcsIHNvIGlmIHRoZXJlIGFyZSBtb3JlIGZpbGVzIChsaWtlIERvY2tlcmZpbGVzKSBvciB3b3JrZmxvd3MgdGhhdCB5b3Ugd2FudCB0byBiZSBzdXBwb3J0ZWQsIHN1Ym1pdCBhIGZlYXR1cmUgcmVxdWVzdCAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zdXBwb3J0LnNueWsuaW8vaGMvZW4tdXMvcmVxdWVzdHMvbmV3IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJoZXJlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZmlsdGVyLXJlc3VsdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZpbHRlci1yZXN1bHRzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGaWx0ZXIgcmVzdWx0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmaWx0ZXItYnktc2V2ZXJpdHkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2ZpbHRlci1ieS1zZXZlcml0eSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGaWx0ZXIgYnkgc2V2ZXJpdHkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayBkZWxpdmVycyBDcml0aWNhbCwgSGlnaCwgTWVkaXVtIGFuZCBMb3cgc2V2ZXJpdGllcy4gWW91IGNhbiBmaWx0ZXIgZm9yIHRoZSBzZXZlcml0eSB5b3UgbmVlZCBieSBzZWxlY3RpbmcgdGhlIHZhbHVlIGZyb20gdGhlIGRyb3Bkb3duIGFzIHNob3duIGJlbG93LiBCeSBkZWZhdWx0IGFsbCBsZXZlbHMgYXJlIHNlbGVjdGVkLiBZb3UgbXVzdCBzZWxlY3QgYXQgbGVhc3Qgb25lLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9maWx0ZXItc2V2ZXJpdHkucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmaWx0ZXItYnktaXNzdWUtdHlwZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZmlsdGVyLWJ5LWlzc3VlLXR5cGUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRmlsdGVyIGJ5IGlzc3VlIHR5cGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlNueWsgZGVsaXZlcnMgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBpc3N1ZXM6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiT3BlbiBTb3VyY2UgVnVsbmVyYWJpbGl0aWVzIildKSwKICAgICAgICAgIF92bS5fdigiOiBmb3VuZCBpbiBvcGVuIHNvdXJjZSBkZXBlbmRlbmNpZXMuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNlY3VyaXR5IFZ1bG5lcmFiaWxpdGllcyIpXSksCiAgICAgICAgICBfdm0uX3YoIjogZm91bmQgaW4geW91ciBhcHBsaWNhdGlvbuKAmXMgc291cmNlIGNvZGUuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlF1YWxpdHkgSXNzdWVzIildKSwKICAgICAgICAgIF92bS5fdigiOiBmb3VuZCBpbiB5b3VyIGFwcGxpY2F0aW9u4oCZcyBzb3VyY2UgY29kZS4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29uZmlndXJhdGlvbiBJc3N1ZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCI6IGZvdW5kIGluIGluZnJhc3RydWN0dXJlIGFzIGNvZGUgZmlsZXMuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNvbnRhaW5lciBWdWxuZXJhYmlsaXRpZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCI6IGZvdW5kIGluIGltYWdlcyBzb3VyY2VkIGZyb20gS3ViZXJuZXRlcyB3b3JrbG9hZCBmaWxlcy4iKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiBmaWx0ZXIgZm9yIGVhY2ggb25lIG9mIHRoZW0gYnkgc2VsZWN0aW5nIHRoZSB2YWx1ZSBmcm9tIHRoZSBkcm9wZG93biBhcyBzaG93biBiZWxvdy4gQnkgZGVmYXVsdCBhbGwgdGhyZWUgaXNzdWUgdHlwZXMgYXJlIHNlbGVjdGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9maWxsdGVyLWlzc3VldHlwZS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInBsdWdpbi1jb25maWd1cmF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwbHVnaW4tY29uZmlndXJhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQbHVnaW4gY29uZmlndXJhdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBZnRlciB0aGUgcGx1Z2luIGlzIGluc3RhbGxlZCwgeW91IGNhbiBzZXQgdGhlIGZvbGxvd2luZyBjb25maWd1cmF0aW9ucyBmb3IgdGhlIHBsdWdpbiwgdXNpbmcgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlByZWZlcmVuY2VzIOKGkiBUb29scyDihpIgU255ayIpXSksCiAgICAgICAgX3ZtLl92KCI6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUb2tlbiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IHRoZSB0b2tlbiB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBhdXRoZW50aWNhdGlvbiB3aXRoIFNueWsgKGNhbiBiZSBnZW5lcmF0ZWQgdmlhIHRoZSBBY2NvdW50IFNldHRpbmdzIGluIFNueWsgQXBwKSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkN1c3RvbSBlbmRwb2ludCIpXSksCiAgICAgICAgICBfdm0uX3YoIjogY3VzdG9tIGVuZHBvaW50IGZvciBTbnlrIGFwcCwgaWYgbmVlZGVkLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJZ25vcmUgdW5rbm93biBDQSIpXSksCiAgICAgICAgICBfdm0uX3YoIjogZm9yIGlnbm9yaW5nIHRoZSBTU0wgY2VydCwgaWYgbmVlZGVkLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJPcmdhbml6YXRpb24iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiB0aGUgb3JnIHRvIHJ1biBTbnlrIHRlc3QgYWdhaW5zdCAoc2ltaWxhcmx5IHRvIHRoZSAtLW9yZyBwYXJhbSBpbiB0aGUgQ0xJKS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBZGRpdGlvbmFsIHBhcmFtZXRlcnMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBhZGRpdGlvbmFsIENMSSBzbnlrIHRlc3QgcGFyYW1zLCB5b3XigJlkIGxpa2UgdG8gcnVuIHRoZSB0ZXN0IHdpdGguIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBPcGVuIFNvdXJjZSB2dWxuZXJhYmlsaXRpZXMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBhbmFseXplIHRoZSBwcm9qZWN0IGZvciBvcGVuIHNvdXJjZSB2dWxuZXJhYmlsaXRpZXMgdGhyb3VnaCB0aGUgQ0xJIHVzaW5nIHRoZSBTbnlrIE9wZW4gU291cmNlLiBFbmFibGVkIGJ5IGRlZmF1bHQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIGlzc3VlcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IGFuYWx5emUgdGhlIHByb2plY3QgZm9yIGluc2VjdXJlIGNvbmZpZ3VyYXRpb25zIGluIFRlcnJhZm9ybSBhbmQgS3ViZXJuZXRlcyBjb2RlLiBFbmFibGVkIGJ5IGRlZmF1bHQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBDb250YWluZXIgdnVsbmVyYWJpbGl0aWVzIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjogYW5hbHl6ZSB0aGUgcHJvamVjdCBmb3IgY29udGFpbmVyIHZ1bG5lcmFiaWxpdGllcyBpbiBjb250YWluZXIgaW1hZ2VzIGFuZCBLdWJlcm5ldGVzIGFwcGxpY2F0aW9ucy4gRW5hYmxlZCBieSBkZWZhdWx0LiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgQ29kZSBTZWN1cml0eSBpc3N1ZXMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBhbmFseXplIHRoZSBwcm9qZWN0IGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgaW4geW91ciBhcHBsaWNhdGlvbiBjb2RlIHVzaW5nIFNueWsgQ29kZS4gRW5hYmxlZCBieSBkZWZhdWx0LiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgQ29kZSBRdWFsaXR5IGlzc3VlcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IGFuYWx5emUgdGhlIHByb2plY3QgZm9yIHF1YWxpdHkgaXNzdWVzIGluIHlvdXIgYXBwbGljYXRpb24gY29kZSB1c2luZyBTbnlrIENvZGUuIERpc2FibGVkIGJ5IGRlZmF1bHQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3VwcG9ydC1jb250YWN0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdXBwb3J0LWNvbnRhY3QiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN1cHBvcnQgLyBDb250YWN0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCd7JSBoaW50IHN0eWxlPSJpbmZvIiAlfVxuTmVlZCBtb3JlIGhlbHA/ICcpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3N1cHBvcnQuc255ay5pby9oYy9lbi11cy9yZXF1ZXN0cy9uZXciLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQ29udGFjdCBvdXIgU3VwcG9ydCB0ZWFtIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi5cbnslIGVuZGhpbnQgJX0iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAic2hhcmUteW91ci1leHBlcmllbmNlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzaGFyZS15b3VyLWV4cGVyaWVuY2UiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2hhcmUgeW91ciBleHBlcmllbmNlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIGNvbnRpbnVvdXNseSBzdHJpdmUgdG8gaW1wcm92ZSBvdXIgcGx1Z2lucyBleHBlcmllbmNlLiBXb3VsZCB5b3UgbGlrZSB0byBzaGFyZSB3aXRoIHVzIHlvdXIgZmVlZGJhY2sgYWJvdXQgU255aydzIEpldEJyYWlucyBQbHVnaW46ICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2NhbGVuZGx5LmNvbS9zbnlrLWdlb3JnaS80NW1pbj9tb250aD0yMDIyLTAxIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInNjaGVkdWxlIGEgbWVldGluZyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}