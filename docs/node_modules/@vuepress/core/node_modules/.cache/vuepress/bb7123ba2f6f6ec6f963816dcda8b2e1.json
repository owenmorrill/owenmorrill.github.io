{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/features/other-tools/snyk-scm-contributors-count-cli-tool/creating-and-using-the-import-files.md?vue&type=template&id=c6833582&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/features/other-tools/snyk-scm-contributors-count-cli-tool/creating-and-using-the-import-files.md","mtime":1644439892939},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiY3JlYXRpbmctYW5kLXVzaW5nLXRoZS1pbXBvcnQtZmlsZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NyZWF0aW5nLWFuZC11c2luZy10aGUtaW1wb3J0LWZpbGVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENyZWF0aW5nIGFuZCB1c2luZyB0aGUgSW1wb3J0IGZpbGVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImhvdy1pdC13b3JrcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaG93LWl0LXdvcmtzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb3cgaXQgd29ya3MiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldoZW4gdGhlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrLWNvbnRyaWJ1dG9ycy1jb3VudCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0b29sIGNvbm5lY3RzIGJvdGggdG8geW91ciBTbnlrIGFjY291bnQgYW5kIHlvdXIgU0NNIGFjY291bnQsIGl0IGZpbmRzIG91dCB3aGljaCByZXBvcy9wcm9qZWN0cyBhcmUgbW9uaXRvcmVkIGJ5IFNueWsgYW5kIHdoaWNoIGFyZSBub3QuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkJ5IGFwcGx5aW5nIHRoZSB0d28gcmVsYXRlZCBmbGFncyB0byB0aGUgY29tbWFuZCwgdGhlIHRvb2wgZ2VuZXJhdGVzIGFuIGltcG9ydCBmaWxlLCBwb3B1bGF0ZWQgd2l0aCB0aGUgdW5tb25pdG9yZWQgcmVwbyBkYXRhLCB0byBiZSB1c2VkIHdpdGggdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL2ZlYXR1cmVzL290aGVyLXRvb2xzL3NueWstc2NtLWNvbnRyaWJ1dG9ycy1jb3VudC1jbGktdG9vbC9jcmVhdGluZy1hbmQtdXNpbmctdGhlLWltcG9ydC1maWxlcy5odG1sI3VzaW5nLXRoZS1zbnlrLWFwaS1pbXBvcnQtdG9vbCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrLWFwaS1pbXBvcnQiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigidG9vbCB0byBpbXBvcnQgdGhlIG1pc3NpbmcgcmVwb3MgdG8geW91ciBTbnlrIGFjY291bnQuIiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgdGhlIFNueWsgdG9rZW4gd2FzIGV4cG9ydGVkIGFuZCB0aGUgcmVsYXRlZCBTbnlrIGFjY291bnQgaGFzIGFuIGludGVncmF0aW9uIHNldCBmb3IgdGhlIHNwZWNpZmljIFNDTSB0aGF0IGlzIGJlaW5nIHNjYW5uZWQgYnkgdGhlIHRvb2wsIHRoZSB0b29sIHdpbGwgdHJ5IHRvIGZpbmQgYW5kIG1hdGNoIHRoZSBPcmdJRCBhbmQgSW50ZWdyYXRpb25JRCBmcm9tIFNueWsgYXMgbmVlZGVkIGJ5IHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWstYXBpLWltcG9ydCIpXSksCiAgICAgICAgICBfdm0uX3YoIiB0b29sIGFuZCBhdXRvLWFkZCBpdCB0byB0aGUgaW1wb3J0IGZpbGUuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgYSBTbnlrIHRva2VuIHdhcyBub3QgZXhwb3J0ZWQgb3IgdGhlIHVzZXIgaGFzIG5vIFNueWsgYWNjb3VudCBhcyBvZiB5ZXQsIHRoaXMgZmVhdHVyZSBjYW4gYmUgdXNlZCB0byBtYXAgYWxsIHJlcG9zIGluIHRoZSBTQ00gYW5kIGNyZWF0ZSB0aGUgaW1wb3J0IGZpbGUgdG8gYmUgbGF0ZXIgdXNlZCBieSB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrLWFwaS1pbXBvcnQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvb2wuIEluIHRoaXMgY2FzZSBvciBpbiBhIGNhc2UgdGhhdCB0aGUgdG9vbCBjYW4gbm90IGZpbmQgYW4gT3JnSUQgb3IgSW50ZWdyYXRpb25JRCwgaXQgcHJvbXB0cyB0aGUgdXNlciB0byBzdXBwbHkgdGhlc2UgSURzIChvbmNlKSBhbmQgYXV0by1hZGRzIHRoZW0gdG8gdGhlIGltcG9ydCBmaWxlLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInRoZS1mbGFncyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdGhlLWZsYWdzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUaGUgRmxhZ3MiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW19jKCJjb2RlIiwgW192bS5fdigiaW1wb3J0Q29uZkRpciIpXSldKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gVGhpcyBmbGFnIGJvdGggaW5kaWNhdGVzIHRoYXQgYSBxdWVyeSBmb3IgdW5tb25pdG9yZWQgcmVwb3Mgc2hvdWxkIGJlIG1hZGUgYW5kIGV4cGVjdHMgYSBwYXRoIHRvIGEgZm9sZGVyICh3aXRoIHdyaXRlIHByaXZpbGVnZXMpIHRvIGNyZWF0ZSB0aGUganNvbiBpbXBvcnQgZmlsZXMgaW4uIEZvciBleGFtcGxlIDoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgInNueWstc2NtLWNvbnRyaWJ1dG9ycy1jb3VudCA8Y29tbWFuZD4gLS10b2tlbiBUT0tFTiAtLSBpbXBvcnRDb25mRGlyIC9zbnlrL2ltcG9ydC9cbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJ5IGRlZmF1bHQsIHRoZSBhYm92ZSBjb21tYW5kIHBvcHVsYXRlcyB0aGUganNvbiBpbXBvcnQgZmlsZXMgd2l0aCBhbGwgdHlwZSBvZiB1bm1vbml0b3JlZCByZXBvcyBmb3VuZCB3aGVuIHNjYW5uaW5nIHRoZSBTQ00uIFRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW19jKCJjb2RlIiwgW192bS5fdigiaW1wb3J0RmlsZVJlcG9UeXBlIildKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgZmxhZyBjYW4gYmUgc2V0IHdpdGggdGhlIHZhbHVlcyBvZiAiYWxsIiwgInByaXZhdGUiIG9yICJwdWJsaWMiIChjYXNlICcKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJpbnNlbnNpdGl2ZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIikgdG8gZmlsbCB0aGUgaW1wb3J0IGZpbGUgd2l0aCBvbmx5IHRoZSBnaXZlbiByZXBvcyB0eXBlIGRhdGEuIEZvciBleGFtcGxlOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAic255ay1zY20tY29udHJpYnV0b3JzLWNvdW50IDxjb21tYW5kPiAtLXRva2VuIFRPS0VOIC0tIGltcG9ydENvbmZEaXIgL3NueWsvaW1wb3J0LyAtLWltcG9ydEZpbGVSZXBvVHlwZSAncHJpdmF0ZSdcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5UaGUgaW1wb3J0IGZpbGUgcmVxdWlyZXMgYW4gT3JnSUQgYW5kIEludGVncmF0aW9uSUQgZnJvbSB0aGUgdXNlciBpbiBvcmRlciB0byBpbXBvcnQgdGhlbSB0byB0aGUgcmlnaHQgb3JnYW5pemF0aW9uIGFuZCBpbnRlZ3JhdGlvbiBhdCBTbnlrLicKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgdG9vbCB3aWxsIHRyeSBhbmQgZmluZCB0aGVzZSB0d28gdmFsdWVzIGZyb20gU255ayAocHJvdmlkZWQgdGhhdCBhIFNOWUtfVE9LRU4gd2FzIGV4cG9ydGVkIGFuZCB0aGF0IHRoZSBvcmcgbWFwcGluZyBhdCBTbnlrIGlzIG1pcnJvcmVkIHRvIHRoYXQgb2YgdGhlIFNDTSkgYW5kIGlmIHRoZSB3ZSBjYW4gbm90IGZpbmQgdGhvc2UgdmFsdWVzLCB0aGUgdXNlciB3aWxsIGJlIHByb21wdGVkIHRvIHN1cHBseSB0aGVtIGluIHRoZSBjb21tYW5kIGxpbmUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uY2UgdGhlIHVzZXIgaGFzIHN0YXRlZCB0aGUgdmFsdWVzIGZvciBPcmdJRCBhbmQgSW50ZWdyYXRpb25JRCBvbmNlLCB0aGVzZSB2YWx1ZXMgd2lsbCBiZSBzZXQgZm9yIEFMTCB0aGUgZW50cmllcyBpbiB0aGUgaW1wb3J0IGZpbGUgKG1lYW5pbmcgdGhhdCBhbGwgdGhlIGltcG9ydGVkIHJlcG9zIHdpbGwgZ2V0IHVuZGVyIHRoZSBzYW1lIG9yZyBpbiBTbnlrKS5cbnslIGVuZGhpbnQgJX0iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidXNpbmctdGhlLXNueWstYXBpLWltcG9ydC10b29sIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN1c2luZy10aGUtc255ay1hcGktaW1wb3J0LXRvb2wiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVXNpbmcgdGhlIFNueWsgQVBJIGltcG9ydCB0b29sIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBzbnlrLWFwaS1pbXBvcnQgdG9vbCBoZWxwcyB1c2VycyBtb2RlcmF0ZWx5IGltcG9ydCBuZXcgcmVwb3MgaW4gdGhlaXIgU255ayBhY2NvdW50IGluIGEgc2VjdXJlIGFuZCByb2J1c3Qgd2F5LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIHRvb2wgcmVxdWlyZXMgYSBqc29uIGZpbGUgd2l0aCB0aGUgcmVwb3MgZGF0YSB0byBiZSBpbXBvcnRlZCwgdGhpcyBmaWxlIGNhbiBiZSBhdXRvLWdlbmVyYXRlZCBieSB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWstY29udHJpYnV0b3JzLWNvdW50IildKSwKICAgICAgICBfdm0uX3YoIiB0b29sIGFzIGRlc2NyaWJlZCBhYm92ZS4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibW9yZS1pbmZvcm1hdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbW9yZS1pbmZvcm1hdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBNb3JlIGluZm9ybWF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJHZXQgZmFtaWxpYXIgd2l0aCB0aGUgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWstYXBpLWltcG9ydCIpXSksCiAgICAgICAgX3ZtLl92KCIgdG9vbCB3aXRoIHRoZXNlIGxpbmtzOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc255ay10ZWNoLXNlcnZpY2VzL3NueWstYXBpLWltcG9ydCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiaHR0cHM6Ly9naXRodWIuY29tL3NueWstdGVjaC1zZXJ2aWNlcy9zbnlrLWFwaS1pbXBvcnQiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3NueWstdGVjaC1zZXJ2aWNlcy9zbnlrLWFwaS1pbXBvcnQvYmxvYi9tYXN0ZXIvZG9jcy9pbXBvcnQubWQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3NueWstdGVjaC1zZXJ2aWNlcy9zbnlrLWFwaS1pbXBvcnQvYmxvYi9tYXN0ZXIvZG9jcy9pbXBvcnQubWQiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}