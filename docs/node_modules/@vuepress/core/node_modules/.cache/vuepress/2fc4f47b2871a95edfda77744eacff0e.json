{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/user-docs-copy-guide/parsing-an-input-file.md?vue&type=template&id=9975af86&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/user-docs-copy-guide/parsing-an-input-file.md","mtime":1644439893065},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}