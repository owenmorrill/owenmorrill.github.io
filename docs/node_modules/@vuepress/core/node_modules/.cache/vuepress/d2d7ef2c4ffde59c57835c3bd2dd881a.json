{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/examples.md?vue&type=template&id=d604ab36&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/products/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/examples.md","mtime":1644439893064},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PGgxIGlkPSJleGFtcGxlcy1vZi1jdXN0b20tcnVsZXMiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZXhhbXBsZXMtb2YtY3VzdG9tLXJ1bGVzIj4jPC9hPiBFeGFtcGxlcyBvZiBjdXN0b20gcnVsZXM8L2gxPgo8aDMgaWQ9ImV4YW1wbGUtb2YtYS1zaW1wbGUtYm9vbGVhbi1ydWxlIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGUtb2YtYS1zaW1wbGUtYm9vbGVhbi1ydWxlIj4jPC9hPiBFeGFtcGxlIG9mIGEgc2ltcGxlIGJvb2xlYW4gcnVsZTwvaDM+CjxwPnslIGhpbnQgc3R5bGU9JnF1b3Q7aW5mbyZxdW90OyAlfQpZb3UgY2FuIGZpbmQgYSBmdWxsIGV4YW1wbGUgb2YgdGhpcyBndWlkZSBpbiA8YSBocmVmPSJodHRwczovL3BsYXkub3BlbnBvbGljeWFnZW50Lm9yZy9wL1NDWW5kQmpXeGgiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPnRoaXMgT1BBIFBsYXlncm91bmQ8T3V0Ym91bmRMaW5rLz48L2E+IGFuZCB0aGUgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3NueWsvY3VzdG9tLXJ1bGVzLWV4YW1wbGUiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPnNueWsvY3VzdG9tLXJ1bGVzLWV4YW1wbGU8T3V0Ym91bmRMaW5rLz48L2E+IHJlcG9zaXRvcnkuCnslIGVuZGhpbnQgJX08L3A+CjxwPkxldOKAmXMgYXNzdW1lIHdlIGhhdmUgZ2VuZXJhdGVkIGEgbmV3IHJ1bGUgPGNvZGU+Q1VTVE9NLVJVTEUtMTwvY29kZT4gdXNpbmcgdGhlIFNESyAoaS5lLiA8Y29kZT5zbnlrLWlhYy1ydWxlcyB0ZW1wbGF0ZSAtLXJ1bGUgQ1VTVE9NLVJVTEUtMTwvY29kZT4pIGFuZCBoYXZlIGEgdmVyeSBzaW1wbGUgZml4dHVyZSBmaWxlIGNvbnRhaW5pbmcgYSBUZXJyYWZvcm0gcmVzb3VyY2U6PC9wPgo8cD57JSBjb2RlIHRpdGxlPSZxdW90O3J1bGVzL0NVU1RPTS1SVUxFLTEvZml4dHVyZXMvZGVuaWVkLnRmJnF1b3Q7ICV9PC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cmVzb3VyY2UgJnF1b3Q7YXdzX3JlZHNoaWZ0X2NsdXN0ZXImcXVvdDsgJnF1b3Q7ZGVuaWVkJnF1b3Q7IHsKICBjbHVzdGVyX2lkZW50aWZpZXIgPSAmcXVvdDt0Zi1yZWRzaGlmdC1jbHVzdGVyJnF1b3Q7CiAgbm9kZV90eXBlICAgICAgICAgID0gJnF1b3Q7ZGMxLmxhcmdlJnF1b3Q7CiAgdGFncyA9IHsKICB9Cn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPHA+Tm93LCB3ZSB3YW50IHRvIG1vZGlmeSB0aGUgZ2VuZXJhdGVkIFJlZ28gdG8gZW5mb3JjZSByZXNvdXJjZXMgdGFnZ2VkIHdpdGggYW4gb3duZXI6PC9wPgo8b2w+CjxsaT5DcmVhdGUgYSB2YXJpYWJsZSA8Y29kZT5bbmFtZV08L2NvZGU+IHRvIHRvIGVudW1lcmF0ZSBhY3Jvc3MgYWxsIG9mIHRoZSA8Y29kZT5hd3NfcmVkc2hpZnRfY2x1c3RlcjwvY29kZT4gcmVzb3VyY2VzLiBUaGlzIHZhcmlhYmxlIGNhbiBiZSBuYW1lZCBhbnl0aGluZyB5b3UgbGlrZSAoZS5nLiA8Y29kZT5pPC9jb2RlPiwgPGNvZGU+ajwvY29kZT4sIDxjb2RlPm5hbWU8L2NvZGU+LCBldGMuKS48L2xpPgo8bGk+U3RvcmUgdGhpcyBpbnRvIHRoZSByZXNvdXJjZSB2YXJpYWJsZSBieSBhc3NpZ25pbmcgdGhlIHZhbHVlIHRvIGl0IHdpdGggYSB3YWxydXMgb3BlcmF0b3IgPGNvZGU+Oj08L2NvZGU+OyBlLmcuIDxjb2RlPnJlc291cmNlIDo9IGlucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyW25hbWVdPC9jb2RlPjwvbGk+CjxsaT5DaGVjayBpZiB0aGUgb3duZXIgdGFnIGV4aXN0cyBmb3IgZWFjaCByZXNvdXJjZTsgdG8gZG8gdGhhdCwgY2hlY2sgaWYgdGhlIHBhdGggPGNvZGU+cmVzb3VyY2UudGFncy5vd25lcjwvY29kZT5pcyBkZWZpbmVkLiBJZiBpdCBpcyB1bmRlZmluZWQsIGl0IHdpbGwgZXZhbHVhdGUgdG8gdW5kZWZpbmVkLiBTbywgdXNlIHRoZSA8Y29kZT5OT1Q8L2NvZGU+IGtleXdvcmQgaW4gZnJvbnQgb2YgaXQsIHdoaWNoIHdpbGwgZXZhbHVhdGUgdG8gPGNvZGU+VFJVRTwvY29kZT47IGUuZy48Y29kZT5ub3QgcmVzb3VyY2UudGFncy5vd25lcjwvY29kZT48L2xpPgo8L29sPgo8cD5UaGUgbW9kaWZpZWQgUmVnbyBpczo8L3A+CjxwPnslIGNvZGUgdGl0bGU9JnF1b3Q7cnVsZXMvQ1VTVE9NLVJVTEUtMS9tYWluLnJlZ28mcXVvdDsgJX08L3A+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlIHYtcHJlIGNsYXNzPSJsYW5ndWFnZS10ZXh0Ij48Y29kZT5wYWNrYWdlIHJ1bGVzCgpkZW55W21zZ10gewogICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV0KICAgIG5vdCByZXNvdXJjZS50YWdzLm93bmVyCgogICAgbXNnIDo9IHsKICAgICAgICAmcXVvdDtwdWJsaWNJZCZxdW90OzogJnF1b3Q7Q1VTVE9NLVJVTEUtMSZxdW90OywKICAgICAgICAmcXVvdDt0aXRsZSZxdW90OzogJnF1b3Q7TWlzc2luZyBhbiBvd25lciBmcm9tIHRhZyZxdW90OywKICAgICAgICAmcXVvdDtzZXZlcml0eSZxdW90OzogJnF1b3Q7bWVkaXVtJnF1b3Q7LAogICAgICAgICZxdW90O21zZyZxdW90Ozogc3ByaW50ZigmcXVvdDtpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3Rlclslc10udGFncyZxdW90OywgW25hbWVdKSwKICAgICAgICAmcXVvdDtpc3N1ZSZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O2ltcGFjdCZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O3JlbWVkaWF0aW9uJnF1b3Q7OiAmcXVvdDsmcXVvdDssCiAgICAgICAgJnF1b3Q7cmVmZXJlbmNlcyZxdW90OzogW10sCiAgICB9Cn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPHA+eyUgaGludCBzdHlsZT0mcXVvdDtpbmZvJnF1b3Q7ICV9ClRvIHVuZGVyc3RhbmQgaG93IHRoZSBSZWdvIGNvZGUgZXZhbHVhdGVzIHRoZSBUZXJyYWZvcm0gZmlsZSBwcm92aWRlZCBlYXJsaWVyLCBoYXZlIGEgbG9vayBhdCBob3cgdGhlIFNESyBpcyBhYmxlIHRvIDxSb3V0ZXJMaW5rIHRvPSIvZ3VpZGUvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2N1c3RvbS1ydWxlcy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC10aGUtc2RrL3BhcnNpbmctYW4taW5wdXQtZmlsZS5odG1sIj5wYXJzZSBhIGZpeHR1cmUgZmlsZTwvUm91dGVyTGluaz4gaW50byBKU09OLgp7JSBlbmRoaW50ICV9PC9wPgo8cD57JSBoaW50IHN0eWxlPSZxdW90O3dhcm5pbmcmcXVvdDsgJX0KV2UgcmVjb21tZW5kIGFsd2F5cyB2YWxpZGF0aW5nIHRoYXQgeW91ciBydWxlIGlzIGNvcnJlY3QgYnkgPFJvdXRlckxpbmsgdG89Ii9ndWlkZS9wcm9kdWN0cy9zbnlrLWluZnJhc3RydWN0dXJlLWFzLWNvZGUvY3VzdG9tLXJ1bGVzL2dldHRpbmctc3RhcnRlZC13aXRoLXRoZS1zZGsvdGVzdGluZy1hLXJ1bGUuaHRtbCI+dXBkYXRpbmcgYW5kIHJ1bm5pbmcgdGhlIHVuaXQgdGVzdHM8L1JvdXRlckxpbms+Lgp7JSBlbmRoaW50ICV9PC9wPgo8cD5UaGUgdGVzdCBmb3IgdGhpcyBydWxlIHZlcmlmaWVzIHRoYXQgdGhlIFJlZ28gcnVsZSBpcyBhYmxlIHRvIGlkZW50aWZ5IHRoYXQgdGhlIGZpeHR1cmUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGd1aWRlIGlzIGludmFsaWQ6PC9wPgo8cD57JSBjb2RlIHRpdGxlPSZxdW90O3J1bGVzL0NVU1RPTS1SVUxFLTEvbWFpbl90ZXN0LnJlZ28mcXVvdDsgJX08L3A+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlIHYtcHJlIGNsYXNzPSJsYW5ndWFnZS10ZXh0Ij48Y29kZT5wYWNrYWdlIHJ1bGVzCgppbXBvcnQgZGF0YS5saWIKaW1wb3J0IGRhdGEubGliLnRlc3RpbmcKCnRlc3RfQ1VTVE9NX1JVTEVfMSB7CgkjIGFycmF5IGNvbnRhaW5pbmcgdGVzdCBjYXNlcyB3aGVyZSB0aGUgcnVsZSBpcyBhbGxvd2VkCglhbGxvd2VkX3Rlc3RfY2FzZXMgOj0gW3sKCQkmcXVvdDt3YW50X21zZ3MmcXVvdDs6IFtdLAoJCSZxdW90O2ZpeHR1cmUmcXVvdDs6ICZxdW90O2FsbG93ZWQudGYmcXVvdDssCgl9XQoKCSMgYXJyYXkgY29udGFpbmluZyBjYXNlcyB3aGVyZSB0aGUgcnVsZSBpcyBkZW5pZWQKCWRlbmllZF90ZXN0X2Nhc2VzIDo9IFt7CgkJJnF1b3Q7d2FudF9tc2dzJnF1b3Q7OiBbJnF1b3Q7aW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbZGVuaWVkXS50YWdzJnF1b3Q7XSwKCQkmcXVvdDtmaXh0dXJlJnF1b3Q7OiAmcXVvdDtkZW5pZWQudGYmcXVvdDssCgl9XQoKCXRlc3RfY2FzZXMgOj0gYXJyYXkuY29uY2F0KGFsbG93ZWRfdGVzdF9jYXNlcywgZGVuaWVkX3Rlc3RfY2FzZXMpCgl0ZXN0aW5nLmV2YWx1YXRlX3Rlc3RfY2FzZXMoJnF1b3Q7Q1VTVE9NLVJVTEUtMSZxdW90OywgJnF1b3Q7Li9ydWxlcy9DVVNUT00tUlVMRS0xL2ZpeHR1cmVzJnF1b3Q7LCB0ZXN0X2Nhc2VzKQp9CjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPnslIGVuZGNvZGUgJX08L3A+CjxoMyBpZD0iZXhhbXBsZS13aXRoLWxvZ2ljYWwtYW5kIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2V4YW1wbGUtd2l0aC1sb2dpY2FsLWFuZCI+IzwvYT4gRXhhbXBsZSB3aXRoIGxvZ2ljYWwgQU5EPC9oMz4KPHA+TGV04oCZcyB0cnkgYW5kIGV4dGVuZCB0aGUgZXhhbXBsZSBhYm92ZSBhbmQgdXBkYXRlIHRoZSBydWxlIHRvIGFsbG93IGFsbCBjYXNlcyB0aGF0IHN1ZmZpY2UgdHdvIGNvbmRpdGlvbnM6PC9wPgo8b2w+CjxsaT5BIHJlc291cmNlIGhhcyBhbiDigJxvd25lcuKAnSB0YWc8YnI+CjxzdHJvbmc+QU5EPC9zdHJvbmc+PC9saT4KPGxpPkEgcmVzb3VyY2UgaGFzIGEg4oCcZGVzY3JpcHRpb27igJ0gdGFnPC9saT4KPC9vbD4KPHA+VG8gdGVzdCB0aGlzIG5ldyBjb25kaXRpb24sIHdlIGdlbmVyYXRlIGEgbmV3IHJ1bGUgPGNvZGU+Q1VTVE9NLVJVTEUtMjwvY29kZT4gdXNpbmcgdGhlIDxjb2RlPnRlbXBsYXRlPC9jb2RlPiBjb21tYW5kIGFuZCB3cml0ZSB0aGUgZm9sbG93aW5nIGZpeHR1cmUgZmlsZTo8L3A+CjxwPnslIGNvZGUgdGl0bGU9JnF1b3Q7cnVsZXMvQ1VTVE9NLVJVTEUtMi9maXh0dXJlcy9kZW5pZWQudGYmcXVvdDsgJX08L3A+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlIHYtcHJlIGNsYXNzPSJsYW5ndWFnZS10ZXh0Ij48Y29kZT5yZXNvdXJjZSAmcXVvdDthd3NfcmVkc2hpZnRfY2x1c3RlciZxdW90OyAmcXVvdDtkZW5pZWQmcXVvdDsgewogIGNsdXN0ZXJfaWRlbnRpZmllciA9ICZxdW90O3RmLXJlZHNoaWZ0LWNsdXN0ZXImcXVvdDsKICBub2RlX3R5cGUgICAgICAgICAgPSAmcXVvdDtkYzEubGFyZ2UmcXVvdDsKICB0YWdzID0gewogICAgb3duZXIgPSAmcXVvdDt0ZWFtLTEyMyZxdW90OwogIH0KfQo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48cD57JSBlbmRjb2RlICV9PC9wPgo8cD5Kb2luaW5nIG11bHRpcGxlIGV4cHJlc3Npb25zIHRvZ2V0aGVyIGV4cHJlc3NlcyBsb2dpY2FsIDxjb2RlPkFORDwvY29kZT4uIDwvcD4KPHVsPgo8bGk+WW91IGNhbiBkbyB0aGlzIHdpdGggdGhlIDxjb2RlPjs8L2NvZGU+IG9wZXJhdG9yLjwvbGk+CjxsaT5PciwgeW91IGNhbiBvbWl0IHRoZSA8Y29kZT47PC9jb2RlPiAoPGNvZGU+QU5EPC9jb2RlPikgb3BlcmF0b3IgYnkgc3BsaXR0aW5nIGV4cHJlc3Npb25zIGFjcm9zcyBtdWx0aXBsZSBsaW5lcy48L2xpPgo8L3VsPgo8cD57JSBoaW50IHN0eWxlPSZxdW90O2luZm8mcXVvdDsgJX0KVGhlIGxvZ2ljYWwgQU5EIGlzIGNvdmVyZWQgYWxzbyBpbiB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3BlbnBvbGljeWFnZW50Lm9yZy9kb2NzL2xhdGVzdC8jZXhwcmVzc2lvbnMtbG9naWNhbC1hbmQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPk9QQSBkb2N1bWVudGF0aW9uPE91dGJvdW5kTGluay8+PC9hPi4KeyUgZW5kaGludCAlfTwvcD4KPHA+eyUgY29kZSB0aXRsZT0mcXVvdDtydWxlcy9DVVNUT00tUlVMRS0yL21haW4ucmVnbyZxdW90OyAlfTwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnBhY2thZ2UgcnVsZXMKCmF3c19yZWRzaGlmdF9jbHVzdGVyX3RhZ3NfcHJlc2VudChyZXNvdXJjZSkgewogICAgcmVzb3VyY2UudGFncy5vd25lcgogICAgcmVzb3VyY2UudGFncy5kZXNjcmlwdGlvbgp9CgpkZW55W21zZ10gewogICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV0KICAgIG5vdCBhd3NfcmVkc2hpZnRfY2x1c3Rlcl90YWdzX3ByZXNlbnQocmVzb3VyY2UpCiAgICBtc2cgOj0gewogICAgICAgICZxdW90O3B1YmxpY0lkJnF1b3Q7OiAmcXVvdDtDVVNUT00tUlVMRS0yJnF1b3Q7LAogICAgICAgICZxdW90O3RpdGxlJnF1b3Q7OiAmcXVvdDtNaXNzaW5nIGEgZGVzY3JpcHRpb24gYW5kIGFuIG93bmVyIGZyb20gdGhlIHRhZyZxdW90OywKICAgICAgICAmcXVvdDtzZXZlcml0eSZxdW90OzogJnF1b3Q7bWVkaXVtJnF1b3Q7LAogICAgICAgICZxdW90O21zZyZxdW90Ozogc3ByaW50ZigmcXVvdDtpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3Rlclslc10udGFncyZxdW90OywgW25hbWVdKSwKICAgICAgICAmcXVvdDtpc3N1ZSZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O2ltcGFjdCZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O3JlbWVkaWF0aW9uJnF1b3Q7OiAmcXVvdDsmcXVvdDssCiAgICAgICAgJnF1b3Q7cmVmZXJlbmNlcyZxdW90OzogW10sCiAgICB9Cn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPHA+eyUgaGludCBzdHlsZT0mcXVvdDt3YXJuaW5nJnF1b3Q7ICV9CldlIHJlY29tbWVuZCBhbHdheXMgdmFsaWRhdGluZyB0aGF0IHlvdXIgcnVsZSBpcyBjb3JyZWN0IGJ5IDxSb3V0ZXJMaW5rIHRvPSIvZ3VpZGUvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2N1c3RvbS1ydWxlcy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC10aGUtc2RrL3Rlc3RpbmctYS1ydWxlLmh0bWwiPnVwZGF0aW5nIGFuZCBydW5uaW5nIHRoZSB1bml0IHRlc3RzPC9Sb3V0ZXJMaW5rPi4KeyUgZW5kaGludCAlfTwvcD4KPHA+VGhlIHRlc3QgZm9yIHRoaXMgcnVsZSB3aWxsIGxvb2sgdGhlIHNhbWUgYXMgdGhlIG9uZSBmb3IgPGNvZGU+Q1VTVE9NLVJVTEUtMTwvY29kZT4sIGJ1dCB0aGUgbmFtZSBvZiB0aGUgdGVzdCBhbmQgdGhlIGZpcnN0IHR3byBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSA8Y29kZT50ZXN0aW5nLmV2YWx1YXRlX3Rlc3RfY2FzZXM8L2NvZGU+IGZ1bmN0aW9uIHdpbGwgZGlmZmVyOjwvcD4KPHA+eyUgY29kZSB0aXRsZT0mcXVvdDtydWxlcy9DVVNUT00tUlVMRS0yL21haW5fdGVzdC5yZWdvJnF1b3Q7ICV9PC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cGFja2FnZSBydWxlcwoKaW1wb3J0IGRhdGEubGliCmltcG9ydCBkYXRhLmxpYi50ZXN0aW5nCgp0ZXN0X0NVU1RPTV9SVUxFXzIgewoJIyBhcnJheSBjb250YWluaW5nIHRlc3QgY2FzZXMgd2hlcmUgdGhlIHJ1bGUgaXMgYWxsb3dlZAoJYWxsb3dlZF90ZXN0X2Nhc2VzIDo9IFt7CgkJJnF1b3Q7d2FudF9tc2dzJnF1b3Q7OiBbXSwKCQkmcXVvdDtmaXh0dXJlJnF1b3Q7OiAmcXVvdDthbGxvd2VkLnRmJnF1b3Q7LAoJfV0KCSMgYXJyYXkgY29udGFpbmluZyBjYXNlcyB3aGVyZSB0aGUgcnVsZSBpcyBkZW5pZWQKCWRlbmllZF90ZXN0X2Nhc2VzIDo9IFt7CgkJJnF1b3Q7d2FudF9tc2dzJnF1b3Q7OiBbJnF1b3Q7aW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbZGVuaWVkXS50YWdzJnF1b3Q7XSwKCQkmcXVvdDtmaXh0dXJlJnF1b3Q7OiAmcXVvdDtkZW5pZWQudGYmcXVvdDssCgl9XQoJdGVzdF9jYXNlcyA6PSBhcnJheS5jb25jYXQoYWxsb3dlZF90ZXN0X2Nhc2VzLCBkZW5pZWRfdGVzdF9jYXNlcykKCXRlc3RpbmcuZXZhbHVhdGVfdGVzdF9jYXNlcygmcXVvdDtDVVNUT00tUlVMRS0yJnF1b3Q7LCAmcXVvdDsuL3J1bGVzL0NVU1RPTS1SVUxFLTIvZml4dHVyZXMmcXVvdDssIHRlc3RfY2FzZXMpCn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPGgzIGlkPSJleGFtcGxlLXdpdGgtbG9naWNhbC1vciI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNleGFtcGxlLXdpdGgtbG9naWNhbC1vciI+IzwvYT4gRXhhbXBsZSB3aXRoIGxvZ2ljYWwgT1I8L2gzPgo8cD5XZSBjYW4gYWxzbyByZXdyaXRlIHRoZSBydWxlIGFib3ZlIGJ5IGNvbWJpbmluZyB0aGUgPGNvZGU+Tk9UPC9jb2RlPiBvcGVyYXRvciB3aXRoIHRoZSBPUiBmdW5jdGlvbmFsaXR5LjwvcD4KPHA+TGV04oCZcyB1cGRhdGUgdGhlIGV4YW1wbGUgaW4gYSBuZXcgcnVsZSA8Y29kZT5DVVNUT00tUlVMRS0zPC9jb2RlPiwgdG8gZGVueSBhbGwgY2FzZXMgdGhhdCBmYWlsIDxzdHJvbmc+ZWl0aGVyPC9zdHJvbmc+IG9mIHRoZSB0d28gY29uZGl0aW9uczsgd2Ugd2FudCB0byBkZW55IGFsbCA8Y29kZT5hd3NfcmVkc2hpZnRfY2x1c3RlcjwvY29kZT4gcmVzb3VyY2VzIHRoYXQgYXJlIG1pc3NpbmcgZWl0aGVyOjwvcD4KPG9sPgo8bGk+YW4g4oCcb3duZXLigJ0gdGFnICwgT1I8L2xpPgo8bGk+QSDigJxkZXNjcmlwdGlvbuKAnSB0YWc8L2xpPgo8L29sPgo8cD5Gb3IgdGhpcywgd2Ugd2lsbCB1c2UgdHdvIG5ldyBmaXh0dXJlIGZpbGVzLCBvbmUgZm9yIGVhY2ggY2FzZTo8L3A+CjxwPnslIGNvZGUgdGl0bGU9JnF1b3Q7cnVsZXMvQ1VTVE9NLVJVTEUtMy9maXh0dXJlcy9kZW5pZWQxLnRmJnF1b3Q7ICV9PC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cmVzb3VyY2UgJnF1b3Q7YXdzX3JlZHNoaWZ0X2NsdXN0ZXImcXVvdDsgJnF1b3Q7ZGVuaWVkMSZxdW90OyB7CiAgY2x1c3Rlcl9pZGVudGlmaWVyID0gJnF1b3Q7dGYtcmVkc2hpZnQtY2x1c3RlciZxdW90OwogIG5vZGVfdHlwZSAgICAgICAgICA9ICZxdW90O2RjMS5sYXJnZSZxdW90OwogIHRhZ3MgPSB7CiAgICBvd25lciA9ICZxdW90O3RlYW0tMTIzQGNvcnAtZG9tYWluLmNvbSZxdW90OwogIH0KfQo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48cD57JSBlbmRjb2RlICV9PC9wPgo8cD57JSBjb2RlIHRpdGxlPSZxdW90O3J1bGVzL0NVU1RPTS1SVUxFLTMvZml4dHVyZXMvZGVuaWVkMi50ZyZxdW90OyAlfTwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnJlc291cmNlICZxdW90O2F3c19yZWRzaGlmdF9jbHVzdGVyJnF1b3Q7ICZxdW90O2RlbmllZDImcXVvdDsgewogIGNsdXN0ZXJfaWRlbnRpZmllciA9ICZxdW90O3RmLXJlZHNoaWZ0LWNsdXN0ZXImcXVvdDsKICBub2RlX3R5cGUgICAgICAgICAgPSAmcXVvdDtkYzEubGFyZ2UmcXVvdDsKICB0YWdzID0gewogICAgZGVzY3JpcHRpb24gPSAmcXVvdDtkZXNjcmlwdGlvbiZxdW90OywKICB9Cn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPHA+VG8gZXhwcmVzcyBsb2dpY2FsIE9SIGluIFJlZ28sIHdlIGNhbiBkZWZpbmUgbXVsdGlwbGUgcnVsZXMgb3IgZnVuY3Rpb25zIHdpdGggdGhlIHNhbWUgbmFtZS4gVGhpcyBpcyBhbHNvIGRlc2NyaWJlZCBpbiB0aGUgT1BBIGRvY3VtZW50YXRpb24gZm9yPGEgaHJlZj0iaHR0cHM6Ly93d3cub3BlbnBvbGljeWFnZW50Lm9yZy9kb2NzL2xhdGVzdC8jbG9naWNhbC1vciIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+IExvZ2ljYWwgT1I8T3V0Ym91bmRMaW5rLz48L2E+LjwvcD4KPHA+Rmlyc3QsIHdlIHdpbGwgYWRkIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGltcGxlbWVudCB0aGUgPGNvZGU+Tk9UPC9jb2RlPiBmb3IgZWFjaCB0YWcuIFRoZW4sIHdlIHdpbGwgY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggdGhlIHJlc291cmNlOjwvcD4KPHA+eyUgY29kZSB0aXRsZT0mcXVvdDtydWxlcy9DVVNUT00tUlVMRS0zL21haW4ucmVnbyZxdW90OyAlfTwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnBhY2thZ2UgcnVsZXMKCmF3c19yZWRzaGlmdF9jbHVzdGVyX3RhZ3NfbWlzc2luZyhyZXNvdXJjZSkgewogICAgbm90IHJlc291cmNlLnRhZ3Mub3duZXIKfQoKYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKSB7CiAgICBub3QgcmVzb3VyY2UudGFncy5kZXNjcmlwdGlvbgp9CgpkZW55W21zZ10gewogICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV0KICAgIGF3c19yZWRzaGlmdF9jbHVzdGVyX3RhZ3NfbWlzc2luZyhyZXNvdXJjZSkKICAgIG1zZyA6PSB7CiAgICAgICAgJnF1b3Q7cHVibGljSWQmcXVvdDs6ICZxdW90O0NVU1RPTS1SVUxFLTMmcXVvdDssCiAgICAgICAgJnF1b3Q7dGl0bGUmcXVvdDs6ICZxdW90O01pc3NpbmcgYSBkZXNjcmlwdGlvbiBvciBhbiBvd25lciBmcm9tIHRoZSB0YWcmcXVvdDssCiAgICAgICAgJnF1b3Q7c2V2ZXJpdHkmcXVvdDs6ICZxdW90O21lZGl1bSZxdW90OywKICAgICAgICAmcXVvdDttc2cmcXVvdDs6IHNwcmludGYoJnF1b3Q7aW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbJXNdLnRhZ3MmcXVvdDssIFtuYW1lXSksCiAgICAgICAgJnF1b3Q7aXNzdWUmcXVvdDs6ICZxdW90OyZxdW90OywKICAgICAgICAmcXVvdDtpbXBhY3QmcXVvdDs6ICZxdW90OyZxdW90OywKICAgICAgICAmcXVvdDtyZW1lZGlhdGlvbiZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O3JlZmVyZW5jZXMmcXVvdDs6IFtdLAogICAgfQp9CjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPnslIGVuZGNvZGUgJX08L3A+CjxwPlRoaXMgd2lsbCBzdWNjZXNzZnVsbHkgcmV0dXJuIGFsbCB0aGUgcnVsZXMgdGhhdCBkZW55LjwvcD4KPHA+eyUgaGludCBzdHlsZT0mcXVvdDt3YXJuaW5nJnF1b3Q7ICV9CldlIHJlY29tbWVuZCBhbHdheXMgdmFsaWRhdGluZyB0aGF0IHlvdXIgcnVsZSBpcyBjb3JyZWN0IGJ5IDxSb3V0ZXJMaW5rIHRvPSIvZ3VpZGUvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2N1c3RvbS1ydWxlcy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC10aGUtc2RrLyN0ZXN0LWEtY3VzdG9tLXJ1bGUiPnVwZGF0aW5nIGFuZCBydW5uaW5nIHRoZSB1bml0IHRlc3RzPC9Sb3V0ZXJMaW5rPi4KeyUgZW5kaGludCAlfTwvcD4KPHA+VGhlIHRlc3QgZm9yIHRoaXMgcnVsZSB3aWxsIG5vdyBjb250YWluIG11bHRpcGxlIHRlc3QgY2FzZXMsIHRvIHNob3cgdGhhdCB0aGUgbG9naWNhbCBPUiB3b3JrcyBhcyBleHBlY3RlZDo8L3A+CjxwPnslIGNvZGUgdGl0bGU9JnF1b3Q7cnVsZXMvQ1VTVE9NLVJVTEUtMy9tYWluX3Rlc3QucmVnbyZxdW90OyAlfTwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnBhY2thZ2UgcnVsZXMKCmltcG9ydCBkYXRhLmxpYgppbXBvcnQgZGF0YS5saWIudGVzdGluZwoKdGVzdF9DVVNUT01fUlVMRV8zIHsKCSMgYXJyYXkgY29udGFpbmluZyB0ZXN0IGNhc2VzIHdoZXJlIHRoZSBydWxlIGlzIGFsbG93ZWQKCWFsbG93ZWRfdGVzdF9jYXNlcyA6PSBbewoJCSZxdW90O3dhbnRfbXNncyZxdW90OzogW10sCgkJJnF1b3Q7Zml4dHVyZSZxdW90OzogJnF1b3Q7YWxsb3dlZC50ZiZxdW90OywKCX1dCgkjIGFycmF5IGNvbnRhaW5pbmcgY2FzZXMgd2hlcmUgdGhlIHJ1bGUgaXMgZGVuaWVkCglkZW5pZWRfdGVzdF9jYXNlcyA6PSBbewoJCSZxdW90O3dhbnRfbXNncyZxdW90OzogWyZxdW90O2lucHV0LnJlc291cmNlLmF3c19yZWRzaGlmdF9jbHVzdGVyW2RlbmllZDFdLnRhZ3MmcXVvdDtdLAoJCSZxdW90O2ZpeHR1cmUmcXVvdDs6ICZxdW90O2RlbmllZDEudGYmcXVvdDssCgl9LHsKCQkmcXVvdDt3YW50X21zZ3MmcXVvdDs6IFsmcXVvdDtpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3RlcltkZW5pZWQyXS50YWdzJnF1b3Q7XSwKCQkmcXVvdDtmaXh0dXJlJnF1b3Q7OiAmcXVvdDtkZW5pZWQyLnRmJnF1b3Q7LAoJfV0KCXRlc3RfY2FzZXMgOj0gYXJyYXkuY29uY2F0KGFsbG93ZWRfdGVzdF9jYXNlcywgZGVuaWVkX3Rlc3RfY2FzZXMpCgl0ZXN0aW5nLmV2YWx1YXRlX3Rlc3RfY2FzZXMoJnF1b3Q7Q1VTVE9NLVJVTEUtMyZxdW90OywgJnF1b3Q7Li9ydWxlcy9DVVNUT00tUlVMRS0zL2ZpeHR1cmVzJnF1b3Q7LCB0ZXN0X2Nhc2VzKQp9CjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPnslIGVuZGNvZGUgJX08L3A+CjxoMyBpZD0iZXhhbXBsZS13aXRoLXN0cmluZ3MiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZXhhbXBsZS13aXRoLXN0cmluZ3MiPiM8L2E+IEV4YW1wbGUgd2l0aCBzdHJpbmdzPC9oMz4KPHA+TGV04oCZcyBleHRlbmQgdGhpcyBmdXJ0aGVyIGFuZCBhZGQgYSB0aGlyZCBjb25kaXRpb24uIERlbnkgYWxsIHJlc291cmNlcyB0aGF0IGFyZSBtaXNzaW5nIGVpdGhlcjo8L3A+CjxvbD4KPGxpPkFuIOKAnG93bmVy4oCdIHRhZyAsIE9SPC9saT4KPGxpPkEg4oCcZGVzY3JpcHRpb27igJ0gdGFnLCBPUjwvbGk+CjxsaT5UaGUgZW1haWwgb2YgdGhlIG93bmVyIGRvZXMgbm90IGJlbG9uZyB0byB0aGUg4oCcQGNvcnAtZG9tYWluLmNvbeKAnSBkb21haW48L2xpPgo8L29sPgo8cD57JSBjb2RlIHRpdGxlPSZxdW90O3J1bGVzL0NVU1RPTS1SVUxFLTQvbWFpbi5yZWdvJnF1b3Q7ICV9PC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cGFja2FnZSBydWxlcwoKYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKSB7CiAgICBub3QgcmVzb3VyY2UudGFncy5vd25lcgp9Cgphd3NfcmVkc2hpZnRfY2x1c3Rlcl90YWdzX21pc3NpbmcocmVzb3VyY2UpIHsKICAgIG5vdCByZXNvdXJjZS50YWdzLmRlc2NyaXB0aW9uCn0KCmF3c19yZWRzaGlmdF9jbHVzdGVyX3RhZ3NfbWlzc2luZyhyZXNvdXJjZSkgewogICAgbm90IGVuZHN3aXRoKHJlc291cmNlLnRhZ3Mub3duZXIsICZxdW90O0Bjb3JwLWRvbWFpbi5jb20mcXVvdDspCn0KCmRlbnlbbXNnXSB7CiAgICByZXNvdXJjZSA6PSBpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3RlcltuYW1lXQogICAgYXdzX3JlZHNoaWZ0X2NsdXN0ZXJfdGFnc19taXNzaW5nKHJlc291cmNlKQogICAgbXNnIDo9IHsKICAgICAgICAmcXVvdDtwdWJsaWNJZCZxdW90OzogJnF1b3Q7Q1VTVE9NLVJVTEUtNCZxdW90OywKICAgICAgICAmcXVvdDt0aXRsZSZxdW90OzogJnF1b3Q7TWlzc2luZyBhIGRlc2NyaXB0aW9uIGFuZCBhbiBvd25lciBmcm9tIHRhZywgb3Igb3duZXIgdGFnIGRvZXMgbm90IGNvbXBseSB3aXRoIGVtYWlsIHJlcXVpcmVtZW50cyZxdW90OywKICAgICAgICAmcXVvdDtzZXZlcml0eSZxdW90OzogJnF1b3Q7bWVkaXVtJnF1b3Q7LAogICAgICAgICZxdW90O21zZyZxdW90Ozogc3ByaW50ZigmcXVvdDtpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3Rlclslc10udGFncyZxdW90OywgW25hbWVdKSwKICAgICAgICAmcXVvdDtpc3N1ZSZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O2ltcGFjdCZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O3JlbWVkaWF0aW9uJnF1b3Q7OiAmcXVvdDsmcXVvdDssCiAgICAgICAgJnF1b3Q7cmVmZXJlbmNlcyZxdW90OzogW10sCiAgICB9Cn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPHA+eyUgaGludCBzdHlsZT0mcXVvdDt3YXJuaW5nJnF1b3Q7ICV9CldlIHJlY29tbWVuZCBhbHdheXMgdmFsaWRhdGluZyB0aGF0IHlvdXIgcnVsZSBpcyBjb3JyZWN0IGJ5IDxSb3V0ZXJMaW5rIHRvPSIvZ3VpZGUvcHJvZHVjdHMvc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2N1c3RvbS1ydWxlcy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC10aGUtc2RrL3Rlc3RpbmctYS1ydWxlLmh0bWwiPnVwZGF0aW5nIGFuZCBydW5uaW5nIHRoZSB1bml0IHRlc3RzPC9Sb3V0ZXJMaW5rPi4KeyUgZW5kaGludCAlfTwvcD4KPHA+VGhlIHRlc3QgZm9yIHRoaXMgcnVsZSB3aWxsIGxvb2sgdmVyeSBzaW1pbGFyIHRvIHRoZSBvbmVzIGZyb20gcHJldmlvdXMgZXhhbXBsZSBhbmQgd2lsbCBhbHNvIHJlcXVpcmUgaXRzIG93biBmaXh0dXJlIGZpbGUuPC9wPgo8aDMgaWQ9ImV4YW1wbGUtd2l0aC14b3IiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZXhhbXBsZS13aXRoLXhvciI+IzwvYT4gRXhhbXBsZSB3aXRoIFhPUjwvaDM+CjxwPk5vdyBsZXTigJlzIHNheSB0aGF0IHdlIHdhbnQgdG8gYWRkIG1vcmUgY29tcGxleGl0eSBhbmQgY2hlY2sgdGhlIGZvbGxvd2luZzo8L3A+Cjx1bD4KPGxpPklmIHRoZSB0YWcgdHlwZSBpcyBhIOKAnHVzZXLigJ0sIHRoZW4gd2Ugd2FudCB0aGUgdGFnIOKAnGVtYWls4oCdIHRvIGV4aXN0IGFzIHdlbGwuPC9saT4KPGxpPklmIG5vdCAoYXNzdW1lIHRoZSBvdGhlciB0eXBlIGlzIGEg4oCcc2VydmljZeKAnSksIHdlIHdhbnQgaXQgdG8gaGF2ZSBhIHNlcnZpY2VEZXNjcmlwdGlvbi48L2xpPgo8bGk+VGhlc2UgdHdvIHdpbGwgYmUgbXV0dWFsbHkgZXhjbHVzaXZlOyBpZiB0aGUgZmlyc3QgY29uZGl0aW9uIGFwcGxpZXMsIHRoZSBzZWNvbmQgb25lIHNob3VsZG7igJl0LCBhbmQgdmljZSB2ZXJzYS48L2xpPgo8L3VsPgo8dGFibGU+Cjx0aGVhZD4KPHRyPgo8dGg+VHlwZTwvdGg+Cjx0aD5FbWFpbDwvdGg+Cjx0aD5TZXJ2aWNlRGVzY3JpcHRpb248L3RoPgo8L3RyPgo8L3RoZWFkPgo8dGJvZHk+Cjx0cj4KPHRkPlVzZXI8L3RkPgo8dGQ+WUVTPC90ZD4KPHRkPk5PPC90ZD4KPC90cj4KPHRyPgo8dGQ+U2VydmljZTwvdGQ+Cjx0ZD5OTzwvdGQ+Cjx0ZD5ZRVM8L3RkPgo8L3RyPgo8L3Rib2R5Pgo8L3RhYmxlPgo8cD5UbyBkbyB0aGlzLCB3ZSBhcmUgZ29pbmcgdG8gcmVmYWN0b3Igb3VyIGNvZGUgdG8gdXNlIGEgY2hlY2tUYWdzIGhlbHBlciBmdW5jdGlvbi4gVGhpcyBjYW4gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSB0YWdzLCBidXQgYWxzbyBjaGVjayBmb3IgdGhlIHR3byBjb25kaXRpb25zIGFib3ZlIHdpdGggYW4gT1IuPC9wPgo8cD57JSBjb2RlIHRpdGxlPSZxdW90O3J1bGVzL0NVU1RPTS1SVUxFLTUvbWFpbi5yZWdvJnF1b3Q7ICV9PC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cGFja2FnZSBydWxlcwoKY2hlY2tUYWdzKHJlc291cmNlKXsKICAgIHJlc291cmNlLnRhZ3MudHlwZSA9PSAmcXVvdDt1c2VyJnF1b3Q7CiAgICBub3QgcmVzb3VyY2UudGFncy5lbWFpbAp9CgpjaGVja1RhZ3MocmVzb3VyY2UpewogICAgcmVzb3VyY2UudGFncy50eXBlID09ICZxdW90O3NlcnZpY2UmcXVvdDsKICAgIG5vdCByZXNvdXJjZS50YWdzLnNlcnZpY2VEZXNjcmlwdGlvbgp9CgpjaGVja1RhZ3MocmVzb3VyY2UpewogICAgY291bnQocmVzb3VyY2UudGFncykgPT0gMAp9CgpkZW55W21zZ10gewogICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV0KICAgIGNoZWNrVGFncyhyZXNvdXJjZSkgICAKCiAgICBtc2cgOj0gewogICAgICAgICZxdW90O3B1YmxpY0lkJnF1b3Q7OiAmcXVvdDtDVVNUT00tUlVMRS01JnF1b3Q7LAogICAgICAgICZxdW90O3RpdGxlJnF1b3Q7OiAmcXVvdDtDb21wbGV4IHJ1bGUmcXVvdDssCiAgICAgICAgJnF1b3Q7c2V2ZXJpdHkmcXVvdDs6ICZxdW90O21lZGl1bSZxdW90OywKICAgICAgICAmcXVvdDttc2cmcXVvdDs6IHNwcmludGYoJnF1b3Q7aW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbJXZdLnRhZ3MmcXVvdDssIFtuYW1lXSksCiAgICAgICAgJnF1b3Q7aXNzdWUmcXVvdDs6ICZxdW90OyZxdW90OywKICAgICAgICAmcXVvdDtpbXBhY3QmcXVvdDs6ICZxdW90OyZxdW90OywKICAgICAgICAmcXVvdDtyZW1lZGlhdGlvbiZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O3JlZmVyZW5jZXMmcXVvdDs6IFtdLAogICAgfQp9CjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPnslIGVuZGNvZGUgJX08L3A+CjxwPlRvIGNvbnZlcnQgdGhpcyB0byBhbiBYT1Igd2UgY2FuIHVzZSBhbiA8Y29kZT5lbHNlPC9jb2RlPiBydWxlOjwvcD4KPHA+eyUgY29kZSB0aXRsZT0mcXVvdDtydWxlcy9DVVNUT00tUlVMRS01L21haW4ucmVnbyZxdW90OyAlfTwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnBhY2thZ2UgcnVsZXMKCmNoZWNrVXNlclRhZyhyZXNvdXJjZSl7CiAgICBub3QgcmVzb3VyY2UudGFncy5lbWFpbAp9CgpjaGVja1VzZXJUYWcocmVzb3VyY2UpewogICAgcmVzb3VyY2UudGFncy5zZXJ2aWNlRGVzY3JpcHRpb24KfQoKY2hlY2tTZXJ2aWNlVGFnKHJlc291cmNlKXsKICAgIG5vdCByZXNvdXJjZS50YWdzLnNlcnZpY2VEZXNjcmlwdGlvbgp9CgpjaGVja1NlcnZpY2VUYWcocmVzb3VyY2UpewogICAgcmVzb3VyY2UudGFncy5lbWFpbAp9CgpjaGVja1RhZ3MocmVzb3VyY2UpewoJY291bnQocmVzb3VyY2UudGFncykgPT0gMAp9CgpjaGVja1RhZ3MocmVzb3VyY2UpIHsKICAgIHJlc291cmNlLnRhZ3MudHlwZSA9PSAmcXVvdDt1c2VyJnF1b3Q7CiAgICBjaGVja1VzZXJUYWcocmVzb3VyY2UpCn0gZWxzZSB7CiAgICByZXNvdXJjZS50YWdzLnR5cGUgPT0gJnF1b3Q7c2VydmljZSZxdW90OwogICAgY2hlY2tTZXJ2aWNlVGFnKHJlc291cmNlKQp9CgpkZW55W21zZ10gewogICAgcmVzb3VyY2UgOj0gaW5wdXQucmVzb3VyY2UuYXdzX3JlZHNoaWZ0X2NsdXN0ZXJbbmFtZV0KCWNoZWNrVGFncyhyZXNvdXJjZSkKICAgIG1zZyA6PSB7CiAgICAgICAgJnF1b3Q7cHVibGljSWQmcXVvdDs6ICZxdW90O0NVU1RPTS1SVUxFLTUmcXVvdDssCiAgICAgICAgJnF1b3Q7dGl0bGUmcXVvdDs6ICZxdW90O01pc3NpbmcgdGhlIHJpZ2h0IHRhZ3MgZnJvbSBmb3IgYSByZXNvdXJjZSBvZiB0eXBlIHVzZXIgb3Igc2VydmljZSZxdW90OywKICAgICAgICAmcXVvdDtzZXZlcml0eSZxdW90OzogJnF1b3Q7bWVkaXVtJnF1b3Q7LAogICAgICAgICZxdW90O21zZyZxdW90Ozogc3ByaW50ZigmcXVvdDtpbnB1dC5yZXNvdXJjZS5hd3NfcmVkc2hpZnRfY2x1c3Rlclsldl0udGFncyZxdW90OywgW25hbWVdKSwKICAgICAgICAmcXVvdDtpc3N1ZSZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O2ltcGFjdCZxdW90OzogJnF1b3Q7JnF1b3Q7LAogICAgICAgICZxdW90O3JlbWVkaWF0aW9uJnF1b3Q7OiAmcXVvdDsmcXVvdDssCiAgICAgICAgJnF1b3Q7cmVmZXJlbmNlcyZxdW90OzogW10sCiAgICB9Cn0KPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+eyUgZW5kY29kZSAlfTwvcD4KPHA+SWYgeW91IHdhbnQgdG8gdHJ5IGl0IG91dCB5b3Vyc2VsdmVzLCB3ZSBoYXZlIHByb3ZpZGVkIHRoZSBzYW1lIGV4YW1wbGUgaW4gYW4gPGEgaHJlZj0iaHR0cHM6Ly9wbGF5Lm9wZW5wb2xpY3lhZ2VudC5vcmcvcC8xeGNkajlrSlJ3IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIj5PUEEgUGxheWdyb3VuZDxPdXRib3VuZExpbmsvPjwvYT4uPC9wPgo8cD57JSBoaW50IHN0eWxlPSZxdW90O3dhcm5pbmcmcXVvdDsgJX0KV2UgcmVjb21tZW5kIGFsd2F5cyB2YWxpZGF0aW5nIHRoYXQgeW91ciBydWxlIGlzIGNvcnJlY3QgYnk8Um91dGVyTGluayB0bz0iL2d1aWRlL3Byb2R1Y3RzL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS9jdXN0b20tcnVsZXMvZ2V0dGluZy1zdGFydGVkLXdpdGgtdGhlLXNkay90ZXN0aW5nLWEtcnVsZS5odG1sIj4gdXBkYXRpbmcgYW5kIHJ1bm5pbmcgdGhlIHVuaXQgdGVzdHM8L1JvdXRlckxpbms+Lgp7JSBlbmRoaW50ICV9PC9wPgo8cD5UaGUgdGVzdCBmb3IgdGhpcyBydWxlIHdpbGwgbG9vayB2ZXJ5IHNpbWlsYXIgdG8gdGhlIG9uZXMgZnJvbSBwcmV2aW91cyBleGFtcGxlIGFuZCB3aWxsIGFsc28gcmVxdWlyZSBpdHMgb3duIGZpeHR1cmUgZmlsZS48L3A+CjxoMyBpZD0iZXhhbXBsZXMtd2l0aC1ncm91cGVkLXJlc291cmNlcyI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNleGFtcGxlcy13aXRoLWdyb3VwZWQtcmVzb3VyY2VzIj4jPC9hPiBFeGFtcGxlcyB3aXRoIGdyb3VwZWQgcmVzb3VyY2VzPC9oMz4KPHA+V2UgY2FuIGFsc28gaXRlcmF0ZSBvdmVyIG1hbnkgcmVzb3VyY2VzIGJ5IGFkZGluZyB0aGVtIHRvIGFuIGFycmF5IG9mIHJlc291cmNlcy48L3A+CjwhLS1iZWZvcmViZWdpbi0tPjxkaXYgY2xhc3M9Imxhbmd1YWdlLSBleHRyYS1jbGFzcyI+PCEtLWFmdGVyYmVnaW4tLT48cHJlIHYtcHJlIGNsYXNzPSJsYW5ndWFnZS10ZXh0Ij48Y29kZT4mcXVvdDtyZXNvdXJjZXMmcXVvdDs6IFsKICAgICAgICAgICAgJnF1b3Q7YXdzX2lhbV9wb2xpY3kmcXVvdDssCiAgICAgICAgICAgICZxdW90O2F3c19pYW1fZ3JvdXBfcG9saWN5JnF1b3Q7LAogICAgICAgICAgICAmcXVvdDthd3NfaWFtX3VzZXJfcG9saWN5JnF1b3Q7LAogICAgICAgICAgICAmcXVvdDthd3NfaWFtX3JvbGVfcG9saWN5JnF1b3Q7LAogICAgICAgICAgICAmcXVvdDtkYXRhLmF3c19pYW1fcG9saWN5X2RvY3VtZW50JnF1b3Q7LApdCjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxwPk9uZSB3YXkgdG8gbGV2ZXJhZ2UgdGhpcyBpcyB0byBpbXBsZW1lbnQgZGVueWxpc3QgcnVsZXMuIDwvcD4KPHA+Rm9yIGV4YW1wbGUsIHdlIG1heSB3YW50IHRvIGVuc3VyZSB0aGF0IGlmIHNvbWVvbmUgZGVmaW5lcyBhIEt1YmVybmV0ZXMgQ29uZmlnTWFwLCB0aGVuIHRoZXkgY2Fubm90IHVzZSBpdCB0byBzdG9yZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gc3VjaCBhcyBwYXNzd29yZHMsIHNlY3JldCBrZXlzLCBhbmQgYWNjZXNzIHRva2Vucy48L3A+CjxwPldlIGNhbiBkbyB0aGF0IGFuZCBleHBhbmQgd2hhdCB3ZSBkZWZpbmUgYXMgJnF1b3Q7c2Vuc2l0aXZlIGluZm9ybWF0aW9uJnF1b3Q7IG92ZXIgdGltZSBieSBkZWZpbmluZyBhIGdyb3VwIG9mIHNlbnNpdGl2ZSB0b2tlbnMgaW5zaWRlIGEgZGVueWxpc3Q6PC9wPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cGFja2FnZSBydWxlcwoKc2Vuc2l0aXZlX2RlbnlsaXN0IDo9IFsKCSZxdW90O3Bhc3MmcXVvdDssCgkmcXVvdDtzZWNyZXQmcXVvdDssCgkmcXVvdDtrZXkmcXVvdDssCgkmcXVvdDt0b2tlbiZxdW90OywKXQoKY2hlY2tfc2Vuc2l0aXZlKGtleXMsIGRlbnlsaXN0KSB7CglfID0ga2V5c1trZXldCgljb250YWlucyhrZXksIGRlbnlsaXN0W19dKQp9CgpkZW55W21zZ10gewoJaW5wdXQua2luZCA9PSAmcXVvdDtDb25maWdNYXAmcXVvdDsKCWlucHV0LmRhdGEgPSBrZXlzCgljaGVja19zZW5zaXRpdmUoa2V5cywgc2Vuc2l0aXZlX2RlbnlsaXN0KQoJbXNnIDo9IHsKCQkmcXVvdDtwdWJsaWNJZCZxdW90OzogJnF1b3Q7Q1VTVE9NLVJVTEUtNyZxdW90OywKCQkmcXVvdDt0aXRsZSZxdW90OzogJnF1b3Q7Q29uZmlnTWFwIGV4cG9zZXMgc2Vuc2l0aXZlIGRhdGEmcXVvdDssCgkJJnF1b3Q7c2V2ZXJpdHkmcXVvdDs6ICZxdW90O2hpZ2gmcXVvdDssCgkJJnF1b3Q7bXNnJnF1b3Q7OiAmcXVvdDtpbnB1dC5kYXRhJnF1b3Q7LAoJCSZxdW90O2lzc3VlJnF1b3Q7OiAmcXVvdDsmcXVvdDssCgkJJnF1b3Q7aW1wYWN0JnF1b3Q7OiAmcXVvdDsmcXVvdDssCgkJJnF1b3Q7cmVtZWRpYXRpb24mcXVvdDs6ICZxdW90OyZxdW90OywKCQkmcXVvdDtyZWZlcmVuY2VzJnF1b3Q7OiBbXSwKCX0KfQoKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PHA+QW55IGtleSBjb250YWluaW5nIHRoZSBzdWJzdHJpbmdzICZxdW90O3Bhc3MmcXVvdDssICZxdW90O3NlY3JldCZxdW90OywgJnF1b3Q7a2V5JnF1b3Q7LCBhbmQgJnF1b3Q7dG9rZW4mcXVvdDsgY2FuIGJlIGNvbnNpZGVyZWQgc2Vuc2l0aXZlIGFuZCBzbyBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSBDb25maWdNYXAuPC9wPgo8aDIgaWQ9IiI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiMiPiM8L2E+IDwvaDI+CjwvQ29udGVudFNsb3RzRGlzdHJpYnV0b3I+Cg=="},null]}