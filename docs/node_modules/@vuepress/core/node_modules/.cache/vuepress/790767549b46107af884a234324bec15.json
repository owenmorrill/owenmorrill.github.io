{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/snyk-cli/test-for-vulnerabilities/the-.snyk-file.md?vue&type=template&id=93891efc&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/snyk-cli/test-for-vulnerabilities/the-.snyk-file.md","mtime":1646942765119},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAidGhlLXNueWstZmlsZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdGhlLXNueWstZmlsZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGhlIC5zbnlrIGZpbGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZpbGUgaXMgYSBwb2xpY3kgZmlsZSB0aGF0IFNueWsgdXNlcyB0byBkZWZpbmUgY2VydGFpbiBhbmFseXNpcyBiZWhhdmlvcnMgYW5kIHRvIHNwZWNpZnkgcGF0Y2hlcyBmb3IgdGhlIENMSSBhbmQgQ0kvQ0QgcGx1Z2lucy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGZpbGUgY2FuIGJlIGdlbmVyYXRlZCBpbiBhIG51bWJlciBvZiB3YXlzIGFuZCBjYW4gYmUgdXNlZCBpbiBhIG51bWJlciBvZiBkaWZmZXJlbnQgc2NlbmFyaW9zLiBUaGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgX3ZtLl92KCIgZmlsZSBpcyBnZW5lcmFsbHkgbG9jYXRlZCBhdCB0aGUgcm9vdCBvZiB5b3VyIHByb2plY3QuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgcGFnZSBwcm92aWRlcyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGVudHMgYW5kIHVzZSBvZiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgX3ZtLl92KCIgZmlsZSBhcyB3ZWxsIGFzIGFib3V0IGNyZWF0aW5nIHRoZSBmaWxlLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGZvbGxvd2luZyB2aWRlbyBwcm92aWRlcyBhbiBpbnRyb2R1Y3Rpb24gdG8gdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIGZpbGUuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCd7JSBlbWJlZCB1cmw9Imh0dHBzOi8veW91dHUuYmUvUVNJQnQtaFEwWG8iICV9JyldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjYXBhYmlsaXRpZXMtYW5kLWJlaGF2aW9ycyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY2FwYWJpbGl0aWVzLWFuZC1iZWhhdmlvcnMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2FwYWJpbGl0aWVzIGFuZCBiZWhhdmlvcnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHBvbGljeSBmaWxlIGluIGEgcHJvamVjdCBpcyB1c2VkIHRvIGFwcGx5IGlnbm9yZXMgYW5kIG90aGVyIHNldHRpbmdzIGZvciB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrIHRlc3QiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgbW9uaXRvciIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZHMsIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkBzbnlrL3Byb3RlY3QiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc255ay9zbnlrL3RyZWUvbWFzdGVyL3BhY2thZ2VzL3NueWstcHJvdGVjdCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJwYWNrYWdlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAocmVwbGFjZWQgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayBwcm90ZWN0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGNvbW1hbmQpLCBhbmQgYW55IHRlc3RzIGRvbmUgdGhyb3VnaCB0aGUgQVBJIG9yIHdlYnNpdGUuIEZvciBJYUMgaWdub3JlIHJ1bGVzIHNlZSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnNueWsuaW8vc255ay1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL3NueWstY2xpLWZvci1pbmZyYXN0cnVjdHVyZS1hcy1jb2RlL2lhYy1pZ25vcmVzLXVzaW5nLXRoZS0uc255ay1wb2xpY3ktZmlsZSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiSWFDIGlnbm9yZXMgdXNpbmcgdGhlIC5zbnlrIHBvbGljeSBmaWxlIiksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICAgIF92bS5fdigiIGZpbGUgZGVmaW5lcyAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTbnlrIHBhdGNoZXMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvIGJlIGFwcGxpZWQgYXQgYnVpbGQgdGltZSwgdG8gcmVzb2x2ZSB2dWxuZXJhYmlsaXRpZXMgdGhhdCBjYW5ub3QgYmUgZml4ZWQgd2l0aCB1cGdyYWRlcy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmaWxlIGRlZmluZXMgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSWdub3JlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIi5cbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTbnlrIGNoZWNrcyB0aGUgU255ayBkYXRhYmFzZSBhbmQgdGhlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgcG9saWN5IGZpbGUgZm9yIGlnbm9yZSBydWxlcyB3aGVuIHBlcmZvcm1pbmcgQ0xJIGFuZCBDSS9DRCBzY2FubmluZy4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBwb2xpY3kgZmlsZSBpcyB1c2VkIHRvIGFwcGx5IGlnbm9yZXMgYW5kIG90aGVyIHNldHRpbmdzIGZvciB0aGUgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrIHRlc3QiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgbW9uaXRvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBjb21tYW5kcywgYXMgd2VsbCBhcyBhbnkgdGVzdHMgdGhyb3VnaCB0aGUgQVBJIG9yIHdlYnNpdGUuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIjogaWYgIiksCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImFkbWluIHVzZXJzIG9ubHkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGlzIGVuYWJsZWQgKCIpLAogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTZXR0aW5ncyA+IEdlbmVyYWwgPiBJZ25vcmVzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiKSwgdGhlIGlnbm9yZSBydWxlcyBpbiB0aGUgZGF0YWJhc2UgYXJlIHVzZWQsIHVubGVzcyB0aGVyZSBpcyBhICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGZpbGUgaW4gdGhlIHByb2plY3QuIElmIHRoZXJlIGEgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZmlsZSBpbiB0aGUgcHJvamVjdCwgKioqKiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgdGVzdCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiB1c2VzIHRoYXQgZmlsZSBhcyB0aGUgaWdub3JlIG1lY2hhbmlzbSwgaW5zdGVhZCBvZiB0aGUgaWdub3JlcyBzZXQgZnJvbSB0aGUgd2ViIFVJLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkRldmVsb3BlcnMgY2FuIGlnbm9yZSBpc3N1ZXMgYnkgdXNpbmcgdGhlICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHBvbGljeSBmaWxlIHdoZW4gcnVubmluZyIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayBtb25pdG9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJXaGVuIHRoZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGZpbGUgaXMgaW5jbHVkZWQgaW4gYSBTb3VyY2UgQ29udHJvbCBNYW5hZ2VtZW50IChTQ00pIHByb2plY3QsIFNueWsgY29uc2lkZXJzIGJvdGggdGhlIGRhdGFiYXNlIGlnbm9yZXMgYW5kIHRoZSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpZ25vcmVzLiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmaWxlIGRlZmluZXMgY2VydGFpbiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJhbmFseXNpcyBjb25maWd1cmF0aW9uIGl0ZW1zIildKSwKICAgICAgICAgIF92bS5fdigiIHN1Y2ggYXMgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxhbmd1YWdlIHNldHRpbmdzOiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoUHl0aG9uIHZlcnNpb24pLlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNMSSBhbmQgQ0kvQ0Q6IHRoZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxhbmd1YWdlIHNldHRpbmdzOiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZm9yIHRoZSBjdXJyZW50IHByb2plY3QiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlNDTSBzY2FucyAoZm9yIGV4YW1wbGUsIEdpdEh1Yik6IHRoZSBTbnlrIHdlYiBVSSBjdXJyZW50bHkgbGltaXRzIHVzZXJzIHRvIHNldHRpbmcgUHl0aG9uIHZlcnNpb25zIGF0IHRoZSBvcmdhbml6YXRpb24gbGV2ZWwuIFdoZW4geW91IGluY2x1ZGUgdGhlICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGZpbGUgaW4geW91ciBjb2RlIHJlcG9zaXRvcnkgYW5kIHRoZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxhbmd1YWdlIHNldHRpbmdzOiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiB2YWx1ZSBpcyBzZXQsIHRoZW4gd2hlbiB5b3UgcnVuIGNvZGUgcmVwb3NpdG9yeSBzY2FucyB5b3UgZ2FpbiB0aGUgYWR2YW50YWdlIG9mIGNyZWF0aW5nIHByb2plY3QtbGV2ZWwgUHl0aG9uIHNldHRpbmdzLiBZb3UgbWF5IG5lZWQgdG8gcmUtaW1wb3J0IHRoZSBwcm9qZWN0IGlmIHRoZSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGZpbGUgd2FzIG5vdCBwcmVzZW50IGF0IHRoZSBpbml0aWFsIGltcG9ydCBvZiB0aGUgcHJvamVjdCBpbnRvIFNueWsuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInNueWstZmlsZS1jcmVhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1maWxlLWNyZWF0aW9uIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIC5zbnlrIGZpbGUgY3JlYXRpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICBfdm0uX3YoIiBmaWxlIGNhbiBiZSBjcmVhdGVkIGluIGEgbnVtYmVyIG9mIHdheXM6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTbnlrIHZ1bG5lcmFiaWxpdHkgZml4IHB1bGwgcmVxdWVzdCAoUFIpIildKSwKICAgICAgICAgIF92bS5fdigiIC0gV2hlbiB5b3Ugc2VsZWN0IHRoZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJmaXggYSB2dWxuZXJhYmlsaXR5IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBidXR0b24gb24gYSBnaXQgY29kZSByZXBvc2l0b3J5IHNjYW4sIGFuZCBhIFNueWsgcGF0Y2ggaXMgYXZhaWxhYmxlIGFuZCBhbiB1cGdyYWRlIGlzIG5vdCBwb3NzaWJsZSwgYSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZmlsZSBpcyBhZGRlZCB0byB0aGUgcHVsbCByZXF1ZXN0LiBDdXJyZW50bHkgU255ayBwYXRjaGVzIGFyZSBmb3IgbnBtIGFuZCBZYXJuIG9ubHkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBDTEkiKV0pLAogICAgICAgICAgX3ZtLl92KCIgLSBVc2luZyB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgaWdub3JlIildKSwKICAgICAgICAgIF92bS5fdigiIGNvbW1hbmQgY3JlYXRlcyBhICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmaWxlLi4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWFudWFsIGNyZWF0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiIC0gWW91IGNhbiBjcmVhdGUgYSBuZXcgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBmaWxlIGFuZCBwb3B1bGF0ZSBpdCB3aXRoIHRoZSBjb2RlIHRoYXQgZm9sbG93cy4gVGhlIHZlcnNpb24gaXMgdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgc255ay1wb2xpY3kgcGFja2FnZTsgeW91IGNhbiBmaW5kIHRoaXMgYXQgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3NueWstcG9saWN5IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCJodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9zbnlrLXBvbGljeSIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiBOb3RlIHRoYXQgaW4gb3JkZXIgdG8gaWdub3JlIGJ5IHBhdGggeW91IG11c3QgZWRpdCB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICAgIF92bS5fdigiIGZpbGUgbWFudWFsbHkuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgIyBTbnlrIChodHRwczovL3NueWsuaW8pIHBvbGljeSBmaWxlLCBwYXRjaGVzIG9yIGlnbm9yZXMga25vd24gdnVsbmVyYWJpbGl0aWVzLlxuIHZlcnNpb246IHYxLjIyLjFcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN5bnRheCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3ludGF4IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN5bnRheCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIGZpbGUgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyB0b3AtbGV2ZWwga2V5czoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigibGFuZ3VhZ2Utc2V0dGluZ3M6IildKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfYygiY29kZSIsIFtfdm0uX3YoImlnbm9yZToiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigicGF0Y2g6IildKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGFuZ3VhZ2Utc2V0dGluZ3M6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB2YWx1ZSBpcyB0aGUgUHl0aG9uIHZlcnNpb24geW91IGFyZSBjdXJyZW50bHkgdXNpbmcuIFNlZSB0aGUgZXhhbXBsZXMgaW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvZ3VpZGUvc255ay1jbGkvdGVzdC1mb3ItdnVsbmVyYWJpbGl0aWVzL3RoZS0uc255ay1maWxlLmh0bWwjc2V0dGluZy10aGUtbGFuZ3VhZ2UtdmVyc2lvbi1mb3ItcHl0aG9uIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJTZXR0aW5nIHRoZSBsYW5ndWFnZSB2ZXJzaW9uIGZvciBQeXRob24iKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBvbiB0aGlzIHBhZ2UuIiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImlnbm9yZToiKV0pLAogICAgICAgIF92bS5fdigiIGlzIGFuIGlnbm9yZSBydWxlIGluIHRoZSBmb3JtIG9mIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJZ25vcmU6XG4gIHNueWstdnVsbmlkOlxuICAgIC0gcGF0aCB0byBsaWJyYXJ5IHVzaW5nID4gc2VwZXJhdG9yIDpcbiAgICAgIHJlYXNvbjogJ3RleHQgc3RyaW5nJ1xuICAgICAgZXhwaXJlczogJ2RhdGV0aW1lIHN0cmluZydcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwYXRjaCIpXSksCiAgICAgICAgX3ZtLl92KCI6IGlzIGluIHRoZSBmb3JtIG9mIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICInbnBtOmxpYnJhcnk6eXl5eW1tZGTigJkgOlxuICAtIHBhdGggdG8gbGlicmFyeSB1c2luZyA+IHNlcGVyYXRvcjpcbiAgICBwYXRjaGVkOiAnZGF0ZXRpbWUgc3RyaW5nJ1xuICAtIHBhdGggdG8gbGlicmFyeSB1c2luZyA+IHNlcGVyYXRvciA+IHRvID4gYW5vdGhlciA+IHBhdGg6XG4gICAgcGF0Y2hlZDogJ2RhdGV0aW1lIHN0cmluZydcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAibW9ub3JlcG9zLWFuZC1jb21wbGV4LXByb2plY3QtY29uc2lkZXJhdGlvbnMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI21vbm9yZXBvcy1hbmQtY29tcGxleC1wcm9qZWN0LWNvbnNpZGVyYXRpb25zIiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgTW9ub3JlcG9zIGFuZCBjb21wbGV4IHByb2plY3QgY29uc2lkZXJhdGlvbnMiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlNueWsgQ0xJIGV4cGVjdHMgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZmlsZSB0byBiZSByZWxhdGl2ZSB0byB0aGUgbWFuaWZlc3QgYmVpbmcgYW5hbHl6ZWQuIEluIHRoZSBjYXNlIG9mIGEgY29tcGxleCBwcm9qZWN0IG9yIG1vbm9yZXBvLCB0aGVyZSBtYXkgYmUgbWFueSBtYW5pZmVzdHMgaW4gc3ViZm9sZGVycywgYW5kIHlvdSBtYXkgd2lzaCB0byB1c2UgYSBjZW50cmFsaXplZCBpZ25vcmUgcG9saWN5LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSWYgeW91IGNyZWF0ZSBhICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaWdub3JlIHBvbGljeSB3aXRoIHRoZSBDTEkgYW5kIFNueWsgZG9lcyBub3Qgc3VjY2Vzc2Z1bGx5IGlnbm9yZSB0aGUgdnVsbmVyYWJpbGl0eSwgdXNlIHRoZSBvcHRpb24gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLXBvbGljeS1wYXRoPS9wYXRoL3BhdGgvZmlsZS4iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiWW91ciBjb21wbGV0ZSBzdGF0ZW1lbnQgc2hvdWxkIGJlICIpLAogICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAic255ayBpZ25vcmUgLS1pZD1Jc3N1ZUlEIFstLWV4cGlyeT1leHBpcnldIFstLXJlYXNvbj0ncmVhc29uIGZvciBpZ25vcmluZyddIFstLXBvbGljeS1wYXRoPS9wYXRoL3BhdGgvZmlsZV0uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5vdGUgdGhhdCBpZiB5b3UgZG8gbm90IHVzZSB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBwb2xpY3kgZmlsZSwgeW91IGF2b2lkIG5lZWRpbmcgdG8gc3BlY2lmeSBpZ25vcmVzIGluIHRoZSB3ZWIgaW50ZXJmYWNlLCB3aGljaCB5b3UgY2FuIGRvIG9ubHkgYWZ0ZXIgYW4gaXNzdWUgaXMgZGV0ZWN0ZWQgYW5kIG1vbml0b3JlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGlnbm9yZSBydWxlcyBjYW4gYmUgb3ZlcnJpZGRlbiBpZiBhZG1pbiB1c2VycyBvbmx5IGlzIGVuYWJsZWQgZm9yIHRoZSByZWxldmFudCBvcmdhbml6YXRpb24gKGNsaWNrIG9uICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTZXR0aW5ncyIpXSksCiAgICAgICAgX3ZtLl92KCIgPiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiR2VuZXJhbCIpXSksCiAgICAgICAgX3ZtLl92KCIgPiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSWdub3JlcyIpXSksCiAgICAgICAgX3ZtLl92KCIpLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJleGFtcGxlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZXhhbXBsZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEV4YW1wbGVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNyZWF0aW5nLWEtc255ay1maWxlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjcmVhdGluZy1hLXNueWstZmlsZSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDcmVhdGluZyBhIC5zbnlrIGZpbGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkdlbmVyYXRlIGEgcGF0Y2ggcnVsZSB1c2luZyBhIHZ1bG5lcmFiaWxpdHkgZml4IFBSOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiMgU255ayAoaHR0cHM6Ly9zbnlrLmlvKSBwb2xpY3kgZmlsZSwgcGF0Y2hlcyBvciBpZ25vcmVzIGtub3duIHZ1bG5lcmFiaWxpdGllcy5cbnZlcnNpb246IHYxLjIyLjFcbmlnbm9yZToge31cbiMgcGF0Y2hlcyBhcHBseSB0aGUgbWluaW11bSBjaGFuZ2VzIHJlcXVpcmVkIHRvIGZpeCBhIHZ1bG5lcmFiaWxpdHlcbnBhdGNoOlxuICAnbnBtOmhhd2s6MjAxNjAxMTknOlxuICAgIC0gdGFwID4gY29kZWNvdi5pbyA+IHJlcXVlc3QgPiBoYXdrOlxuICAgICAgICBwYXRjaGVkOiAnMjAyMC0wMS0yMFQxNDoyNjozNC40MDRaJ1xuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2V0dGluZy10aGUtbGFuZ3VhZ2UtdmVyc2lvbi1mb3ItcHl0aG9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzZXR0aW5nLXRoZS1sYW5ndWFnZS12ZXJzaW9uLWZvci1weXRob24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2V0dGluZyB0aGUgbGFuZ3VhZ2UgdmVyc2lvbiBmb3IgUHl0aG9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJNYW51YWxseSBtb2RpZnkgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIGZpbGUgdG8gc2V0ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGFuZ3VhZ2Utc2V0dGluZ3M6IildKSwKICAgICAgICBfdm0uX3YoIiBmb3IgdGhlIHByb2plY3QgdG8gUHl0aG9uIDIuNzoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJyMgU255ayAoaHR0cHM6Ly9zbnlrLmlvKSBwb2xpY3kgZmlsZSwgcGF0Y2hlcyBvciBpZ25vcmVzIGtub3duIHZ1bG5lcmFiaWxpdGllcy5cbnZlcnNpb246IHYxLjIyLjFcbmxhbmd1YWdlLXNldHRpbmdzOiBcbnB5dGhvbjogIjIuNyJcbicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJNYW51YWxseSBtb2RpZnkgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIGZpbGUgdG8gc2V0ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGFuZ3VhZ2Utc2V0dGluZ3M6IildKSwKICAgICAgICBfdm0uX3YoIiBmb3IgdGhlIHByb2plY3QgdG8gUHl0aG9uIDMuNi4yOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnIyBTbnlrIChodHRwczovL3NueWsuaW8pIHBvbGljeSBmaWxlLCBwYXRjaGVzIG9yIGlnbm9yZXMga25vd24gdnVsbmVyYWJpbGl0aWVzLlxudmVyc2lvbjogdjEuMjIuMVxubGFuZ3VhZ2Utc2V0dGluZ3M6IFxucHl0aG9uOiAiMy42LjIiXG4nCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlOiIpXSksCiAgICAgICAgX3ZtLl92KCIgV2hlbiB5b3UgaW5jbHVkZSB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgX3ZtLl92KCIgZmlsZSBpbiB5b3VyIGNvZGUgcmVwb3NpdG9yeSBhbmQgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGFuZ3VhZ2Utc2V0dGluZ3M6IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHZhbHVlIGlzIHNldCwgdGhlbiB3aGVuIHlvdSBydW4gY29kZSByZXBvc2l0b3J5IHNjYW5zIHlvdSBnYWluIHRoZSBhZHZhbnRhZ2Ugb2YgY3JlYXRpbmcgcHJvamVjdC1sZXZlbCBQeXRob24gc2V0dGluZ3MuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNldHRpbmctdnVsbmVyYWJpbGl0eS1pZ25vcmUtcnVsZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NldHRpbmctdnVsbmVyYWJpbGl0eS1pZ25vcmUtcnVsZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2V0dGluZyB2dWxuZXJhYmlsaXR5IGlnbm9yZSBydWxlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiSWdub3JlIGEgc3BlY2lmaWMgdnVsbmVyYWJpbGl0eSBmb3IgYSBnaXZlbiBwYXRoOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImlnbm9yZTpcbiBTTllLLUpTLUJTT04tNTYxMDUyOlxuICAgIC0gbW9uZ29kYiA+IG1vbmdvZGItY29yZSA+IGJzb246XG4gICAgICAgIHJlYXNvbjogTm9uZSBnaXZlblxuICAgICAgICBleHBpcmVzOiAnMjAyMC0wNi0xOVQyMDozNjo1NC41NTNaJ1xuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIklnbm9yZSBhIHZ1bG5lcmFiaWxpdHkgZm9yIGFsbCBwYXRoczoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJpZ25vcmU6XG4gICducG06bWVtOjIwMTgwMTE3JzpcbiAgICAtICcqJzpcbiAgICAgICAgcmVhc29uOiBOb25lIEdpdmVuXG4gICAgICAgIGV4cGlyZXM6IDIwMjAtMDQtMDRUMTc6MzM6NDUuMDA0WlxuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIklnbm9yZSBhIHNwZWNpZmljIHZ1bG5lcmFiaWxpdHkgb24gbXVsdGlwbGUgcGF0aHM6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaWdub3JlOlxuIFNOWUstSlMtRE9UUFJPUC01NDM0ODk6XG4gICAtIGNvbmZpZ3N0b3JlID4gZG90LXByb3A6XG4gICAgICAgcmVhc29uOiBOb25lIGdpdmVuXG4gICAgICAgZXhwaXJlczogJzIwMjAtMDYtMTlUMjA6MzY6NTQuNTUzWidcbiAgIC0gc255ayA+IGNvbmZpZ3N0b3JlID4gZG90LXByb3A6XG4gICAgICAgcmVhc29uOiBOb25lIGdpdmVuXG4gICAgICAgZXhwaXJlczogJzIwMjAtMDYtMTlUMjA6MzY6NTQuNTUzWidcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNldHRpbmctbGljZW5zZS1pZ25vcmUtcnVsZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NldHRpbmctbGljZW5zZS1pZ25vcmUtcnVsZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2V0dGluZyBsaWNlbnNlIGlnbm9yZSBydWxlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBpZ25vcmUgdGhlIGxpY2Vuc2UgaXNzdWUgZm9yIHBhY2thZ2UsIGZpbmQgdGhlIElEIGZvciB0aGUgbGljZW5zZSBpbiB0aGUgb3V0cHV0IG9mIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgdGVzdCIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZC4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGxpY2Vuc2UgSUQgaXMgcGFydCBvZiB0aGUgbGljZW5zZSBpc3N1ZSBVUkwsIGZvciBleGFtcGxlLCBpbiB0aGlzIFVSTDogIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc255ay5pby92dWxuL3NueWs6bGljOm5wbTpzeW1ib2w6TVBMLTIuMCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiaHR0cHM6Ly9zbnlrLmlvL3Z1bG4vc255azpsaWM6bnBtOnN5bWJvbDpNUEwtMi4wIiksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgdGhlIGxpY2Vuc2UgSUQgaXMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrOmxpYzpucG06c3ltYm9sOk1QTC0yLjAiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpZ25vcmluZy10aGUtbGljZW5zZS13aXRoLXRoZS1jbGkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2lnbm9yaW5nLXRoZS1saWNlbnNlLXdpdGgtdGhlLWNsaSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSWdub3JpbmcgdGhlIGxpY2Vuc2Ugd2l0aCB0aGUgQ0xJIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRW50ZXIgdGhlIGxpY2Vuc2UgSUQgaW4gbG93ZXJjYXNlIHRvIGF2b2lkIGNhdXNpbmcgYW4gZXJyb3IuIE9ubHkgdGhlIHByb3BlciBuYW1lIG9mIHRoZSBsaWNlbnNlIGNhbiBiZSBpbiB1cHBlcmNhc2UuIEluIHRoZSBleGFtcGxlIHRoYXQgZm9sbG93cywgZXZlcnl0aGluZyBpcyBpbiBsb3dlcmNhc2UgZXhjZXB0IHRoZSBwcm9wZXIgbmFtZSBvZiB0aGUgbGljZW5zZSwgR1BMLTIuMC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgaWdub3JlIC0taWQ9c255azpsaWM6bnBtOmdvb2Y6R1BMLTIuMCIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGNvbW1hbmQgcmVzdWx0cyBpbiB0aGUgZm9sbG93aW5nICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIGZpbGU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJpZ25vcmU6XG4gICdzbnlrOmxpYzpucG06Z29vZjpHUEwtMi4wJzpcbiAgICAtICcqJzpcbiAgICAgICAgcmVhc29uOiBOb25lIEdpdmVuXG4gICAgICAgIGV4cGlyZXM6IDIwMjAtMTEtMDdUMTE6Mzg6MjguNjE0WlxuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZXhjbHVkaW5nLWZpbGVzLWFuZC1mb2xkZXJzLWZyb20tc255ay1jb2RlLWFuYWx5c2lzIiB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjZXhjbHVkaW5nLWZpbGVzLWFuZC1mb2xkZXJzLWZyb20tc255ay1jb2RlLWFuYWx5c2lzIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgRXhjbHVkaW5nIO+sgWxlcyBhbmQgZm9sZGVycyBmcm9tIFNueWsgQ29kZSBhbmFseXNpcyIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiOiBPbmx5IHdlYiBhbmQgQ0xJIHByb2plY3RzIGN1cnJlbnRseSBzdXBwb3J0IGV4Y2x1ZGVzIGZvciBTbnlrIENvZGUgYW5hbHlzaXMuIElERSBzdXBwb3J0IGlzIHBsYW5uZWQgZm9yIHRoZSBmdXR1cmUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVzaW5nIHRoZSBmb2xsb3dpbmcgY29kZSB5b3UgY2FuIGFkZCBzaGVsbC1zdHlsZSBwYXR0ZXJucyB1bmRlciB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJleGNsdWRlLmNvZGUiKV0pLAogICAgICAgIF92bS5fdigiIHNlY3Rpb24gb2YgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIGZpbGU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIjIFNueWsgKGh0dHBzOi8vc255ay5pbykgcG9saWN5IGZpbGVcbnZlcnNpb246IHYxLjE0LjBcblxuZXhjbHVkZTpcbiAgIGNvZGU6XG4gICAgIC0gdGVzdC5zcGVjLnRzXG4gICAgIC0gdGVzdHMvKi50c1xuICAgICAtIOKAnCoqLyouc3BlYy50c+KAnVxuICAgICAtIHRlc3RzPy8qXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcHJlY2VkaW5nIGV4Y2x1ZGUgcnVsZXMgaWdub3JlIHRoZSDigJx0ZXN0LnNwZWMudHPigJ0g76yBbGUsIGFueSDvrIFsZSB3aXRoIHRoZSDigJwudHPigJ0gZXh0ZW5zaW9uIHVuZGVyIOKAnHRlc3RzLOKAnSBhbnkg76yBbGUgZW5kaW5nIHdpdGgg4oCcLnNwZWMudHPigJ0gZnJvbSBhbnkgZGlyZWN0b3J5LCBhbmQgYW55IO+sgWxlIGZvdW5kIHVuZGVyIOKAnHRlc3TigJ0gb3Ig4oCcdGVzdHMu4oCdICIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbnkgcnVsZSBiZWdpbm5pbmcgd2l0aCBhc3RlcmlzayhzKSBtdXN0IGJlIHdyYXBwZWQgaW4gcXVvdGVzLCBmb3IgZXhhbXBsZSwgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCLigJ0qL3NyY+KAnSIpXSksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2hlbGwgcGF0dGVybiBzeW50YXgsIHNlZSB0aGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LmdudS5vcmcvc29mdHdhcmUvZmluZHV0aWxzL21hbnVhbC9odG1sX25vZGUvZmluZF9odG1sL1NoZWxsLVBhdHRlcm4tTWF0Y2hpbmcuaHRtbCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJHTlUgZG9jIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic255ay1yZWxhdGVkLWNsaS1jb21tYW5kcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1yZWxhdGVkLWNsaS1jb21tYW5kcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAuc255ayByZWxhdGVkIENMSSBjb21tYW5kcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayBwb2xpY3kiKV0pLAogICAgICAgIF92bS5fdigiIGNvbW1hbmQgZGlzcGxheXMgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnNueWsiKV0pLAogICAgICAgIF92bS5fdigiIHBvbGljeSBmb3IgYSBwYWNrYWdlLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigic255ayBwb2xpY3kiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgaWdub3JlIildKSwKICAgICAgICBfdm0uX3YoIiBjb21tYW5kIG1vZGlmaWVzIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5zbnlrIildKSwKICAgICAgICBfdm0uX3YoIiBwb2xpY3kgdG8gaWdub3JlIGEgc3RhdGVkIGlzc3VlLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAic255ayBpZ25vcmUgLS1pZD0ndnVsbmVyYWJpbGl0eUlEJyAtLWV4cGlyeT0nZGF0ZS1zdHJpbmcnIC0tcmVhc29uPSd0ZXh0IHN0cmluZydcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgdXNpbmcgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayBpZ25vcmUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgY29tbWFuZCB0byBnZW5lcmF0ZSBhIHJ1bGUgdG8gaWdub3JlIHRoZSBTTllLLUpTLUJTT04tNTYxMDUyIHZ1bG5lcmFiaWxpdHkgZm9yIGFsbCBwYXRocyB0aGF0IGxlYWQgdG8gdGhhdCBsaWJyYXJ5IG9uIGRpc2suIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJzbnlrIGlnbm9yZSAtLWlkPSdTTllLLUpTLUJTT04tNTYxMDUyJyAtLWV4cGlyeT0nMjAxOC0wNC0wMScgLS1yZWFzb249J3Rlc3RpbmcnXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJiZXN0LXByYWN0aWNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYmVzdC1wcmFjdGljZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJlc3QgcHJhY3RpY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmaWxlIHNob3VsZCBiZSB2ZXJzaW9uZWQgaW4gdGhlIGNvZGUgcmVwb3NpdG9yeSwgdGhlIHNhbWUgYXMgb3RoZXIgYXBwbGljYXRpb25zIGFuZCBidWlsZCByZXNvdXJjZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFkZGl0aW9uYWwtaW5mb3JtYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FkZGl0aW9uYWwtaW5mb3JtYXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9zbnlrLWNsaS9maXgtdnVsbmVyYWJpbGl0aWVzLWZyb20tdGhlLWNsaS9pZ25vcmUtdnVsbmVyYWJpbGl0aWVzLXVzaW5nLXNueWstY2xpIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIklnbm9yZSB2dWxuZXJhYmlsaXRpZXMgdXNpbmcgU255ayBDTEkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlN1cHBvcnQgS0IgLSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc3VwcG9ydC5zbnlrLmlvL2hjL2VuLXVzL2FydGljbGVzLzM2MDAwMTU1ODU5OCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJJZ25vcmluZyB2aWEgdGhlIENMSSBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBvcmdhbml6YXRpb24iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9ndWlkZS9zbnlrLWNsaS9jbGktcmVmZXJlbmNlLyIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJDTEkgcmVmZXJlbmNlIildCiAgICAgICAgICApLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}