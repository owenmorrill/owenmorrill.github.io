{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/tutorials/atlassian/devops-pipeline-with-bitbucket-cloud-and-kubernetes/module-3-exploiting-tomcat-rce-on-kubernetes/rce-vulnerability.md?vue&type=template&id=90206622&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/tutorials/atlassian/devops-pipeline-with-bitbucket-cloud-and-kubernetes/module-3-exploiting-tomcat-rce-on-kubernetes/rce-vulnerability.md","mtime":1644439893097},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAicmNlLXZ1bG5lcmFiaWxpdHkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JjZS12dWxuZXJhYmlsaXR5IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJDRSBWdWxuZXJhYmlsaXR5IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiRHVyaW5nIHRoZSB3b3Jrc2hvcCwgd2UgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3NueWsvdHV0b3JpYWxzL2F0bGFzc2lhbi9kZXZvcHMtcGlwZWxpbmUtd2l0aC1iaXRidWNrZXQtY2xvdWQtYW5kLWt1YmVybmV0ZXMvbW9kdWxlLTEtc2Nhbm5pbmctYW5kLW1vbml0b3Jpbmctc291cmNlLWNvZGUvcmV2aWV3LWFwcGxpY2F0aW9uLXNjYW4tcmVzdWx0cy5odG1sIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJkcmF3IGF0dGVudGlvbiAiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJ0byB0aGUgdG9wLWxldmVsIERvY2tlciBpbWFnZSB2dWxuZXJhYmlsaXR5IGFuZCBleHBsYWluIGhvdyB0aGUgYmFzZSBpbWFnZSBjYW4gYmUgdXBncmFkZWQuICBXZSByZXZpZXdlZCBhIHZ1bG5lcmFiaWxpdHkgYW5kIGluY2x1ZGVkIGEgc2NyZWVuc2hvdCBmb3IgdGhlIFRvbWNhdCB2ZXJzaW9uLiAgSW4gdGhpcyBzZWN0aW9uLCB3ZSB3aWxsIGJlIGV4cGxvaXRpbmcgdGhlIHZlcnNpb24gb2YgVG9tY2F0IGluIHRoZSByZXBvc2l0b3J5LiIKICAgICAgICAgICksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3NueWstbGFicy9qYXZhLWdvb2YvYmxvYi9tYXN0ZXIvZXhwbG9pdHMvdG9tY2F0LXJjZS9SRUFETUUubWQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUkVBRE1FLm1kIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGNvbnRlbnRzIGFyZSBmYWlybHkgY29tcHJlaGVuc2l2ZSBhYm91dCB3aGF0IHRvIGRvLiAgVGhlIHVuaWZ5aW5nIHN0b3J5IGhlcmUgaXMgaG93IGFuIGV4dGVybmFsIHVzZXIgY2FuIGV4cGxvaXQgYSB2dWxuZXJhYmlsaXR5IG9mIHlvdXIgYXBwbGljYXRpb24gYmFzZWQgb24gaXRzIHVzZSBvZiB0aGlyZC1wYXJ0eSBzb2Z0d2FyZS4gIEluIHRoaXMgY2FzZSwgaXQgaXMgdGhlIGFwcGxpY2F0aW9uIHNlcnZlciBUb21jYXQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBleHBsb2l0IHNldHMgdXAgYSB3ZWJmb3JtIHdoZXJlIHlvdSBjYW4gcnVuIGNvbW1hbmRzLiAgU29tZSBvZiB0aGVzZSBjb21tYW5kcyBpbmNsdWRlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2hvYW1pIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkcGtnIC1sIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGJ1dCBtYXkgYWxzbyBpbmNsdWRlIG90aGVyIGNvbW1hbmRzIHRoYXQgZWNobyB0aGUgY29udGVudHMgb2YgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIvZXRjL3Bhc3N3ZCIpXSksCiAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0b3VjaCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gIFdoZW4gd2UgcnVuIHRoZSB3b3Jrc2hvcCwgd2UnbGwgc2hvd2Nhc2UgYSBudW1iZXIgb2YgaW50ZXJlc3RpbmcgY29tbWFuZHMgaW5jbHVkaW5nOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJjYXQgZXRjL3Bhc3N3ZCIpXSldKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJ0b3VjaCA8ZmlsZW5hbWU+IildKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfYygiY29kZSIsIFtfdm0uX3YoInRvdWNoIC9ldGMvdGVzdGZpbGUiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigiY3VybCIpXSldKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlc2UgY29tbWFuZHMgYXJlIHJlcHJlc2VudGF0aXZlIG9mIHdoYXQgYXR0YWNrZXJzIG1heSB1c2UgdG8gZXhwbG9yZSB3aGF0IGlzIGF2YWlsYWJsZSBvbiB5b3VyIHZ1bG5lcmFibGUgc3lzdGVtLiAgVGhleSBkb24ndCB1c2Ugc3NoIHRvIGFjY2VzcyB5b3VyIHN5c3RlbSwgYnV0IGluc3RlYWQgZmluZCBhIHdheSB0byBydW4gc2hlbGwgY29tbWFuZHMgdG8gZXhwbG9pdCB5b3VyIHN5c3RlbS4gIFdlIHJlY29tbWVuZCB5b3UgdHJ5IHZhcmlvdXMgY29tbWFuZHMgdG8gYmVjb21lIGFjcXVhaW50ZWQgd2l0aCB3aGF0IGlzIGF2YWlsYWJsZSBvbiB0aGlzIHZ1bG5lcmFibGUgc3lzdGVtLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGVuIHlvdSBydW4gdGhyb3VnaCB0aGUgY29tbWFuZHMgdG8gcGF0Y2ggdGhlIHN5c3RlbSBhbmQgcmUtY2hlY2ssIHlvdSdsbCBzZWUgdGhlIHZ1bG5lcmFiaWxpdHkgaXMgbm8gbG9uZ2VyIHRoZXJlLiAgV2hpbGUgd2UncmUgcnVubmluZyBjb21tYW5kcyBhdCB0aGUgQ0xJLCBpdCBpcyB3b3J0aCBub3RpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG9tY2F0LXJjZS5zaCIpXSksCiAgICAgICAgX3ZtLl92KCIgYXJlOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnIyEvdXNyL2Jpbi9lbnYgYmFzaFxuXG5IT1NUSVA9IiQoaWZjb25maWcgfCBncmVwIC1FbyBcJ2luZXQgKGFkZHI6KT8oWzAtOV0qXFwuKXszfVswLTldKlwnIHwgZ3JlcCAtRW8gXCcoWzAtOV0qXFwuKXszfVswLTldKlwnIHwgZ3JlcCAtdiBcJzEyNy4wLjAuMVwnIHwgaGVhZCAtMSk6ODA4MCJcblxuTEJfSE9TVD0kKGt1YmVjdGwgZ2V0IHN2YyBnb29mIC1vIGpzb24gfCBqcSAtciAuc3RhdHVzLmxvYWRCYWxhbmNlci5pbmdyZXNzWzBdLmhvc3RuYW1lKVxuaWYgW1sgIiRMQl9IT1NUIiAhPSAiIiBdXTsgdGhlblxuICAgIEhPU1RJUD0kTEJfSE9TVFxuZmlcblxuZWNobyBEZXRlY3RlZCAkSE9TVElQIGFzIHRhcmdldCBob3N0XG5kb2NrZXIgYnVpbGQgLXQgdG9tY2F0LXJjZSB0b21jYXQtcmNlXG5hbGlhcyBjaGVjaz0iZG9ja2VyIHJ1biAtLXJtIC1pdCB0b21jYXQtcmNlIC11IGh0dHA6Ly8ke0hPU1RJUH0iXG5hbGlhcyBwd249ImRvY2tlciBydW4gLS1ybSAtaXQgdG9tY2F0LXJjZSAtdSBodHRwOi8vJHtIT1NUSVB9IC1wIHB3biJcbmFsaWFzIGJvdW5jZT0ia3ViZWN0bCBkZWxldGUgcG9kIC0tc2VsZWN0b3IgYXBwPWdvb2YiXG5hbGlhcyBicm93c2U9Im9wZW4gaHR0cDovLyR7SE9TVElQfSJcbicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBtYXkgYmUgd29uZGVyaW5nIHdoYXQgdGhlIGRpZmZlcmVudCBVUkwgY29tbWFuZHMgYXJlIGFuZCBob3cgdGhleSB3b3JrLiAgSGVyZSB3ZSByZWNvbW1lbmQgeW91IHJldmlldyB0aGUgRG9ja2VyZmlsZSB0byBzZWUgd2UncmUgYnVpbGRpbmcgYSBjb250YWluZXIgdGhhdCBpcyBkZWxpYmVyYXRlbHkgdnVsbmVyYWJsZSBhbmQgaXQgaXMgYWNjZXB0aW5nIHBhcmFtZXRlcnMgdG8gcGVyZm9ybSBhY3Rpb25zIG9uIG91ciBiZWhhbGYuICBUaGlzIGlzIGJlY2F1c2Ugd2UndmUgdXBsb2FkZWQgYSBmaWxlIHRvIGdyYW50IHVzIGFjY2VzcyBpbnRvIHRoZSBjb250YWluZXIuICBUaGlzIGlzIGJlY2F1c2UgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc2VjdXJpdHkuc255ay5pby92dWxuL1NOWUstSkFWQS1PUkdBUEFDSEVUT01DQVQtNDUxNTE0IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkNWRS0yMDE3LTEyNjE3IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGFuIGFyYml0cmFyeSBjb2RlIGV4ZWN1dGlvbiB2dWxuZXJhYmlsaXR5LCBhbmQgd2UncmUgc2VuZGluZyBpbiBhcmJpdHJhcnkgY29kZSB0byBydW4hIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBzb2x1dGlvbiB0byB0aGlzIHZ1bG5lcmFiaWxpdHkgaXMgdG8gdXNlIGEgbmV3ZXIgdmVyc2lvbiBvZiB0b21jYXQuICBXaGVuIHdlIHBhdGNoIHRoZSBEb2NrZXJmaWxlIHRvIHVzZSBhIG5ld2VyIHZlcnNpb24sIHRoZSB2dWxuZXJhYmlsaXR5IGdvZXMgYXdheS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}