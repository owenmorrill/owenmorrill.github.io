{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/github-integration.md?vue&type=template&id=b3204832&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/github-integration.md","mtime":1647024045482},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiZ2l0aHViLWludGVncmF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNnaXRodWItaW50ZWdyYXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgR2l0SHViIGludGVncmF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsncyBHaXRIdWIgaW50ZWdyYXRpb24gYWxsb3dzIHlvdSB0byBjb250aW51b3VzbHkgcGVyZm9ybSBzZWN1cml0eSBzY2FubmluZyBhY3Jvc3MgYWxsIHRoZSBpbnRlZ3JhdGVkIHJlcG9zaXRvcmllcywgZGV0ZWN0IHZ1bG5lcmFiaWxpdGllcyBpbiB5b3VyIG9wZW4gc291cmNlIGNvbXBvbmVudHMsIGFuZCBwcm92aWRlIGF1dG9tYXRlZCBmaXhlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlBsZWFzZSBub3RlLCAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiR2l0SHViIGludGVncmF0ZXMgcGVyIHVzZXIgYW5kIG5vdCBwZXIgb3JnIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBTZXR0aW5nIHVwIHRoaXMgaW50ZWdyYXRpb24gbWVhbnMgaXQgd2lsbCBiZSB1c2VkIGZvciBhbGwgb3JnYW5pemF0aW9ucyBhc3NvY2lhdGVkIHdpdGggeW91ciBhY2NvdW50LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoJ3slIGhpbnQgc3R5bGU9Indhcm5pbmciICV9XG5Vc2luZyBhICcpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBlcnNvbmFsIEFjY2VzcyBUb2tlbiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgaW4gYSBHaXRIdWIgaW50ZWdyYXRpb24gYWxsb3dzIG9wZW5pbmcgb2YgUFJzLCBidXQgbm90IGltcG9ydGluZyBwcm9qZWN0cy4gSW4gb3JkZXIgdG8gc2V0dXAgaW1wb3J0IG9mIHByb2plY3RzIHVzaW5nIGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5naXRodWIuY29tL2VuL2F1dGhlbnRpY2F0aW9uL2tlZXBpbmcteW91ci1hY2NvdW50LWFuZC1kYXRhLXNlY3VyZS9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiUGVyc29uYWwgQWNjZXNzIFRva2VuIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgdXNlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9ndWlkZS9naXRodWItZW50ZXJwcmlzZS1pbnRlZ3JhdGlvbi5odG1sIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkdpdEh1YiBFbnRlcnByaXNlIGludGVncmF0aW9uIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuXG57JSBlbmRoaW50ICV9IiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic2V0dGluZy11cC1hLWdpdGh1Yi1pbnRlZ3JhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2V0dGluZy11cC1hLWdpdGh1Yi1pbnRlZ3JhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTZXR0aW5nIHVwIGEgR2l0SHViIEludGVncmF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiR28gdG8gdGhlIEludGVncmF0aW9ucyBwYWdlIGFuZCBjbGljayBvbiDigJxHaXRIdWLigJ0uIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2hvb3NlIHdoZXRoZXIgeW91J2QgbGlrZSB0byBnaXZlIFNueWsgYWNjZXNzIHRvIGJvdGggcHVibGljIGFuZCBwcml2YXRlIHJlcG9zaXRvcmllcyBvciBvbmx5IHRvIHB1YmxpYyByZXBvc2l0b3JpZXMuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdXaGVuIHRoZSBHaXRIdWIgYXV0aG9yaXphdGlvbiBzY3JlZW4gb3BlbnMsIGNsaWNrIG9uICJBdXRob3JpemUgc255ayIgdG8gcHJvdmlkZSBpdCB3aXRoIGFuIGFjY2VzcyB0byB5b3VyIHJlcG9zaXRvcmllcy4nCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNlbGVjdCB0aGUgcmVwb3MgeW91J2QgbGlrZSB0byBpbXBvcnQgdG8gU255ay4gV2hlbiBkb25lLCBjbGljayBvbiB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBZGQgc2VsZWN0ZWQgcmVwb3NpdG9yaWVzIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBidXR0b24sIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UuIE9uY2UgY2xpY2tlZCwgU255ayB3aWxsIHN0YXJ0IHNjYW5uaW5nIHRoZSBzZWxlY3RlZCByZXBvcyBmb3IgZGVwZW5kZW5jeSBmaWxlcyAobWVhbmluZyBwYWNrYWdlLmpzb24sIHBvbS54bWwsIGV0Yy4pIGluIHRoZSBlbnRpcmUgZGlyZWN0b3J5IHRyZWUgYW5kIGltcG9ydCB0aGVtIHRvIFNueWsgYXMgcHJvamVjdHM6IgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgaW1wb3J0ZWQgcHJvamVjdHMgbm93IGFwcGVhciBpbiB5b3VyIFByb2plY3RzIHBhZ2UgYW5kIGFyZSBjb250aW51b3VzbHkgY2hlY2tlZCBmb3IgdnVsbmVyYWJpbGl0aWVzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3doaWNoX3JlcG9zICgzKSAoNSkgKDkpICg3KSAoMTgpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxMCkgKDI4KS5qcGc+KSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJnaXRodWItaW50ZWdyYXRpb24tZmVhdHVyZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2dpdGh1Yi1pbnRlZ3JhdGlvbi1mZWF0dXJlcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHaXRIdWIgSW50ZWdyYXRpb24gRmVhdHVyZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25jZSB0aGUgaW50ZWdyYXRpb24gaXMgaW4gcGxhY2UsIHlvdSdsbCBiZSBhYmxlIHRvIGVuam95IHRoZSBmb2xsb3dpbmcgY2FwYWJpbGl0aWVzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfMS1wcm9qZWN0LWxldmVsLXNlY3VyaXR5LXJlcG9ydHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLXByb2plY3QtbGV2ZWwtc2VjdXJpdHktcmVwb3J0cyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMS4gUHJvamVjdCBsZXZlbCBzZWN1cml0eSByZXBvcnRzIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayB3aWxsIHByb2R1Y2UgYWR2YW5jZWQgc2VjdXJpdHkgcmVwb3J0cywgYWxsb3dpbmcgeW91IHRvIGV4cGxvcmUgdGhlIHZ1bG5lcmFiaWxpdGllcyBmb3VuZCBpbiB5b3VyIHJlcG9zaXRvcmllcyBhbmQgZml4IHRoZW0gcmlnaHQgYXdheSBieSBvcGVuaW5nIGEgZml4IHB1bGwgcmVxdWVzdCBkaXJlY3RseSB0byB5b3VyIHJlcG9zaXRvcnksIHdpdGggdGhlIHJlcXVpcmVkIHVwZ3JhZGVzIG9yIHBhdGNoZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGlzIGFuIGV4YW1wbGUgb2YgYSBwcm9qZWN0LWxldmVsIHNlY3VyaXR5IHJlcG9ydDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvbWNlY2xpcDAtMjItICgyKSAoNSkgKDYpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMTApICgzMCkucG5nPikiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiXzItcHJvamVjdC1tb25pdG9yaW5nLWFuZC1hdXRvbWF0aWMtZml4LXB1bGwtcmVxdWVzdHMiLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI18yLXByb2plY3QtbW9uaXRvcmluZy1hbmQtYXV0b21hdGljLWZpeC1wdWxsLXJlcXVlc3RzIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIjIuIFByb2plY3QgbW9uaXRvcmluZyBhbmQgYXV0b21hdGljIGZpeCBwdWxsIHJlcXVlc3RzIiksCiAgICAgICAgICBdKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayB3aWxsIGZyZXF1ZW50bHkgc2NhbiB5b3VyIHByb2plY3RzIG9uIGVpdGhlciBhIGRhaWx5IG9yIGEgd2Vla2x5IGJhc2lzLiBXaGVuIG5ldyB2dWxuZXJhYmlsaXRpZXMgYXJlIGZvdW5kLCBpdCB3aWxsIG5vdGlmeSB5b3UgYnkgZW1haWwgYW5kIGJ5IG9wZW5pbmcgYXV0b21hdGVkIHB1bGwgcmVxdWVzdHMgd2l0aCBmaXhlcyB0byByZXBvc2l0b3JpZXMuIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiBhIGZpeCBwdWxsIHJlcXVlc3Qgb3BlbmVkIGJ5IFNueWs6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3V1aWQtNmNmZGFmMGItYzM0OS00NjhkLWZlNjUtNGY4MGJhZDExMGVhLWVuLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJpbWFnZTcucG5nIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBjYW4gcmV2aWV3IGFuZCBhZGp1c3QgdGhlIGF1dG9tYXRpYyBmaXggcHVsbCByZXF1ZXN0IHNldHRpbmdzIGJ5IG5hdmlnYXRpbmcgdG8gdGhlIEdpdEh1YiBJbnRlZ3JhdGlvbiBTZXR0aW5ncyBwYWdlIGluIFNueWsgKFNldHRpbmdzIC0tPiBJbnRlZ3JhdGlvbiAtLT4gR2l0SHViKToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvbWNlY2xpcDQgKDEpICgyKSAoNikgKDcpICgzKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMTApICgzMCkucG5nPikiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiY29tbWl0LXNpZ25pbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbW1pdC1zaWduaW5nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb21taXQgU2lnbmluZyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWxsIHRoZSBjb21taXRzIGluIFNueWsncyBQUnMgYXJlIGRvbmUgYnkgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJtYWlsdG86c255ay1ib3RAc255ay5pbyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoInNueWstYm90QHNueWsuaW8iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gYSB2ZXJpZmllZCB1c2VyIG9uIEdpdEh1YiwgYW5kIHNpZ25lZCB3aXRoIGEgUEdQIGtleS4gVGhlcmVmb3JlLCBhbGwgU255ayBQUnMgd2lsbCBhcHBlYXIgYXMgdmVyaWZpZWQgb24gR2l0SHViLCBwcm92aWRpbmcgeW91ciBkZXZlbG9wZXJzIGNvbmZpZGVuY2UgdGhhdCB0aGUgZml4IC8gdXBncmFkZSBQUnMgYXJlIGdlbmVyYXRlZCBieSBhIHRydXN0ZWQgc291cmNlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cblRoaXMgZmVhdHVyZSBpcyAnKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJub3QiKV0pLAogICAgICAgIF92bS5fdigiIHN1cHBvcnRlZCBmb3IgYnJva2VyZWQgR2l0SHViIGludGVncmF0aW9ucy5cbnslIGVuZGhpbnQgJX0iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiXzMtcHVsbC1yZXF1ZXN0LXRlc3RpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18zLXB1bGwtcmVxdWVzdC10ZXN0aW5nIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIzLiBQdWxsIHJlcXVlc3QgdGVzdGluZyIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgd2lsbCB0ZXN0IGFueSBuZXdseSBjcmVhdGVkIHB1bGwgcmVxdWVzdCBpbiB5b3VyIHJlcG9zaXRvcmllcyBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIGFuZCBzZW5kIGEgc3RhdHVzIGNoZWNrIHRvIEdpdEh1YiBzbyB5b3UgY2FuIHNlZSB3aGV0aGVyIHRoZSBwdWxsIHJlcXVlc3QgaW50cm9kdWNlcyBuZXcgc2VjdXJpdHkgaXNzdWVzLCBkaXJlY3RseSBmcm9tIEdpdEh1Yi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBpcyBob3cgU255ayBwdWxsIHJlcXVlc3QgY2hlY2tzIGFwcGVhciBvbiB0aGUgUHVsbCBSZXF1ZXN0IHBhZ2Ugb24gR2l0SHViOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy91dWlkLTg3MTEzODMzLWJlNzktZGJlMi04ODYwLWEzZjIyNGQ2NTRjNC1lbiAoMikgKDIpICg2KSAoNSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEwKSAoMjEpLnBuZz4pIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBjYW4gcmV2aWV3IGFuZCBhZGp1c3QgdGhlIHB1bGwgcmVxdWVzdCB0ZXN0cyBzZXR0aW5ncyBieSBuYXZpZ2F0aW5nIHRvIHRoZSBHaXRIdWIgSW50ZWdyYXRpb24gIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNldHRpbmdzIildKSwKICAgICAgICBfdm0uX3YoIiBwYWdlIGluIFNueWsgKFNldHRpbmdzIC0tPiBJbnRlZ3JhdGlvbiAtLT4gR2l0SHViKToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL21jZWNsaXA1ICgxKS5wbmc+KSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAicmVxdWlyZWQtcGVybWlzc2lvbnMtc2NvcGUtZm9yLXRoZS1naXRodWItaW50ZWdyYXRpb24iLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI3JlcXVpcmVkLXBlcm1pc3Npb25zLXNjb3BlLWZvci10aGUtZ2l0aHViLWludGVncmF0aW9uIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgUmVxdWlyZWQgcGVybWlzc2lvbnMgc2NvcGUgZm9yIHRoZSBHaXRIdWIgaW50ZWdyYXRpb24iKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibm9uLWJyb2tlcmVkLWdpdGh1Yi1pbnRlZ3JhdGlvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI25vbi1icm9rZXJlZC1naXRodWItaW50ZWdyYXRpb25zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE5vbi1Ccm9rZXJlZCBHaXRIdWIgSW50ZWdyYXRpb25zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk9wZXJhdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHZpYSB0aGUgU255ayBVSSwgZm9yIGV4YW1wbGUsIG9wZW5pbmcgYSBGaXggUFIgb3IgcmV0ZXN0aW5nIGEgcHJvamVjdCwgYXJlIHBlcmZvcm1lZCBvbiBiZWhhbGYgb2YgdGhlIGFjdGluZyB1c2VyLiBUaGVyZWZvcmUsIGEgdXNlciB0aGF0IHdhbnRzIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24gb24gR2l0SHViIHZpYSB0aGUgU255ayBVSSwgbXVzdCBjb25uZWN0IHRoZWlyIEdpdEh1YiBhY2NvdW50IHRvIFNueWsgYW5kIGhhdmUgdGhlIHJlcXVpcmVkIHBlcm1pc3Npb25zIHNjb3BlIGZvciB0aGUgcmVwb3NpdG9yaWVzIHRoZXkgd291bGQgbGlrZSB0byBwZXJmb3JtIHRoZXNlIG9wZXJhdGlvbnMgZm9yLiBTZWUgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUmVxdWlyZWQgcGVybWlzc2lvbnMgc2NvcGUgZm9yIHJlcG9zaXRvcmllcyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBzZWN0aW9uIGZvciBtb3JlIGRldGFpbHMuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiT3BlcmF0aW9ucyB3aGljaCBhcmUgbm90IHRyaWdnZXJlZCB2aWEgdGhlIFVJLCBzdWNoIGFzIGRhaWx5IC8gd2Vla2x5IHRlc3RzIGFuZCBhdXRvbWF0aWMgUFJzIChmaXggYW5kIHVwZ3JhZGUpIGFyZSBwZXJmb3JtZWQgb24gYmVoYWxmIG9mIGEgcmFuZG9tIFNueWsgb3JnYW5pemF0aW9uIG1lbWJlcnMgd2hvIGhhdmUgY29ubmVjdGVkIHRoZWlyIEdpdEh1YiBhY2NvdW50cyB0byBTbnlrIGFuZCBoYXZlIHRoZSByZXF1aXJlZCBwZXJtaXNzaW9ucyBzY29wZSBmb3IgdGhlIHJlcG9zaXRvcnkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTb21lIG9wZXJhdGlvbnMgKHN1Y2ggYXMgY3JlYXRpbmcgdGhlIFBSKSBtYXkgb2NjYXNpb25hbGx5IGJlIHBlcmZvcm1lZCBieSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJtYWlsdG86c255ay1ib3RAc255ay5pbyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigic255ay1ib3RAc255ay5pbyIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBmb3IgcHVibGljIHJlcG9zaXRvcmllcyB0aGF0IGFyZSBub24tYnJva2VyZWQuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cbicpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGUiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIlxuQSBTbnlrIG9yZ2FuaXphdGlvbiBhZG1pbiBjYW4gY29uZmlndXJlIGEgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL29wZW5pbmctZml4LWFuZC11cGdyYWRlLXB1bGwtcmVxdWVzdHMtZnJvbS1hLWZpeGVkLWdpdGh1Yi1hY2NvdW50Lmh0bWwiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAic3BlY2lmaWMgR2l0SHViIGFjY291bnQgb24gd2hvc2UgYmVoYWxmIHRoZSBQUnMgd2lsbCBiZSBvcGVuZWQiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gSW4gdGhpcyBjYXNlLCBTbnlrIHdpbGwgY29udGludWUgdXNpbmcgYSByYW5kb20gU255ayBvcmdhbml6YXRpb24gbWVtYmVy4oCZcyBHaXRIdWIgYWNjb3VudCB0byBwZXJmb3JtIGFsbCB0aGUgb3RoZXIgb3BlcmF0aW9ucy4gVGhlcmVmb3JlLCB1c2luZyB0aGlzIGZlYXR1cmUgZG9lcyBub3QgZWxpbWluYXRlIHRoZSBuZWVkIGZvciBjb25uZWN0aW5nIHVzZXJz4oCZIEdpdEh1YiBhY2NvdW50cyB0byBTbnlrLlxueyUgZW5kaGludCAlfSIKICAgICAgICAgICksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYnJva2VyZWQtZ2l0aHViLWludGVncmF0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYnJva2VyZWQtZ2l0aHViLWludGVncmF0aW9ucyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCcm9rZXJlZCBHaXRIdWIgSW50ZWdyYXRpb25zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFsbCB0aGUgb3BlcmF0aW9ucywgYm90aCB0aGUgb25lcyB0aGF0IGFyZSB0cmlnZ2VyZWQgdmlhIHRoZSBVSSBhbmQgdGhlIGF1dG9tYXRpYyBvbmVzLCBhcmUgcGVyZm9ybWVkIG9uIGJlaGFsZiBvZiBhIEdpdEh1YiBzZXJ2aWNlIGFjY291bnQgdGhhdCBpdHMgdG9rZW4gaXMgY29uZmlndXJlZCB3aXRoIHRoZSBCcm9rZXIuIFRoaXMgaXMgdGhlIGJyZWFrZG93biBvZiB0aGUgcmVxdWlyZWQgYWNjZXNzIHNjb3BlcyBmb3IgdGhlIGNvbmZpZ3VyZWQgdG9rZW46IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJBY3Rpb24iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIldoeT8iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlJlcXVpcmVkIHBlcm1pc3Npb25zIGluIEdpdEh1YiIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJEYWlseSAvIHdlZWtseSB0ZXN0cyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJGb3IgcmVhZGluZyBtYW5pZmVzdCBmaWxlcyBpbiBwcml2YXRlIHJlcG9zIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvIChhbGwpIildKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigiTWFudWFsIGZpeCBwdWxsIHJlcXVlc3RzICh0cmlnZ2VyZWQgYnkgdGhlIHVzZXIpIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiRm9yIGNyZWF0aW5nIGZpeCBQUnMgaW4gdGhlIG1vbml0b3JlZCByZXBvcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX2MoImVtIiwgW192bS5fdigicmVwbyAoYWxsKSIpXSldKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkF1dG9tYXRpYyBmaXggYW5kIHVwZ3JhZGUgcHVsbCByZXF1ZXN0cyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGb3IgY3JlYXRpbmcgZml4IC8gdXBncmFkZSBQUnMgaW4gdGhlIG1vbml0b3JlZCByZXBvcyIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvIChhbGwpIildKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiU255ayB0ZXN0cyBvbiBwdWxsIHJlcXVlc3RzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRm9yIHNlbmRpbmcgcHVsbCByZXF1ZXN0IHN0YXR1cyBjaGVja3Mgd2hlbmV2ZXIgYSBuZXcgUFIgaXMgY3JlYXRlZCAvIGFuIGV4aXN0aW5nIFBSIGlzIHVwZGF0ZWQiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX2MoImVtIiwgW192bS5fdigicmVwbyAoYWxsKSIpXSldKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkltcG9ydGluZyBuZXcgcHJvamVjdHMgdG8gU255ayIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgJ0ZvciBwcmVzZW50aW5nIGEgbGlzdCBvZiBhbGwgdGhlIGF2YWlsYWJsZSByZXBvcyBpbiB0aGUgR2l0SHViIG9yZyBpbiB0aGUgIkFkZCBQcm9qZWN0cyIgc2NyZWVuIChpbXBvcnQgcG9wdXApJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW19jKCJlbSIsIFtfdm0uX3YoImFkbWluOnJlYWQ6b3JnLCByZXBvIChhbGwpIildKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigiU255ayB0ZXN0cyBvbiBwdWxsIHJlcXVlc3RzIC0gaW5pdGlhbCBjb25maWd1cmF0aW9uIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJGb3IgYWRkaW5nIFNueWsncyB3ZWJob29rcyB0byB0aGUgaW1wb3J0ZWQgcmVwb3MsIHNvIFNueWsgd2lsbCBiZSBpbmZvcm1lZCB3aGVuZXZlciBwdWxsIHJlcXVlc3RzIGFyZSBjcmVhdGVkIG9yIHVwZGF0ZWQgYW5kIGJlIGFibGUgdG8gdHJpZ2dlciBzY2FucyIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiZW0iLCBbX3ZtLl92KCJhZG1pbjpyZXBvX2hvb2tzIChyZWFkICYgd3JpdGUpIildKV0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAicmVxdWlyZWQtcGVybWlzc2lvbnMtc2NvcGUtZm9yLXJlcG9zaXRvcmllcyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcmVxdWlyZWQtcGVybWlzc2lvbnMtc2NvcGUtZm9yLXJlcG9zaXRvcmllcyIgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFJlcXVpcmVkIHBlcm1pc3Npb25zIHNjb3BlIGZvciByZXBvc2l0b3JpZXMgIiksCiAgICAgICAgICBfYygiYSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiI2hfMDFlZWZ2ajE0cDhiM2RlcGVmZnZ5dmR3emoiLAogICAgICAgICAgICAgIGlkOiAiaF8wMWVlZnZqMTRwOGIzZGVwZWZmdnl2ZHd6aiIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9KSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gb3JkZXIgZm9yIFNueWsgdG8gYmUgYWJsZSB0byBwZXJmb3JtIHRoZSByZXF1aXJlZCBvcGVyYXRpb24gb24gbW9uaXRvciByZXBvc2l0b3JpZXMsIG1lYW5pbmcgcmVhZGluZyBtYW5pZmVzdCBmaWxlcyBvbiBhIGZyZXF1ZW50IGJhc2lzIGFuZCBvcGVuaW5nIGZpeCBvciB1cGdyYWRlIFBScy4gVGhlIGFjY291bnRzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byBTbnlrIChlaXRoZXIgZGlyZWN0bHkgb3IgdmlhIEJyb2tlcikgbmVlZCB0byBoYXZlIHRoZSBmb2xsb3dpbmcgYWNjZXNzIHRvIHRoZSByZXBvc2l0b3JpZXM6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJBY3Rpb24iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIldoeT8iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlJlcXVpcmVkIHBlcm1pc3Npb25zIG9uIHRoZSByZXBvc2l0b3J5IildKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkRhaWx5IC8gd2Vla2x5IHRlc3RzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkZvciByZWFkaW5nIG1hbmlmZXN0IGZpbGVzIGluIHByaXZhdGUgcmVwb3MiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW19jKCJlbSIsIFtfdm0uX3YoIldyaXRlIildKSwgX3ZtLl92KCIgb3IgYWJvdmUiKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiU255ayB0ZXN0cyBvbiBwdWxsIHJlcXVlc3RzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRm9yIHNlbmRpbmcgcHVsbCByZXF1ZXN0IHN0YXR1cyBjaGVja3Mgd2hlbmV2ZXIgYSBuZXcgUFIgaXMgY3JlYXRlZCAvIGFuIGV4aXN0aW5nIFBSIGlzIHVwZGF0ZWQiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX2MoImVtIiwgW192bS5fdigiV3JpdGUiKV0pLCBfdm0uX3YoIiBvciBhYm92ZSIpXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPcGVuaW5nIGZpeCBhbmQgdXBncmFkZSBwdWxsIHJlcXVlc3RzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkZvciBjcmVhdGluZyBmaXggLyB1cGdyYWRlIFBScyBpbiB0aGUgbW9uaXRvcmVkIHJlcG9zIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW19jKCJlbSIsIFtfdm0uX3YoIldyaXRlIildKSwgX3ZtLl92KCIgb3IgYWJvdmUiKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigiU255ayB0ZXN0cyBvbiBwdWxsIHJlcXVlc3RzIC0gaW5pdGlhbCBjb25maWd1cmF0aW9uIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJGb3IgYWRkaW5nIFNueWsncyB3ZWJob29rcyB0byB0aGUgaW1wb3J0ZWQgcmVwb3MsIHNvIFNueWsgd2lsbCBiZSBpbmZvcm1lZCB3aGVuZXZlciBwdWxsIHJlcXVlc3RzIGFyZSBjcmVhdGVkIG9yIHVwZGF0ZWQgYW5kIGJlIGFibGUgdG8gdHJpZ2dlciBzY2FucyIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiZW0iLCBbX3ZtLl92KCJBZG1pbiIpXSldKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJfMS1vcGVuaW5nLWZpeC1hbmQtdXBncmFkZS1wdWxsLXJlcXVlc3RzLWZyb20tYS1maXhlZC1naXRodWItYWNjb3VudCIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjXzEtb3BlbmluZy1maXgtYW5kLXVwZ3JhZGUtcHVsbC1yZXF1ZXN0cy1mcm9tLWEtZml4ZWQtZ2l0aHViLWFjY291bnQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiMS4gT3BlbmluZyBmaXggYW5kIHVwZ3JhZGUgcHVsbCByZXF1ZXN0cyBmcm9tIGEgZml4ZWQgR2l0SHViIGFjY291bnQiCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayBhbGxvd3MgeW91IHRvIGNvbmZpZ3VyZSBhIHNwZWNpZmljIEdpdEh1YiBhY2NvdW50IG9uIHdob3NlIGJlaGFsZiB0aGUgZml4IGFuZCB1cGdyYWRlIFBScyB3aWxsIGJlIG9wZW5lZC4gUGxlYXNlIG5vdGUgdGhhdCB0aGUgY29uZmlndXJlZCBhY2NvdW50IGlzIG9ubHkgdXNlZCBmb3Igb3BlbmluZyBQUnMuIEFsbCB0aGUgb3RoZXIgb3BlcmF0aW9ucyB3aWxsIHN0aWxsIGJlIHBlcmZvcm1lZCBvbiBiZWhhbGYgb2YgYSByYW5kb20gU255ayBvcmdhbml6YXRpb24gbWVtYmVyIHdobyBoYXMgY29ubmVjdGVkIHRoZWlyIEdpdEh1YiBhY2NvdW50cyB0byBTbnlrLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiBvcmRlciB0byB1c2UgdGhpcyBmZWF0dXJlLCB5b3UnbGwgbmVlZCB0byBkbyB0aGUgZm9sbG93aW5nOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJPcGVuIEdpdEh1YidzIEludGVncmF0aW9ucyBTZXR0aW5ncyBwYWdlIGluIFNueWsgYXBwIGJ5IGNsaWNraW5nIG9uICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTZXR0aW5ncyIpXSksCiAgICAgICAgICBfdm0uX3YoIiDihpIgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJJbnRlZ3JhdGlvbnMiKV0pLAogICAgICAgICAgX3ZtLl92KCIg4oaSICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiR2l0SHViIildKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkVuYWJsZSB0aGUgdG9nZ2xlIGJ1dHRvbiB1bmRlciB0aGUgIiksCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigiT3BlbiBmaXggYW5kIHVwZ3JhZGUgcHVsbCByZXF1ZXN0cyBmcm9tIGEgZml4ZWQgR2l0SHViIiksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiYWNjb3VudCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBzZXR0aW5nOiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIGZvciBjcmVhdGluZyBhIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiBpbiBHaXRIdWIgMi4gUHJvdmlkZSB0aGUgbmV3bHkgZ2VuZXJhdGVkIHRva2VuIHRvIFNueWsgc28gaXQgY2FuIGJlIHVzZWQgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIEdpdEh1YiAobWVhbmluZyBvcGVuaW5nIEZpeCBQUnMgYW5kIGV0YykiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9zY3JlZW4tc2hvdC0yMDIwLTA5LTI5LWF0LTIxLjI3LjMwLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiSW1wb3J0YW50IG5vdGU6IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk1ha2Ugc3VyZSB0aGF0IHRoZSBHaXRIdWIgYWNjb3VudCBmb3Igd2hpY2ggdGhlIHRva2VuIGlzIHByb3ZpZGVkLCBoYXMgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJ3cml0ZSIpXSldKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGxldmVsIHBlcm1pc3Npb25zIG9yIGFib3ZlLCB0byB0aGUgcmVwb3MgeW91J2QgbGlrZSB0byBtb25pdG9yIHdpdGggU255ay4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJSZWFkIG1vcmUgYWJvdXQgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL2dpdGh1Yi1pbnRlZ3JhdGlvbi5odG1sI3JlcXVpcmVkLXBlcm1pc3Npb25zLXNjb3BlLWZvci10aGUtZ2l0aHViLWludGVncmF0aW9uIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJyZXBvc2l0b3J5IHBlcm1pc3Npb24gbGV2ZWxzIG9uIEdpdEh1YiIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIl8yLXB1bGwtcmVxdWVzdC1hc3NpZ25lZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18yLXB1bGwtcmVxdWVzdC1hc3NpZ25lZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjIuIFB1bGwgcmVxdWVzdCBhc3NpZ25lZXMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3ByLWFzc2lnbm1lbnQiLCBpZDogInByLWFzc2lnbm1lbnQiIH0gfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgY2FuIGF1dG9tYXRpY2FsbHkgYXNzaWduIHB1bGwgcmVxdWVzdHMgaXQgY3JlYXRlcyB0byBoZWxwIGVuc3VyZSB0aGF0IHRoZXkgYXJlIGFjdGlvbmVkIGJ5IHRoZSByaWdodCBwZW9wbGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgY2FuIGJlIGVuYWJsZWQgZm9yIHRoZSBHaXRIdWIgaW50ZWdyYXRpb24gKGFuZCBhbGwgcHJvamVjdHMgaW1wb3J0ZWQgdmlhIEdpdEh1YiksIG9yIG9uIGEgcGVyLXByb2plY3QgYmFzaXMuIFRoaXMgZmVhdHVyZSBpcyBzdXBwb3J0ZWQgb25seSBmb3IgcHJpdmF0ZSByZXBvc2l0b3JpZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVzZXJzIGNhbiBlaXRoZXIgYmUgbWFudWFsbHkgc3BlY2lmaWVkIChhbmQgYWxsIHdpbGwgYmUgYXNzaWduZWQpIG9yIGF1dG9tYXRpY2FsbHkgc2VsZWN0ZWQgYmFzZWQgb24gdGhlIGxhc3QgY29tbWl0IHVzZXIgYWNjb3VudC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJFbmFibGluZyBmb3IgYWxsIHByb2plY3RzIHdpdGhpbiB0aGUgR2l0aHViIGludGVncmF0aW9uIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJHbyB0byBHaXRIdWIncyBJbnRlZ3JhdGlvbiAiKSwKICAgICAgICBfYygiZW0iLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNldHRpbmdzIildKV0pLAogICAgICAgIF92bS5fdigiIHBhZ2UgaW4gU255ayAoU2V0dGluZ3MgLS0+IEludGVncmF0aW9uIC0tPiBHaXRIdWIpOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9jb2RlLWFzc2lnbmVlcy1jb250cmlicy5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuYWJsZSBmb3Igb25lIHByb2plY3QiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkdvIHRvIHRoZSBwcm9qZWN0J3Mgc2V0dGluZ3MsIGFuZCBmcm9tIHRoZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW50ZWdyYXRpb24gc2V0dGluZ3MiKV0pLAogICAgICAgIF92bS5fdigiIHRhYiB3aXRoaW4gdGhlIHByb2plY3Qgc2V0dGluZ3M6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2NvZGUtYXNzaWduZXNzLXByb2plY3QucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkaXNjb25uZWN0aW5nLXRoZS1naXRodWItaW50ZWdyYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Rpc2Nvbm5lY3RpbmctdGhlLWdpdGh1Yi1pbnRlZ3JhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEaXNjb25uZWN0aW5nIHRoZSBHaXRIdWIgaW50ZWdyYXRpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255a+KAmXMgR2l0SHViIFNDTSBpbnRlZ3JhdGlvbiBsZXZlcmFnZXMgdGhlIG9BdXRoIGFwcCBpbnRlZ3JhdGlvbi4gSW4gY2FzZSB5b3UgaW50ZWdyYXRlZCB0byBHaXRIdWIgd2l0aG91dCB1c2luZyB0aGUgQnJva2VyLCB5b3UgY2FuIHNpbXBseSBkaXNjb25uZWN0IGl0IGJ5IGZvbGxvd2luZyB0aGVzZSBzdGVwczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9nIGludG8gdGhlIEdpdEh1YiBhY2NvdW50IHRoYXQgaW5pdGlhbGx5IGNyZWF0ZWQgdGhlIGludGVncmF0aW9uLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJOYXZpZ2F0ZSB0byB0aGUgYWNjb3VudCBzZXR0aW5ncyBhbmQgc2VsZWN0IHRoZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBcHBsaWNhdGlvbnMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdGFiIGluIHRoZSByaWdodCBzaWRlYmFyLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiU2VsZWN0IHRoZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBdXRob3JpemVkIE9BdXRoIEFwcHMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdGFiIFlvdSBjYW4gYWxzbyByZWFjaCB0aGUgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc2V0dGluZ3MvYXBwbGljYXRpb25zIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJBdXRob3JpemVkIE9BdXRoIEFwcHMgdGFiIGRpcmVjdGx5IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpbmQgdGhlICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYXBwLCBjbGljayBvbiB0aGUgMyBkb3RzIG9uIHRoZSByaWdodCwgYW5kIHNlbGVjdCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXZva2UiKV0pLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJldm9raW5nIHRoaXMgYWNjZXNzIGVmZmVjdGl2ZWx5IGRpc2Nvbm5lY3RzIFNueWvigJlzIGFjY2VzcyB0byB0aGF0IEdpdEh1YiBhY2NvdW50LiBFeGlzdGluZyBpbXBvcnRlZCBzbmFwc2hvdHMgd2lsbCBwZXJzaXN0IGluIFNueWsgYW5kIGNvbnRpbnVlIHRvIHJlc2NhbiBiYXNlZCBvbiB0aGUgZXhpc3Rpbmcgc25hcHNob3RzIHVudGlsIGRlbGV0ZWQuIFNueWsgd2lsbCBubyBsb25nZXIgYmUgYWJsZSB0byBpbXBvcnQgbmV3IHByb2plY3RzIGZyb20gdGhlIEdpdEh1YiBpbnRlZ3JhdGlvbiBhbmQgd2lsbCBubyBsb25nZXIgcmUtc2NhbiBvbiBuZXcgY29kZSBtZXJnZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0FkZGl0aW9uYWxseSwgaXQgaXMgcmVxdWlyZWQgdG8gY29uZmlybSB0aGF0IFNueWsgaXMgbm90IGVuYWJsZWQgb24gYW55IGV4aXN0aW5nICJCcmFuY2ggcHJvdGVjdGlvbiBydWxlcyI6IEdpdEh1YiAtIFJlcG9zaXRvcnkgLT4gU2V0dGluZ3MgLT4gQnJhbmNoZXMgLT4gQnJhbmNoIHByb3RlY3Rpb24gcnVsZXMgLT4gU3RhdHVzIGNoZWNrcyBmb3VuZCBpbiB0aGUgbGFzdCB3ZWVrIGZvciB0aGlzIHJlcG9zaXRvcnkuJwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImdpdGh1Yi1iYWRnZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdGh1Yi1iYWRnZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEdpdEh1YiBiYWRnZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25jZSB5b3XigJlyZSB2dWxuZXJhYmlsaXR5IGZyZWUsIHlvdSBjYW4gcHV0IGEgYmFkZ2Ugb24geW91ciBSRUFETUUgc2hvd2luZyB5b3VyIHBhY2thZ2UgaGFzIG5vIGtub3duIHNlY3VyaXR5IGhvbGVzLiBUaGlzIHdpbGwgc2hvdyB5b3VyIHVzZXJzIHlvdSBjYXJlIGFib3V0IHNlY3VyaXR5LCBhbmQgdGVsbCB0aGVtIHRoYXQgdGhleSBzaG91bGQgY2FyZSB0b28uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHRoZXJlIGFyZSBubyB2dWxuZXJhYmlsaXRpZXMsIHRoaXMgaXMgaW5kaWNhdGVkIGJ5IGEgZ3JlZW4gYmFkZ2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3V1aWQtY2I0MzhhYTQtMjI2ZS0yMTA5LWY5MDEtYzU5Y2EyMzM3MzJlLWVuLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgdnVsbmVyYWJpbGl0aWVzIGhhdmUgYmVlbiBmb3VuZCwgdGhlIHJlZCBiYWRnZSB3aWxsIHNob3cgdGhlIG51bWJlciBvZiB2dWxuZXJhYmlsaXRpZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3V1aWQtOTZkNmI0ZDEtYWZiNy1hMmJkLTA5M2QtZWFhOTZlMmFjMmMxLWVuLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gc2hvdyBhIGJhZGdlIGZvciBhIGdpdmVuIE5vZGUuanMsIFJ1Ynkgb3IgSmF2YSBHaXRIdWIgcmVwb3NpdG9yeSwgY29weSB0aGUgcmVsZXZhbnQgc25pcHBldCBiZWxvdyBhbmQgcmVwbGFjZSDigJx7dXNlcm5hbWV9L3tyZXBvfeKAnSB3aXRoIHRoZSBHaXRIdWIgdXNlcm5hbWUgYW5kIHJlcG8geW91IHdhbnQgdG8gdGVzdC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiSFRNTDoiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgIF92bS5fdignPCphIGhyZWY9Imh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi97dXNlcm5hbWV9L3tyZXBvfSI+JyksCiAgICAgICAgXSksCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3V1aWQtMjY3OGIyMTgtNjU5Zi02MWM2LThlMTQtNTc5NjRkZmIyYmM2LWVuLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJpbWFnZTIucG5nIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1hcmtkb3duOiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWyFbS25vd24gVnVsbmVyYWJpbGl0aWVzXShodHRwczovL3NueWsuaW8vdGVzdC9naXRodWIve3VzZXJuYW1lfS97cmVwb30vYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvZ2l0aHViL3t1c2VybmFtZX0ve3JlcG99KSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBiYWRnZSB3aWxsIHJlZmxlY3QgdGhlIHZ1bG5lcmFiaWxpdHkgc3RhdGUgb2YgdGhlIGxhdGVzdCBjb21taXQgb24gdGhlIG1hc3RlciBicmFuY2guIFRvIHNob3cgdGhlIHZ1bG5lcmFiaWxpdHkgc3RhdGUgb2YgYSBzcGVjaWZpYyBicmFuY2gsIHJlbGVhc2Ugb3IgdGFnLCBzaW1wbHkgYWRkIGl0cyBuYW1lIGFmdGVyIHRoZSByZXBvIG5hbWUgaW4gdGhlIFVSTC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIGV4YW1wbGUsIHRvIHNob3cgYSBiYWRnZSBmb3IgdGhlIDQueCBicmFuY2ggb2YgdGhlIGV4cHJlc3MgcmVwbywgdXNlIHRoZSBVUkwgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9leHByZXNzanMvZXhwcmVzcy80LngvYmFkZ2Uuc3ZnIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJodHRwczovL3NueWsuaW8vdGVzdC9naXRodWIvZXhwcmVzc2pzL2V4cHJlc3MvNC54L2JhZGdlLnN2ZyIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTdHlsZXMiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gY2hhbmdlIHRoZSBzdHlsZSBvZiB0aGUgYmFkZ2UsIHlvdSBjYW4gYWRkIHRoZSBmb2xsb3dpbmcgcXVlcnkgcGFyYW1ldGVycyBhZnRlciBiYWRnZS5zdmc6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3V1aWQtY2I0MzhhYTQtMjI2ZS0yMTA5LWY5MDEtYzU5Y2EyMzM3MzJlLWVuLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiY29kZSIsIFtfdm0uX3YoIj9zdHlsZT1mbGF0LXNxdWFyZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy91dWlkLWNiNDM4YWE0LTIyNmUtMjEwOS1mOTAxLWM1OWNhMjMzNzMyZS1lbi5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJzdHlsZT1wbGFzdGljIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIm5wbSBiYWRnZXMiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gc2hvdyBhIGJhZGdlIGZvciBhIGdpdmVuIG5wbSBwYWNrYWdlLCBjb3B5IHRoZSByZWxldmFudCBzbmlwcGV0IGJlbG93LCBhbmQgcmVwbGFjZSDigJx7bmFtZX3igJ0gd2l0aCB0aGUgbmFtZSBvZiB5b3VyIHBhY2thZ2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIkhUTUwiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJzwqaW1nIHNyYz0iaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvbnBtL3tuYW1lfS9iYWRnZS5zdmciIGFsdD0iS25vd24gVnVsbmVyYWJpbGl0aWVzIiBkYXRhLWNhbm9uaWNhbC1zcmM9Imh0dHBzOi8vc255ay5pby90ZXN0L25wbS97bmFtZX0iIHN0eWxlPSJtYXgtd2lkdGg6MTAwJTsiLz4nCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJNYXJrZG93biIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWyFbS25vd24gVnVsbmVyYWJpbGl0aWVzXShodHRwczovL3NueWsuaW8vdGVzdC9ucG0ve25hbWV9L2JhZGdlLnN2ZyldKGh0dHBzOi8vc255ay5pby90ZXN0L25wbS97bmFtZX0pIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGJhZGdlIHdpbGwgcmVmbGVjdCB0aGUgdnVsbmVyYWJpbGl0eSBzdGF0ZSBvZiB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhpcyBwYWNrYWdlLiBUbyBzaG93IHRoZSB2dWxuZXJhYmlsaXR5IHN0YXRlIG9mIGEgc3BlY2lmaWMgcGFja2FnZSwgeW91IGNhbiBzcGVjaWZ5IHRoZSBzcGVjaWZpYyB2ZXJzaW9uIGluIHRoZSBVUkwuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBleGFtcGxlLCB0byB0ZXN0IHZlcnNpb24gMS4yLjMgb2YgcGFja2FnZSBuYW1lLCB1c2UgdGhlIFVSTCAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvbnBtL25hbWUvMS4yLjMvYmFkZ2Uuc3ZnIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJodHRwczovL3NueWsuaW8vdGVzdC9ucG0vbmFtZS8xLjIuMy9iYWRnZS5zdmciKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJQcml2YXRlIHBhY2thZ2VzIGFuZCByZXBvcyIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCYWRnZXMgY3VycmVudGx5IG9ubHkgd29yayBmb3IgcHVibGljIG5wbSBwYWNrYWdlcyBhbmQgR2l0SHViIHJlcG9zaXRvcmllcywgYW5kIHdpbGwgZmFpbCBpZiBwb2ludGVkIGF0IGEgcHJpdmF0ZSByZXBvc2l0b3J5LiBUbyBjb250aW51b3VzbHkgd2F0Y2ggZm9yIHZ1bG5lcmFiaWxpdGllcyBpbiB5b3VyIEdpdEh1YiByZXBvc2l0b3JpZXMsIGJvdGggcHVibGljIGFuZCBwcml2YXRlLCBjb25zaWRlciBpbnRlZ3JhdGluZyB0aGVtIHdpdGggU255ay4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiQ3VzdG9tIG1hbmlmZXN0IGZpbGUgbG9jYXRpb25zIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiQnkgZGVmYXVsdCwgdGhlIGJhZGdlIHdpbGwgdGVzdCBhZ2FpbnN0IHRoZSBmaXJzdCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvcHJvZHVjdHMvc255ay1vcGVuLXNvdXJjZS9sYW5ndWFnZS1hbmQtcGFja2FnZS1tYW5hZ2VyLXN1cHBvcnQvIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJ2YWxpZCBtYW5pZmVzdCBmaWxlIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgaXQgZGV0ZWN0cyBpbiB0aGUgcm9vdCBvZiB5b3VyIHByb2plY3QuIiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91ciBtYW5pZmVzdCBmaWxlIGlzIGluIGFub3RoZXIgbG9jYXRpb24gb3RoZXIgdGhhbiB0aGUgcm9vdCBvZiB0aGUgcmVwb3NpdG9yeSwgb3IgaWYgeW91IGhhdmUgbXVsdGlwbGUgbWFuaWZlc3QgZmlsZXMgdGhhdCB5b3Ugd291bGQgbGlrZSB0byBzaG93IGEgYmFkZ2UgZm9yLCB5b3UgY2FuIHBhc3MgYSB0YXJnZXRGaWxlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXIgdG8gZGlyZWN0IHRoZSBiYWRnZSB0byB0ZXN0IGFnYWluc3QgYW5vdGhlciBzdXBwb3J0ZWQgbWFuaWZlc3QgZmlsZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiSFRNTDoiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgIF92bS5fdignPCphIGhyZWY9Imh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi97dXNlcm5hbWV9L3tyZXBvfSI+JyksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1hcmtkb3duOiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWyFbS25vd24gVnVsbmVyYWJpbGl0aWVzXShodHRwczovL3NueWsuaW8vdGVzdC9naXRodWIve3VzZXJuYW1lfS97cmVwb30vYmFkZ2Uuc3ZnP3RhcmdldEZpbGU9e3BhdGgtdG8tdGFyZ2V0LWZpbGV9KV0oaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvZ2l0aHViL3t1c2VybmFtZX0ve3JlcG99KSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}