{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/partner-workshops/amazon-web-services/aws-code-suite/snyk-security/exercise-fixing-the-vulnerability.md?vue&type=template&id=32c8cc0a&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/partner-workshops/amazon-web-services/aws-code-suite/snyk-security/exercise-fixing-the-vulnerability.md","mtime":1646940843088},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiZXhlcmNpc2UtZml4aW5nLXRoZS12dWxuZXJhYmlsaXR5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNleGVyY2lzZS1maXhpbmctdGhlLXZ1bG5lcmFiaWxpdHkiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRXhlcmNpc2UgLSBGaXhpbmcgdGhlIFZ1bG5lcmFiaWxpdHkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFjY29yZGluZyB0byB0aGUgcmVtZWRpYXRpb24sIHdlIG5lZWQgdG8gZml4IHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlByaW1lRmFjZXMiKV0pLAogICAgICAgIF92bS5fdigiIGRlcGVuZGVuY3kgYW5kIHVwZGF0ZSBpdCBmcm9tIHZlcnNpb24gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI2LjEiKV0pLAogICAgICAgIF92bS5fdigiIHRvICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiNi4yIildKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGV0IHVzIHByZXRlbmQgdGhlIGRldmVsb3BlciBmaXhlZCBpdCBhbmQgY2hlY2tlZCBpdCBpbiwgY29taW5nIGJhY2sgaW50byB0aGUgcGlwZWxpbmUuIFRoaXMgaXMgZG9uZSBieSBjaGFuZ2luZy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIn4vZW52aXJvbm1lbnQvYXdzLW1vZGVybml6YXRpb24td29ya3Nob3AvbW9kdWxlcy9jb250YWluZXJpemUtYXBwbGljYXRpb24vYXBwL3BvbS54bWwiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIkNoYW5naW5nOiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtdGV4dCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoIiZsdDt2ZXJzaW9uLnByaW1lZmFjZXM+Ni4xJmx0Oy92ZXJzaW9uLnByaW1lZmFjZXM+XG4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX2MoImVtIiwgW192bS5fdigiVG86IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigiJmx0O3ZlcnNpb24ucHJpbWVmYWNlcz42LjImbHQ7L3ZlcnNpb24ucHJpbWVmYWNlcz5cbiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlJ1biB0aGlzIGNvbW1hbmQgdG8gY29weSBvdmVyIG91ciBmaXhlZCB2ZXJzaW9uIGluIHRoZSBsYWI6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiY3AgbW9kdWxlcy9zbnlrL3BvbS54bWwgbW9kdWxlcy9jb250YWluZXJpemUtYXBwbGljYXRpb24vYXBwL1xuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJTYXZlIGNoYW5nZXM6IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdignZ2l0IGNvbW1pdCAtYW0gIkZpeCB2dWxuZXJhYmxlIG9wZW4gc291cmNlIGRlcC4iXG4nKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX2MoImVtIiwgW192bS5fdigiUHVzaDoiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCBwdXNoIC1mIGNvZGVjb21taXQgbWFzdGVyXG4iKV0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIHRpbWUgY2hlY2sgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDb2RlIEJ1aWxkZXIiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCB3ZSBzZWUgaXQgc3VjY2VlZGVkLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL3BhcnRuZXItd29ya3Nob3AtYXNzZXRzLnMzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tL3NueWtfNGJfYnVpbGQucG5nIiwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGVzdGVkIDM3IGRlcGVuZGVuY2llcyBmb3Iga25vd24gdnVsbmVyYWJpbGl0aWVzLCBubyB2dWxuZXJhYmxlIHBhdGhzIGZvdW5kLlxuTmV4dCBzdGVwczpcbi0gUnVuIGBzbnlrIG1vbml0b3JgIHRvIGJlIG5vdGlmaWVkIGFib3V0IG5ldyByZWxhdGVkIHZ1bG5lcmFiaWxpdGllcy5cbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGUgdnVsbmVyYWJpbGl0eSBpcyBmaXhlZCBhbmQgdGhlIGJ1aWxkIHN1Y2NlZWRlZCEiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJOZXh0LCB3ZSBhbHNvIHNlZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayIpXSksCiAgICAgICAgX3ZtLl92KCIgc3VjY2Vzc2Z1bGx5IHNjYW5uZWQgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRG9ja2VyIEltYWdlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGFuZCB0aGVyZSB3ZXJlIG5vIHBhY2thZ2UgZGVwZW5kZW5jeSBpc3N1ZXMgd2l0aCBvdXIgRG9ja2VyIGNvbnRhaW5lciEiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJDb250YWluZXJdIDIwMTgvMTEvMDkgMDM6NTQ6MTQgUnVubmluZyBjb21tYW5kICRQV0RVVElMUy9zbnlrIHRlc3QgLS1kb2NrZXIgJFJFUE9TSVRPUllfVVJJOmxhdGVzdFxuVGVzdGluZyAzMDAzMjY5MDI2MDAuZGtyLmVjci51cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9wZXRzdG9yZV9mcm9udGVuZDpsYXRlc3QuLi5cbk9yZ2FuaXphdGlvbjogc2FtcGxlLWludGVncmF0aW9uc1xuUGFja2FnZSBtYW5hZ2VyOiBycG1cbkRvY2tlciBpbWFnZTogMzAwMzI2OTAyNjAwLmRrci5lY3IudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vcGV0c3RvcmVfZnJvbnRlbmQ6bGF0ZXN0XG7inJMgVGVzdGVkIDE5MCBkZXBlbmRlbmNpZXMgZm9yIGtub3duIHZ1bG5lcmFiaWxpdGllcywgbm8gdnVsbmVyYWJsZSBwYXRocyBmb3VuZC5cbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}