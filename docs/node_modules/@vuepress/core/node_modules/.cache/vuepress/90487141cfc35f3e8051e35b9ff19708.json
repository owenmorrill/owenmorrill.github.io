{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/products/snyk-container/image-scanning-library/kubernetes-workload-and-image-scanning/automatic-import-deletion-of-kubernetes-workloads-projects/advanced-use-of-automatic-import-deletion.md?vue&type=template&id=6c3f98a8&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/products/snyk-container/image-scanning-library/kubernetes-workload-and-image-scanning/automatic-import-deletion-of-kubernetes-workloads-projects/advanced-use-of-automatic-import-deletion.md","mtime":1644439893055},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJyx7YXR0cnM6eyJzbG90LWtleSI6X3ZtLiRwYXJlbnQuc2xvdEtleX19LFtfYygnaDEnLHthdHRyczp7ImlkIjoiYWR2YW5jZWQtdXNlLW9mLWF1dG9tYXRpYy1pbXBvcnQtZGVsZXRpb24ifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNhZHZhbmNlZC11c2Utb2YtYXV0b21hdGljLWltcG9ydC1kZWxldGlvbiJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBBZHZhbmNlZCB1c2Ugb2YgYXV0b21hdGljIGltcG9ydC9kZWxldGlvbiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIklmIHlvdSBoYXZlIGFuIGFkdmFuY2VkIHVzZSBjYXNlIGZvciBhdXRvbWF0aWMgaW1wb3J0L2RlbGV0aW9uIG9mIEt1YmVybmV0ZXMgd29ya2xvYWQgcHJvamVjdHMsIHlvdSBjYW4gd3JpdGUgeW91ciBvd24gcnVsZXMuIFRoZSBjb250cm9sbGVyIGV2YWx1YXRlcyBwb2xpY3kgZGVjaXNpb25zIHVzaW5nIGEgcG9saWN5IGZpbGUgd3JpdHRlbiBpbiAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vd3d3Lm9wZW5wb2xpY3lhZ2VudC5vcmcvZG9jcy9sYXRlc3QvcG9saWN5LWxhbmd1YWdlLyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiUmVnbyBwb2xpY3kgbGFuZ3VhZ2UiKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpLF92bS5fdigiLiBFbnN1cmUgdGhlIGZpbGUgaXMgbmFtZWQgIiksX2MoJ3N0cm9uZycsW192bS5fdigid29ya2xvYWQtZXZlbnRzLnJlZ28iKV0pLF92bS5fdigiLiIpXSksX3ZtLl92KCIgIiksX2MoJ2gyJyx7YXR0cnM6eyJpZCI6InBvbGljeS1zeW50YXgifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNwb2xpY3ktc3ludGF4In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIFBvbGljeSBzeW50YXgiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJQcm92aWRlIHRoZSBwb2xpY3kgZmlsZSB0byB0aGUgU255ayBjb250cm9sbGVyIGluIGEgQ29uZmlnTWFwLiBUaGUgcG9saWN5IHN5bnRheCBsb29rcyBsaWtlIHRoaXM6IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJwYWNrYWdlIHNueWtcbm9yZ3MgOj0gW1wiPG9yZy1pZD5cIl1cbmRlZmF1bHQgd29ya2xvYWRfZXZlbnRzID0gZmFsc2VcbiIpXSldKV0pLF9jKCdwJyxbX3ZtLl92KCJJZiB5b3UgZmxpcCB0aGUgdmFsdWUgdG8gdHJ1ZSwgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGltcG9ydCBvciBkZWxldGUgIiksX2MoJ3N0cm9uZycsW192bS5fdigiZXZlcnl0aGluZyIpXSksX3ZtLl92KCIgaW4gdGhlIGNsdXN0ZXIuIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigieyUgaGludCBzdHlsZT1cIndhcm5pbmdcIiAlfVxuU2V0dGluZyB0aGUgd29ya2xvYWRfZXZlbnRzIGtleSB0byB0cnVlIGlzICIpLF9jKCdzdHJvbmcnLFtfdm0uX3YoIm5vdCByZWNvbW1lbmRlZCIpXSksX3ZtLl92KCIgYXMgc29tZSB3b3JrbG9hZCB0eXBlcyBsaWtlIEpvYnMgYW5kIFBvZHMgY2FuIGJlIG5vaXN5IGFuZCBnZW5lcmF0ZSBsb3RzIG9mIHdvcmtsb2FkIGltcG9ydHMgaW4geW91ciBTbnlrIG9yZ2FuaXphdGlvblxueyUgZW5kaGludCAlfSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkJvdGggIiksX2MoJ3N0cm9uZycsW192bS5fdigicGFja2FnZSBzbnlrIildKSxfdm0uX3YoIiBhbmQgdGhlIGtleSAiKSxfYygnc3Ryb25nJyxbX3ZtLl92KCJ3b3JrbG9hZF9ldmVudHMiKV0pLF92bS5fdigiIGFyZSBtYW5kYXRvcnkgYnkgU255ayBDb250cm9sbGVyLiIpXSksX3ZtLl92KCIgIiksX2MoJ2gyJyx7YXR0cnM6eyJpZCI6InVzaW5nLW1vcmUtdGhhbi1vbmUtb3JnIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjdXNpbmctbW9yZS10aGFuLW9uZS1vcmcifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgVXNpbmcgbW9yZSB0aGFuIG9uZSBvcmciKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJPcmdzIGlzIGEgbGlzdCBvZiBvcmdhbml6YXRpb24gcHVibGljIElEcy4gWW91IGNhbiBhZGQgbW9yZSB0aGFuIG9uZSBvcmdhbml6YXRpb24gdG8gdXNlIHRoZSBhdXRvLWltcG9ydCBhbmQgYXV0by1kZWxldGUgY2FwYWJpbGl0aWVzLiBZb3UgY2FuIGxvY2F0ZSB0aGlzIHB1YmxpYyBJRCBpbiB0aGUgc2V0dGluZ3MgcGFnZSBmb3IgdGhlIG9yZ2FuaXphdGlvbi4iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2Ugc255a1xub3JncyA6PSBbXCI8b3JnLWlkLTE+XCIsXCI8b3JnLWlkLTI+XCJdXG5kZWZhdWx0IHdvcmtsb2FkX2V2ZW50cyA9IGZhbHNlXG4iKV0pXSldKSxfYygnaDInLHthdHRyczp7ImlkIjoiZGVmaW5pbmctcnVsZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNkZWZpbmluZy1ydWxlcyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBEZWZpbmluZyBydWxlcyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRvIGRlZmluZSB5b3VyIG93biBydWxlcywgc2V0IGEgY29uZGl0aW9uIG9uIHRoZSAiKSxfYygnc3Ryb25nJyxbX3ZtLl92KCJ3b3JrbG9hZF9ldmVudHMiKV0pLF92bS5fdigiIGtleSBhbmQgYnkgcHJvdmlkaW5nIHlvdXIgb3JnYW5pemF0aW9uIHB1YmxpYyBJRC4gRm9yIGV4YW1wbGUsIHRvIGltcG9ydCB3b3JrbG9hZHMgZnJvbSB0aGUgIiksX2MoJ3N0cm9uZycsW192bS5fdigiZGVmYXVsdCIpXSksX3ZtLl92KCIgbmFtZXNwYWNlIGFuZCBhdXRvbWF0aWNhbGx5IGRlbGV0ZSB0aGVtIG9uIFNueWsgc2lkZSBvbmNlIHRoZXkgYXJlIGRlbGV0ZWQgZnJvbSB0aGUgY2x1c3RlciwgdGhlIHBvbGljeSB3b3VsZCBsb29rIGxpa2UgdGhpczoiKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoInBhY2thZ2Ugc255a1xub3JncyA6PSBbXCIxOTk4MmRmMi0wZWQ1LTRhMTYtYjM1NS1lNjUzNWNmYzQxZWZcIl1cbmRlZmF1bHQgd29ya2xvYWRfZXZlbnRzID0gZmFsc2Vcbndvcmtsb2FkX2V2ZW50cyB7XG4gICAgaW5wdXQubWV0YWRhdGEubmFtZXNwYWNlID09IFwiZGVmYXVsdFwiXG59XG4iKV0pXSldKSxfYygncCcsW192bS5fdigiSGVyZSwgIiksX2MoJ3N0cm9uZycsW192bS5fdigiaW5wdXQiKV0pLF92bS5fdigiIHJlZmVycyB0byB0aGUgS3ViZXJuZXRlcyBtZXRhZGF0YSBvZiB0aGUgd29ya2xvYWQgc2Nhbm5lZCBieSB0aGUgU255ayBjb250cm9sbGVyLiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIllvdSBjYW4gYWxzbyBjcmVhdGUgYSBwb2xpY3kgZm9yIHdvcmtsb2FkIGV2ZW50cyAoY3JlYXRpb24vZGVsZXRpb24pIHdpdGggYSBzcGVjaWZpYyBhbm5vdGF0aW9uOiIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigicGFja2FnZSBzbnlrXG5vcmdzIDo9IFtcIjE5OTgyZGYyLTBlZDUtNGExNi1iMzU1LWU2NTM1Y2ZjNDFlZlwiXVxuZGVmYXVsdCB3b3JrbG9hZF9ldmVudHMgPSBmYWxzZVxud29ya2xvYWRfZXZlbnRzIHtcbiAgICBpbnB1dC5tZXRhZGF0YS5hbm5vdGF0aW9ucy50ZWFtID09IFwiYXBvbGxvXCJcbn1cbiIpXSldKV0pLF9jKCdoMicse2F0dHJzOnsiaWQiOiJleGNsdWRpbmctd29ya2xvYWQtdHlwZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNleGNsdWRpbmctd29ya2xvYWQtdHlwZXMifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgRXhjbHVkaW5nIHdvcmtsb2FkIHR5cGVzIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiQXMgYmVzdCBwcmFjdGljZSwgd2UgcmVjb21tZW5kIGV4Y2x1ZGluZyBzcGVjaWZpYyB3b3JrbG9hZCB0eXBlcyBzdWNoIGFzIFBvZHMgYW5kIEpvYnMgZnJvbSB3b3JrbG9hZCBldmVudHMgKGNyZWF0aW9uL2RlbGV0aW9uKSwgYXMgdGhleSBjYW4gYmUgcmVhbGx5IG5vaXN5IGFuZCBjYW4gZ2VuZXJhdGUgbG90cyBvZiB3b3JrbG9hZCBpbXBvcnRzIGluIHlvdXIgU255ayBvcmdhbml6YXRpb24uIFlvdSBjYW4gZG8gdGhpcyB3aXRoIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSBwb2xpY3k6IildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJwYWNrYWdlIHNueWtcbm9yZ3MgOj0gW1wiMTk5ODJkZjItMGVkNS00YTE2LWIzNTUtZTY1MzVjZmM0MWVmXCJdXG5kZWZhdWx0IHdvcmtsb2FkX2V2ZW50cyA9IGZhbHNlXG53b3JrbG9hZF9ldmVudHMge1xuICAgIGlucHV0LmtpbmQgIT0gXCJKb2JcIlxuICAgIGlucHV0LmtpbmQgIT0gXCJQb2RcIlxufVxuIildKV0pXSksX2MoJ2gyJyx7YXR0cnM6eyJpZCI6ImNvbmZpZ3VyZS1zbnlrLWNvbnRyb2xsZXItdG8tdXNlLXRoZS1wb2xpY3kifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNjb25maWd1cmUtc255ay1jb250cm9sbGVyLXRvLXVzZS10aGUtcG9saWN5In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIENvbmZpZ3VyZSBTbnlrIGNvbnRyb2xsZXIgdG8gdXNlIHRoZSBwb2xpY3kiKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImt1YmVjdGwgY3JlYXRlIGNvbmZpZ21hcCBzbnlrLW1vbml0b3ItY3VzdG9tLXBvbGljaWVzIFxcXG4gICAgLW4gc255ay1tb25pdG9yIFxcXG4gICAgLS1mcm9tLWZpbGU9d29ya2xvYWQtZXZlbnRzLnJlZ28gIyBUaGlzIG5hbWUgaXMgaGFyZGNvZGVkXG5oZWxtIHVwZ3JhZGUgLS1pbnN0YWxsIHNueWstbW9uaXRvciBzbnlrLWNoYXJ0cy9zbnlrLW1vbml0b3IgXFxcbiAgICAtLW5hbWVzcGFjZSBzbnlrLW1vbml0b3IgXFxcbiAgICAtLXNldCBjbHVzdGVyTmFtZT1cIlByb2R1Y3Rpb24gY2x1c3RlclwiIFxcXG4gICAgLS1zZXQgd29ya2xvYWRQb2xpY2llc01hcD1zbnlrLW1vbml0b3ItY3VzdG9tLXBvbGljaWVzXG4iKV0pXSldKSxfYygncCcsW192bS5fdigiTm93IHlvdSBjYW4gZGVwbG95IHRoZSBTbnlrIGNvbnRyb2xsZXIsIG9yIHJlc3RhcnQgaXQgaWYgaXQgaXMgYWxyZWFkeSBydW5uaW5nIGluIG9yZGVyIHRvIHBpY2sgdXAgdGhlIHBvbGljeS4gWW91IHdpbGwgbm93IHNlZSBuZXcgd29ya2xvYWRzIGluIFNueWsuIildKV0pfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}