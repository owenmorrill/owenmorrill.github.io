{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/tutorials/github/securing-a-toolchain-with-snyk-and-github/part-1-open-source/section-1-find-vulnerabilities.md?vue&type=template&id=969921f4&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/tutorials/github/securing-a-toolchain-with-snyk-and-github/part-1-open-source/section-1-find-vulnerabilities.md","mtime":1644439893118},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAic2VjdGlvbi0xLWZpbmQtdnVsbmVyYWJpbGl0aWVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzZWN0aW9uLTEtZmluZC12dWxuZXJhYmlsaXRpZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2VjdGlvbiAxOiBGaW5kIFZ1bG5lcmFiaWxpdGllcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInN0ZXAtMS1jb25maWd1cmUtc255ay1zLWdpdGh1Yi1pbnRlZ3JhdGlvbiIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3RlcC0xLWNvbmZpZ3VyZS1zbnlrLXMtZ2l0aHViLWludGVncmF0aW9uIiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgU3RlcCAxOiBDb25maWd1cmUgU255aydzIEdpdEh1YiBJbnRlZ3JhdGlvbiIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICd7JSBoaW50IHN0eWxlPSJpbmZvIiAlfVxuSWYgeW91XCd2ZSBhbHJlYWR5IGNvbmZpZ3VyZWQgdGhlIFNueWsgR2l0SHViIGludGVncmF0aW9uLCBjb250aW51ZSB0byBTdGVwIDIuXG57JSBlbmRoaW50ICV9JwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZpcnN0IHdlIG5lZWQgdG8gY29ubmVjdCBTbnlrIHRvIEdpdEh1YiBzbyB3ZSBjYW4gaW1wb3J0IG91ciBSZXBvc2l0b3J5LiBEbyBzbyBieToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMb2dnaW5nIGluIHRvIFNueWsuaW8uICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmNvL1NueWtHSCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiU2lnbiB1cCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeS4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk5hdmlnYXRpbmcgdG8gSW50ZWdyYXRpb25zIC0+IFNvdXJjZSBDb250cm9sIC0+IEdpdEh1YiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZpbGwgaW4geW91ciBBY2NvdW50IENyZWRlbnRpYWxzIHRvIENvbm5lY3QgeW91ciBHaXRIdWIgQWNjb3VudC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL3BhcnRuZXItd29ya3Nob3AtYXNzZXRzLnMzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tL3NueWstZ2gucG5nIiwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAic3RlcC0yLWltcG9ydC10aGUtZm9ya2VkLWdvb2YtcmVwby1pbnRvLXNueWsiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N0ZXAtMi1pbXBvcnQtdGhlLWZvcmtlZC1nb29mLXJlcG8taW50by1zbnlrIiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgU3RlcCAyOiBJbXBvcnQgdGhlIGZvcmtlZCBHb29mIFJlcG8gaW50byBTbnlrIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vdyB0aGF0IFNueWsgaXMgY29ubmVjdGVkIHRvIHlvdXIgR2l0SHViIEFjY291bnQsIGltcG9ydCB0aGUgUmVwbyBpbnRvIFNueWsgYXMgYSBQcm9qZWN0LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJOYXZpZ2F0ZSB0byBQcm9qZWN0cyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdignQ2xpY2sgIkFkZCBQcm9qZWN0IiB0aGVuIHNlbGVjdCAiR2l0SHViIicpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2xpY2sgb24gdGhlIFJlcG8geW91IGZvcmtlZC4iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL3BhcnRuZXItd29ya3Nob3AtYXNzZXRzLnMzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tL3NueWstZ2hpbXBvcnQucG5nIiwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0ZXAtMy1leHBsb3JlLXlvdXItcmVwby1zLXJpc2tzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdGVwLTMtZXhwbG9yZS15b3VyLXJlcG8tcy1yaXNrcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTdGVwIDM6IEV4cGxvcmUgeW91ciBSZXBvJ3Mgcmlza3MiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldoZW4gdGhlIFJlcG8gaW1wb3J0cywgU255ayBoYXMgZm91bmQgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFja2FnZS5qc29uIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZpbGUgd2hlcmUgb3BlbiBzb3VyY2UgY29tcG9uZW50cyBmb3Igb3VyIEdvb2YgYXBwbGljYXRpb24gYXJlIGRlY2xhcmVkLiBXZSBjYW4gc2VlIHRoYXQgdGhleSBjb250YWluIDYwIHZ1bG5lcmFiaWxpdGllcywgaW5jbHVkaW5nIDMxIEhpZ2ggU2V2ZXJpdHkgb25lcyEg8J+YsyIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL3BhcnRuZXItd29ya3Nob3AtYXNzZXRzLnMzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tL3NueWstcHJvanZ1bG5zLnBuZyIsCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQmVmb3JlIHdlIHN0YXJ0IGZpeGluZyBWdWxuZXJhYmlsaXRpZXMsIHJlbWVtYmVyIHRoYXQgb3VyICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUFJPRCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyBicmFuY2ggY29udGFpbnMgdGhlIFByb2R1Y3Rpb24tcmVhZHkgdmVyc2lvbiBvZiB0aGUgY29kZS4gSW4gdGhlIG5leHQgc2VjdGlvbiwgd2VcJ2xsIGltcGxlbWVudCBhIFNueWsgR2F0ZSBkZXNpZ25lZCB0byAic3RvcCB0aGUgYmxlZWRpbmciLCBwcmV2ZW50aW5nIGFueSBuZXcgdnVsbmVyYWJpbGl0aWVzIGZyb20gbWFraW5nIGl0IGludG8gdGhhdCBicmFuY2guJwogICAgICAgICksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}