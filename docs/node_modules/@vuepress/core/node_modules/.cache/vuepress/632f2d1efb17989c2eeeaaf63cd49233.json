{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/features/integrations/snyk-broker/snyk-broker-infrastructure-as-code-detection/detecting-cloudformation-configuration-files-using-a-broker.md?vue&type=template&id=dde5e4dc&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/features/integrations/snyk-broker/snyk-broker-infrastructure-as-code-detection/detecting-cloudformation-configuration-files-using-a-broker.md","mtime":1647960563606},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJyx7YXR0cnM6eyJzbG90LWtleSI6X3ZtLiRwYXJlbnQuc2xvdEtleX19LFtfYygnaDEnLHthdHRyczp7ImlkIjoiZGV0ZWN0aW5nLWNsb3VkZm9ybWF0aW9uLWNvbmZpZ3VyYXRpb24tZmlsZXMtdXNpbmctYS1icm9rZXIifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNkZXRlY3RpbmctY2xvdWRmb3JtYXRpb24tY29uZmlndXJhdGlvbi1maWxlcy11c2luZy1hLWJyb2tlciJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBEZXRlY3RpbmcgQ2xvdWRGb3JtYXRpb24gY29uZmlndXJhdGlvbiBmaWxlcyB1c2luZyBhIEJyb2tlciIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIldoZW4gdXNpbmcgYSBwcml2YXRlbHkgaG9zdGVkIEdpdCByZXBvc2l0b3J5LCBTbnlrIEJyb2tlciBtdXN0IGJlIHVzZWQgdG8gY29ubmVjdCB3aXRoIFNueWsgcHJvZHVjdHMuIFNlZSB0aGUgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc255ay91c2VyLWRvY3MvbWFpbi9kb2NzLyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiQnJva2VyIGRvY3VtZW50YXRpb24iKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpLF92bS5fdigiIGZvciBkZXRhaWxzLiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIHRoZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gcmVxdWlyZWQgZm9yIHRoZSBDbG91ZEZvcm1hdGlvbiBmaWxlcywgZm9yIFNueWsgSWFDLiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlBhcnQgb2YgdGhlc2UgY29uZmlndXJhdGlvbnMgd2lsbCBiZSB0aGUgc2FtZSBmb3IgS3ViZXJuZXRlcy4gSWYgdGhleSBoYXZlIGFscmVhZHkgYmVlbiBhZGRlZCBmb3IgS3ViZXJuZXRlcywgdGhlbiB0aGVyZSdzIG5vIG5lZWQgdG8gYWRkIHRoZW0gYWdhaW4uIildKSxfdm0uX3YoIiAiKSxfYygnaDInLHthdHRyczp7ImlkIjoid3JpdGluZy10aGUtY29uZmlndXJhdGlvbiJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI3dyaXRpbmctdGhlLWNvbmZpZ3VyYXRpb24ifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgV3JpdGluZyB0aGUgY29uZmlndXJhdGlvbiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRoZSBDbG91ZEZvcm1hdGlvbiBzY2FubmluZyBmZWF0dXJlcyByZXF1aXJlIGFjY2VzcyB0byB0aGUgWUFNTCBvciBKU09OIGZpbGVzIGluIHRoZSByZXBvc2l0b3J5LiBUaGlzIHJlcXVpcmVzIHNwZWNpZmljIEFQSSBwZXJtaXNzaW9ucy4gVGhlc2UgQVBJIHBlcm1pc3Npb25zIGFyZSBzbGlnaHRseSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHRoZSBzb3VyY2UgY29udHJvbCBzeXN0ZW0uIildKSxfdm0uX3YoIiAiKSxfYygnb2wnLFtfYygnbGknLFtfdm0uX3YoIkZpbmQgYW5kIGRvd25sb2FkIHRoZSBhcHByb3ByaWF0ZSBhY2NlcHQuanNvbiBzYW1wbGUgZmlsZSBmb3IgdGhlIGNvcnJlY3Qgc291cmNlIGNvbnRyb2wgc3lzdGVtICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3NueWsvYnJva2VyL3RyZWUvbWFzdGVyL2NsaWVudC10ZW1wbGF0ZXMiLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoImZyb20gdGhlIEJyb2tlciByZXBvc2l0b3J5IiksX2MoJ091dGJvdW5kTGluaycpXSwxKSxfdm0uX3YoIi4iKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiUmVuYW1lIGl0ICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJhY2NlcHQuanNvbiIpXSksX3ZtLl92KCIgYW5kIGFkZCB0aGUgcnVsZXMgYmVsb3cgZm9yIHRoZSBhcHByb3ByaWF0ZSBTQ00gdG8gdGhlICIpLF9jKCdzdHJvbmcnLFtfdm0uX3YoInByaXZhdGUiKV0pLF92bS5fdigiIGFycmF5IGluIHRoZSBKU09OIGZpbGUuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIkZvbGxvdyAiKSxfYygnUm91dGVyTGluaycse2F0dHJzOnsidG8iOiIvc255ay9mZWF0dXJlcy9pbnRlZ3JhdGlvbnMvc255ay1icm9rZXIvc255ay1icm9rZXItaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS1kZXRlY3Rpb24vZGV0ZWN0aW5nLWNsb3VkZm9ybWF0aW9uLWNvbmZpZ3VyYXRpb24tZmlsZXMtdXNpbmctYS1icm9rZXIuaHRtbCNjb25maWd1cmluZy10aGUtYnJva2VyIn19LFtfdm0uX3YoIkNvbmZpZ3VyaW5nIEJyb2tlciBpbnN0cnVjdGlvbnMiKV0pLF92bS5fdigiLiIpXSwxKV0pLF92bS5fdigiICIpLF9jKCdoMicse2F0dHJzOnsiaWQiOiJnaXRodWItZ2l0aHViLWVudGVycHJpc2UtcnVsZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNnaXRodWItZ2l0aHViLWVudGVycHJpc2UtcnVsZXMifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgR2l0SHViICYgR2l0SHViIEVudGVycHJpc2UgcnVsZXMiKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoIntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9yZXBvcy86bmFtZS86cmVwby9jb250ZW50cy86cGF0aCovKi55YW1sXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0dJVEhVQl9UT0tFTn1AJHtHSVRIVUJfQVBJfVwiXG59LFxue1xuICBcIi8vXCI6IFwidXNlZCB0byBkZXRlcm1pbmUgSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSBpc3N1ZXNcIixcbiAgXCJtZXRob2RcIjogXCJHRVRcIixcbiAgXCJwYXRoXCI6IFwiL3JlcG9zLzpuYW1lLzpyZXBvL2NvbnRlbnRzLzpwYXRoKiUyRioueWFtbFwiLFxuICBcIm9yaWdpblwiOiBcImh0dHBzOi8vJHtHSVRIVUJfVE9LRU59QCR7R0lUSFVCX0FQSX1cIlxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9yZXBvcy86bmFtZS86cmVwby9jb250ZW50cy86cGF0aCovKi55bWxcIixcbiAgXCJvcmlnaW5cIjogXCJodHRwczovLyR7R0lUSFVCX1RPS0VOfUAke0dJVEhVQl9BUEl9XCJcbn0sXG57XG4gIFwiLy9cIjogXCJ1c2VkIHRvIGRldGVybWluZSBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIGlzc3Vlc1wiLFxuICBcIm1ldGhvZFwiOiBcIkdFVFwiLFxuICBcInBhdGhcIjogXCIvcmVwb3MvOm5hbWUvOnJlcG8vY29udGVudHMvOnBhdGgqJTJGKi55bWxcIixcbiAgXCJvcmlnaW5cIjogXCJodHRwczovLyR7R0lUSFVCX1RPS0VOfUAke0dJVEhVQl9BUEl9XCJcbn0sXG57XG4gIFwiLy9cIjogXCJ1c2VkIHRvIGRldGVybWluZSBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIGlzc3Vlc1wiLFxuICBcIm1ldGhvZFwiOiBcIkdFVFwiLFxuICBcInBhdGhcIjogXCIvcmVwb3MvOm5hbWUvOnJlcG8vY29udGVudHMvOnBhdGgqLyouanNvblwiLFxuICBcIm9yaWdpblwiOiBcImh0dHBzOi8vJHtHSVRIVUJfVE9LRU59QCR7R0lUSFVCX0FQSX1cIlxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9yZXBvcy86bmFtZS86cmVwby9jb250ZW50cy86cGF0aColMkYqLmpzb25cIixcbiAgXCJvcmlnaW5cIjogXCJodHRwczovLyR7R0lUSFVCX1RPS0VOfUAke0dJVEhVQl9BUEl9XCJcbn0sXG4iKV0pXSldKSxfYygnaDInLHthdHRyczp7ImlkIjoiYml0YnVja2V0LXJ1bGVzIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjYml0YnVja2V0LXJ1bGVzIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEJpdGJ1Y2tldCBydWxlcyIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigie1xuICBcIi8vXCI6IFwidXNlZCB0byBkZXRlcm1pbmUgSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSBpc3N1ZXNcIixcbiAgXCJtZXRob2RcIjogXCJHRVRcIixcbiAgXCJwYXRoXCI6IFwiL3Byb2plY3RzLzpwcm9qZWN0L3JlcG9zLzpyZXBvL2Jyb3dzZSovKi55YW1sXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0JJVEJVQ0tFVF9BUEl9XCIsXG4gIFwiYXV0aFwiOiB7XG4gICAgXCJzY2hlbWVcIjogXCJiYXNpY1wiLFxuICAgIFwidXNlcm5hbWVcIjogXCIke0JJVEJVQ0tFVF9VU0VSTkFNRX1cIixcbiAgICBcInBhc3N3b3JkXCI6IFwiJHtCSVRCVUNLRVRfUEFTU1dPUkR9XCJcbiAgfVxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9wcm9qZWN0cy86cHJvamVjdC9yZXBvcy86cmVwby9icm93c2UqJTJGKi55YW1sXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0JJVEJVQ0tFVF9BUEl9XCIsXG4gIFwiYXV0aFwiOiB7XG4gICAgXCJzY2hlbWVcIjogXCJiYXNpY1wiLFxuICAgIFwidXNlcm5hbWVcIjogXCIke0JJVEJVQ0tFVF9VU0VSTkFNRX1cIixcbiAgICBcInBhc3N3b3JkXCI6IFwiJHtCSVRCVUNLRVRfUEFTU1dPUkR9XCJcbiAgfVxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9wcm9qZWN0cy86cHJvamVjdC9yZXBvcy86cmVwby9icm93c2UqLyoueW1sXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0JJVEJVQ0tFVF9BUEl9XCIsXG4gIFwiYXV0aFwiOiB7XG4gICAgXCJzY2hlbWVcIjogXCJiYXNpY1wiLFxuICAgIFwidXNlcm5hbWVcIjogXCIke0JJVEJVQ0tFVF9VU0VSTkFNRX1cIixcbiAgICBcInBhc3N3b3JkXCI6IFwiJHtCSVRCVUNLRVRfUEFTU1dPUkR9XCJcbiAgfVxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9wcm9qZWN0cy86cHJvamVjdC9yZXBvcy86cmVwby9icm93c2UqJTJGKi55bWxcIixcbiAgXCJvcmlnaW5cIjogXCJodHRwczovLyR7QklUQlVDS0VUX0FQSX1cIixcbiAgXCJhdXRoXCI6IHtcbiAgICBcInNjaGVtZVwiOiBcImJhc2ljXCIsXG4gICAgXCJ1c2VybmFtZVwiOiBcIiR7QklUQlVDS0VUX1VTRVJOQU1FfVwiLFxuICAgIFwicGFzc3dvcmRcIjogXCIke0JJVEJVQ0tFVF9QQVNTV09SRH1cIlxuICB9XG59LFxue1xuICBcIi8vXCI6IFwidXNlZCB0byBkZXRlcm1pbmUgSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSBpc3N1ZXNcIixcbiAgXCJtZXRob2RcIjogXCJHRVRcIixcbiAgXCJwYXRoXCI6IFwiL3Byb2plY3RzLzpwcm9qZWN0L3JlcG9zLzpyZXBvL2Jyb3dzZSovKi5qc29uXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0JJVEJVQ0tFVF9BUEl9XCIsXG4gIFwiYXV0aFwiOiB7XG4gICAgXCJzY2hlbWVcIjogXCJiYXNpY1wiLFxuICAgIFwidXNlcm5hbWVcIjogXCIke0JJVEJVQ0tFVF9VU0VSTkFNRX1cIixcbiAgICBcInBhc3N3b3JkXCI6IFwiJHtCSVRCVUNLRVRfUEFTU1dPUkR9XCJcbiAgfVxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9wcm9qZWN0cy86cHJvamVjdC9yZXBvcy86cmVwby9icm93c2UqJTJGKi5qc29uXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0JJVEJVQ0tFVF9BUEl9XCIsXG4gIFwiYXV0aFwiOiB7XG4gICAgXCJzY2hlbWVcIjogXCJiYXNpY1wiLFxuICAgIFwidXNlcm5hbWVcIjogXCIke0JJVEJVQ0tFVF9VU0VSTkFNRX1cIixcbiAgICBcInBhc3N3b3JkXCI6IFwiJHtCSVRCVUNLRVRfUEFTU1dPUkR9XCJcbiAgfVxufSxcbiIpXSldKV0pLF9jKCdoMicse2F0dHJzOnsiaWQiOiJnaXRsYWItcnVsZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNnaXRsYWItcnVsZXMifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgR2l0TGFiIHJ1bGVzIildKSxfdm0uX3YoIiAiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Imxhbmd1YWdlLSBleHRyYS1jbGFzcyJ9LFtfYygncHJlJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6Imxhbmd1YWdlLXRleHQifX0sW19jKCdjb2RlJyxbX3ZtLl92KCJ7XG4gIFwiLy9cIjogXCJ1c2VkIHRvIGRldGVybWluZSBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIGlzc3Vlc1wiLFxuICBcIm1ldGhvZFwiOiBcIkdFVFwiLFxuICBcInBhdGhcIjogXCIvYXBpL3Y0L3Byb2plY3RzLzpwcm9qZWN0L3JlcG9zaXRvcnkvZmlsZXMqLyoueWFtbFwiLFxuICBcIm9yaWdpblwiOiBcImh0dHBzOi8vJHtHSVRMQUJ9XCJcbn0sXG57XG4gIFwiLy9cIjogXCJ1c2VkIHRvIGRldGVybWluZSBJbmZyYXN0cnVjdHVyZSBhcyBDb2RlIGlzc3Vlc1wiLFxuICBcIm1ldGhvZFwiOiBcIkdFVFwiLFxuICBcInBhdGhcIjogXCIvYXBpL3Y0L3Byb2plY3RzLzpwcm9qZWN0L3JlcG9zaXRvcnkvZmlsZXMqJTJGKi55YW1sXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0dJVExBQn1cIlxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9hcGkvdjQvcHJvamVjdHMvOnByb2plY3QvcmVwb3NpdG9yeS9maWxlcyovKi55bWxcIixcbiAgXCJvcmlnaW5cIjogXCJodHRwczovLyR7R0lUTEFCfVwiXG59LFxue1xuICBcIi8vXCI6IFwidXNlZCB0byBkZXRlcm1pbmUgSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSBpc3N1ZXNcIixcbiAgXCJtZXRob2RcIjogXCJHRVRcIixcbiAgXCJwYXRoXCI6IFwiL2FwaS92NC9wcm9qZWN0cy86cHJvamVjdC9yZXBvc2l0b3J5L2ZpbGVzKiUyRioueW1sXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0dJVExBQn1cIlxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9hcGkvdjQvcHJvamVjdHMvOnByb2plY3QvcmVwb3NpdG9yeS9maWxlcyovKi5qc29uXCIsXG4gIFwib3JpZ2luXCI6IFwiaHR0cHM6Ly8ke0dJVExBQn1cIlxufSxcbntcbiAgXCIvL1wiOiBcInVzZWQgdG8gZGV0ZXJtaW5lIEluZnJhc3RydWN0dXJlIGFzIENvZGUgaXNzdWVzXCIsXG4gIFwibWV0aG9kXCI6IFwiR0VUXCIsXG4gIFwicGF0aFwiOiBcIi9hcGkvdjQvcHJvamVjdHMvOnByb2plY3QvcmVwb3NpdG9yeS9maWxlcyolMkYqLmpzb25cIixcbiAgXCJvcmlnaW5cIjogXCJodHRwczovLyR7R0lUTEFCfVwiXG59LFxuIildKV0pXSksX2MoJ2gyJyx7YXR0cnM6eyJpZCI6ImNvbmZpZ3VyaW5nLWJyb2tlciJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2NvbmZpZ3VyaW5nLWJyb2tlciJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBDb25maWd1cmluZyBCcm9rZXIiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJCcm9rZXIgdGFrZXMgdGhlIHBhdGggdG8gdGhlIGFjY2VwdC5qc29uIGZpbGUgKHdpdGggdGhlIHJ1bGVzIGFib3ZlIGFkZGVkKSBpbiB0aGUgQUNDRVBUIGVudmlyb25tZW50IHZhcmlhYmxlLiBUaGUgZXhhbXBsZSBvZiBwYXNzaW5nIHRoYXQgdG8gdGhlIEdpdEh1YiBCcm9rZXIgaXMgZGlzcGxheWVkIGJlbG93LiIpXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS0gZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS10ZXh0In19LFtfYygnY29kZScsW192bS5fdigiZG9ja2VyIHJ1biAtLXJlc3RhcnQ9YWx3YXlzIFxcXG4gIC1wIDgwMDA6ODAwMCBcXFxuICAtZSBCUk9LRVJfVE9LRU49c2VjcmV0LWJyb2tlci10b2tlbiBcXFxuICAtZSBHSVRIVUJfVE9LRU49c2VjcmV0LWdpdGh1Yi10b2tlbiBcXFxuICAtZSBQT1JUPTgwMDAgXFxcbiAgLWUgQlJPS0VSX0NMSUVOVF9VUkw9aHR0cHM6Ly9teS5icm9rZXIuY2xpZW50OjgwMDAgXFxcbiAgLWUgQUNDRVBUPS9wcml2YXRlL2FjY2VwdC5qc29uXG4gIC12IC9sb2NhbC9wYXRoL3RvL3ByaXZhdGU6L3ByaXZhdGUgXFxcbiAgc255ay9icm9rZXI6Z2l0aHViLWNvbVxuIildKV0pXSksX2MoJ3AnLFtfYygnc3Ryb25nJyxbX3ZtLl92KCJOb3RlIildKSxfdm0uX3YoIjogVGhpcyBnaXZlcyBTbnlrIHRoZSBhYmlsaXR5IHRvIHF1ZXJ5IGZvciBhbnkgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIi55YW1sIildKSxfdm0uX3YoIiwgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIi55bWwiKV0pLF92bS5fdigiLCBvciAiKSxfYygnY29kZScsW192bS5fdigiLmpzb24iKV0pLF92bS5fdigiIGZpbGVzLiBJZiB5b3Ugd291bGQgcHJlZmVyIHRvIGJlIHN0cmljdGVyIHlvdSBjYW4gYWx0ZXIgdGhlIHBhdGhzIGluIHRoZSBleGFtcGxlcyBhYm92ZSB0byBiZSBtb3JlIHJlc3RyaWN0aXZlIHRvIGNlcnRhaW4gcHJvamVjdHMgb3IgZmlsZSBsYXlvdXRzLiIpXSldKX0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}