{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/docs/products/snyk-container/scan-your-dockerfile/open-pull-requests-to-fix-vulnerable-base-images-in-your-dockerfile.md?vue&type=template&id=3af80232&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/docs/products/snyk-container/scan-your-dockerfile/open-pull-requests-to-fix-vulnerable-base-images-in-your-dockerfile.md","mtime":1644439893060},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAib3Blbi1wdWxsLXJlcXVlc3RzLXRvLWZpeC12dWxuZXJhYmxlLWJhc2UtaW1hZ2VzLWluLXlvdXItZG9ja2VyZmlsZSIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjb3Blbi1wdWxsLXJlcXVlc3RzLXRvLWZpeC12dWxuZXJhYmxlLWJhc2UtaW1hZ2VzLWluLXlvdXItZG9ja2VyZmlsZSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBPcGVuIHB1bGwgcmVxdWVzdHMgdG8gZml4IHZ1bG5lcmFibGUgYmFzZSBpbWFnZXMgaW4geW91ciBEb2NrZXJmaWxlIgogICAgICAgICAgKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU255ayBkZXRlY3RzIHZ1bG5lcmFibGUgYmFzZSBpbWFnZXMgYnkgc2Nhbm5pbmcgeW91ciBEb2NrZXJmaWxlIHdoZW4gaW1wb3J0aW5nIGEgR2l0IHJlcG9zaXRvcnksIGFuZCBoZWxwcyB5b3UgZml4IHRoZW0gdXNpbmcgYXV0b21hdGljIHB1bGwgcmVxdWVzdHMuIFRoaXMgYWxsb3dzIHlvdSB0byBleGFtaW5lIHNlY3VyaXR5IGlzc3VlcyBiZWZvcmUgeW91IGJ1aWxkIHRoZSBpbWFnZSwgYW5kIGZpeCB0aGVtIGJlZm9yZSB0aGV5IGxhbmQgaW4geW91ciByZWdpc3RyeSBvciBpbiBwcm9kdWN0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTdXBwb3J0ZWQgZ2l0LWJhc2VkIHJlcG9zaXRvcnkgbWFuYWdlcnMgZm9yIERvY2tlcmZpbGUgZml4IFBScyBpbmNsdWRlOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJHaXRIdWIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkdpdExhYiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQml0YnVja2V0IFNlcnZlciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQml0YnVja2V0IENsb3VkIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJHaXRIdWIgRW50ZXJwcmlzZSBTZXJ2ZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkF6dXJlIHJlcG9zIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIGFueSBEb2NrZXJmaWxlIHByb2plY3QgY3JlYXRlZCBpbiBTbnlrLCBpZiB0aGUgYmFzZSBpbWFnZSBpcyBhbiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZG9ja2VyLWh1Yi9vZmZpY2lhbF9pbWFnZXMvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIk9mZmljaWFsIERvY2tlciBpbWFnZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgdGhlIHJlc3VsdHMgaW5jbHVkZSBhIGxpc3Qgb2Ygc3VpdGFibGUgYmFzZSBpbWFnZXMgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBleGlzdGluZywgbW9yZSB2dWxuZXJhYmxlIG9uZS4gU2VlIHRoZSBzZWN0aW9uIG9uICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9zbnlrLWNvbnRhaW5lci9nZXR0aW5nLWFyb3VuZC10aGUtc255ay1jb250YWluZXItdWkvYW5hbHlzaXMtYW5kLXJlbWVkaWF0aW9uLWZvci15b3VyLWltYWdlcy1mcm9tLXRoZS1zbnlrLWFwcCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJiYXNlIGltYWdlIHJlY29tbWVuZGF0aW9ucyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgdGhlbiBhdXRvbWF0aWNhbGx5IGlzc3VlcyBhIGZpeCBwdWxsIHJlcXVlc3QgYWdhaW5zdCB5b3VyIERvY2tlcmZpbGUsIHRvIHVwZ3JhZGUgdG8gdGhlIGxhdGVzdCBtaW5vciB2ZXJzaW9uIGF2YWlsYWJsZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXV0b21hdGljIGZpeCBQUiBpcyBvcGVuZWQgaW4gY2FzZSB0aGVyZSBpcyBhIGNoYW5nZSBpbiB0aGUgRG9ja2VyZmlsZSBvciBhIGJldHRlciBiYXNlIGltYWdlIGRldGVjdGVkIHBvc3QgdGhlIGluaXRpYWwgc2Nhbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFsdGVybmF0aXZlbHksIG1hbnVhbGx5IG9wZW4gYSBmaXggUFIgYnkgY2xpY2tpbmcgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk9wZW4gYSBGaXggUFIiKV0pLAogICAgICAgIF92bS5fdigiIGZvciB0aGUgdmVyc2lvbiB5b3Ugd2lzaCB0byB1cGdyYWRlIHRvLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9tY2VjbGlwMC02LS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFmdGVyIGl0IGlzIG9wZW5lZCwgeW91IGNhbiB2aWV3IHRoZSBmaXggUFIgaW4geW91ciBHaXQgcmVwb3NpdG9yeSwgc2hvd2luZyB3aGF0IHRoZSBjaGFuZ2UgaXMgYW5kIHdoZXJlIGl0IHRha2VzIHBsYWNlLiBUaGUgRlJPTSBsaW5lIGluIHlvdXIgRG9ja2VyZmlsZSBpcyB1cGRhdGVkIHdpdGggdGhlIG5ldyBhbmQgaW1wcm92ZWQgdmVyc2lvbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG4nKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbldlIHJlY29tbWVuZCBtYWtpbmcgc3VyZSB5b3VyIGFwcGxpY2F0aW9uIHdvcmtzIHByb3Blcmx5IGJlZm9yZSBtZXJnaW5nIHRoZSBjaGFuZ2UuXG57JSBlbmRoaW50ICV9IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uY2UgdGhlIFBSIGlzIG9wZW5lZCBhbmQgcmVhZHksIHlvdSBjYW4gc2FmZWx5IG1lcmdlIGl0IGFuZCBpbnN0YW50bHkgcmVkdWNlIHRoZSBudW1iZXIgb2YgdnVsbmVyYWJpbGl0aWVzIGluIHlvdXIgY29udGFpbmVyIGltYWdlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9tY2VjbGlwMS0xLS5wbmciKSwKICAgICAgICAgICAgYWx0OiAibWNlY2xpcDEucG5nIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL21jZWNsaXAyLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkF2YWlsYWJpbGl0eToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmZWF0dXJlIGlzIGF2YWlsYWJsZSBmb3IgYWxsIG9mIG91ciB1c2Vycy4gSXQgaXMgb24gYnkgZGVmYXVsdCBmb3IgYWxsIGZyZWUgdXNlcnMsIGFuZCBvZmYgYnkgZGVmYXVsdCBmb3IgU255ayBjdXN0b21lcnMnIGV4aXN0aW5nIGludGVncmF0aW9ucy4gWW91IGNhbiBvcHQtaW4gdG8gaXQgZnJvbSB0aGUgaW50ZWdyYXRpb24gb3IgcHJvamVjdCBzZXR0aW5ncyBzZWN0aW9ucy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvYXV0by1kZXRlY3QtZG9ja2VyZmlsZXMucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}