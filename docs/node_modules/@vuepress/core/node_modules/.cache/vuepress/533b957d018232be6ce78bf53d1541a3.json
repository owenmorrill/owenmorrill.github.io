{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/products/snyk-open-source/language-and-package-manager-support/snyk-for-c-c++.md?vue&type=template&id=5fb4d9b8&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/products/snyk-open-source/language-and-package-manager-support/snyk-for-c-c++.md","mtime":1646942955458},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAic255ay1mb3ItYy1jIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzbnlrLWZvci1jLWMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgZm9yIEMgLyBDKysiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5UaGlzIGZlYXR1cmUgaXMgY3VycmVudGx5IGluIEJldGEuJyksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiVG8gZW5hYmxlIGl0IGZyb20gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL2ZlYXR1cmVzL3VzZXItYW5kLWdyb3VwLW1hbmFnZW1lbnQvbWFuYWdpbmctc2V0dGluZ3Mvc255ay1wcmV2aWV3Lmh0bWwiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlNueWsgUHJldmlldyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiOiIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkxvZyBpbnRvIFNueWsuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNsaWNrIHRoZSBTZXR0aW5ncyBpY29uIHRvIG5hdmlnYXRlIHRvICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNldHRpbmdzIildKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2xpY2sgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU255ayBQcmV2aWV3IildKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRW5hYmxlIHRoZSBmZWF0dXJlLCB0aGVuIGNsaWNrICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNhdmUgY2hhbmdlcyIpXSksCiAgICAgICAgICBfdm0uX3YoIi5cbnslIGVuZGhpbnQgJX0iKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIllvdSBjYW4gdXNlIFNueWsgdG8gc2NhbiBDIC8gQysrIHByb2plY3RzLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZmVhdHVyZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZlYXR1cmVzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGZWF0dXJlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cbicpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5Tb21lIGZlYXR1cmVzIG1heSBub3QgYmUgYXZhaWxhYmxlLCBkZXBlbmRpbmcgb24geW91ciBzdWJzY3JpcHRpb24gcGxhbi5cbnslIGVuZGhpbnQgJX0iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJQYWNrYWdlIG1hbmFnZXJzIC8gRmVhdHVyZXMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiQ0xJIHN1cHBvcnQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiR2l0IHN1cHBvcnQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiTGljZW5zZSBzY2FubmluZyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJGaXggUFJzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlJ1bnRpbWUgbW9uaXRvcmluZyIpXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkMvQysrIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIuKclO+4jiIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIpLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctaXQtd29ya3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2hvdy1pdC13b3JrcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IGl0IHdvcmtzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNjYW5zIGFyZSBwb3dlcmVkIGJ5IGFuIG9wZW4gc291cmNlIGRhdGFiYXNlLCBwZXJpb2RpY2FsbHkgdXBkYXRlZCB3aXRoIHRoZSBsYXRlc3Qgc291cmNlIGNvZGUgZnJvbSBkaWZmZXJlbnQgb25saW5lIHNvdXJjZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5UbyBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSB2dWxuZXJhYmlsaXRpZXMgZm9yIEMvQysrLCB1c2UgdGhlICcKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3NlY3VyaXR5LnNueWsuaW8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU255ayBWdWxuIERCIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi5cbnslIGVuZGhpbnQgJX0iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldoZW4geW91IHJ1biB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrIHRlc3QgLS11bm1hbmFnZWQiKV0pLAogICAgICAgIF92bS5fdigiIGNvbW1hbmQsIFNueWs6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbnZlcnRzIGFsbCBmaWxlcyBmcm9tIHlvdXIgY3VycmVudCBmb2xkZXIgaW50byBhIGxpc3Qgb2YgaGFzaGVzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU2VuZHMgdGhlIGhhc2hlcyB0byBTbnlrIHNjYW4gc2VydmVyLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUXVlcmllcyB0aGUgZGF0YWJhc2UgdG8gZmluZCBhIGxpc3Qgb2YgcG90ZW50aWFsbHkgbWF0Y2hpbmcgZGVwZW5kZW5jaWVzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJMaW5rcyB0aGUgZGVwZW5kZW5jaWVzIHRvIHRoZSBrbm93biB2dWxuZXJhYmlsaXRpZXMuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRGlzcGxheXMgdGhlIHJlc3VsdHMuIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cblRvIHNjYW4gdGhlIHByb2plY3QsIHRoZSBkZXBlbmRlbmNpZXMgbXVzdCBiZSBhdmFpbGFibGUgYXMgc291cmNlIGNvZGUgaW4gdGhlIHNjYW5uZWQgZGlyZWN0b3J5LiBJZiB0aGUgZGVwZW5kZW5jaWVzIGFyZSBpbiBhIGRpZmZlcmVudCBsb2NhdGlvbiwgdGhhdCBsb2NhdGlvbiBtdXN0IGJlIHNjYW5uZWQuXG57JSBlbmRoaW50ICV9JwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInNjYW5uaW5nLWFyY2hpdmVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzY2FubmluZy1hcmNoaXZlcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTY2FubmluZyBhcmNoaXZlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCeSBkZWZhdWx0LCBhcmNoaXZlcyBhcmUgbm90IHNjYW5uZWQuIEhvd2V2ZXIsIFNueWsgQ0xJIGNhbiByZWN1cnNpdmVseSBleHRyYWN0IGFyY2hpdmVzIHRvIGFuYWx5emUgdGhlIHNvdXJjZSBjb2RlIGluc2lkZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gZW5hYmxlIGFyY2hpdmUgZXh0cmFjdGlvbiwgc3BlY2lmeSB0aGUgZGVwdGggb2YgdGhlIGV4dHJhY3Rpb24gdXNpbmcgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLS1tYXgtZGVwdGgiKV0pLAogICAgICAgIF92bS5fdigiIHBhcmFtZXRlci4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZSBzdXBwb3J0ZWQgYXJjaGl2ZSBmb3JtYXRzIGFyZToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInppcC1saWtlIGFyY2hpdmVzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJ0YXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInRhciB3aXRoIGd6aXAgY29tcHJlc3Npb24gYWxnb3JpdGhtIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiY29uc3RyYWludHMtYW5kLWxpbWl0YXRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb25zdHJhaW50cy1hbmQtbGltaXRhdGlvbnMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uc3RyYWludHMgYW5kIGxpbWl0YXRpb25zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5UaGUgZm9sbG93aW5nIGNvbnN0cmFpbnRzIGFuZCBsaW1pdGF0aW9ucyBhcmUgYnkgZGVzaWduLiBXaGlsZSB3ZSBtYXkgd29yayBvbiBpbXByb3ZlbWVudHMgaW4gdGhlIGZ1dHVyZSwgdGhleSBhcmUgbm90IGNvbnNpZGVyZWQgYW4gaXNzdWUuIElzc3VlcyB0aGF0IGFyZSBwbGFubmVkIHRvIGJlIGFkZHJlc3NlZCBhcmUgaW4gdGhlICcKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL3Byb2R1Y3RzL3NueWstb3Blbi1zb3VyY2UvbGFuZ3VhZ2UtYW5kLXBhY2thZ2UtbWFuYWdlci1zdXBwb3J0L3NueWstZm9yLWMtYysrLmh0bWwja25vd24taXNzdWVzIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJLbm93biBJc3N1ZXMgIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCJzZWN0aW9uLlxueyUgZW5kaGludCAlfSIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiRGVwZW5kZW5jaWVzIHNvdXJjZSBjb2RlIG5lZWRzIHRvIGJlIGF2YWlsYWJsZSIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3IgU255ayBDTEkgdG8gYmUgYWJsZSB0byBmaW5kIGFueSBkZXBlbmRlbmNpZXMgaW4geW91ciBzb3VyY2UgY29kZSwgdGhlIGZ1bGwgc291cmNlIGNvZGUgb2YgdGhlIGRlcGVuZGVuY2llcyBuZWVkcyB0byBiZSBwcmVzZW50IGluIHRoZSBzY2FubmVkIGZvbGRlci4gVGhlIGZvbGxvd2luZyBpcyBhIHR5cGljYWwgZGlyZWN0b3J5IHN0cnVjdHVyZSBTbnlrIGNhbiBzY2FuIChhYmJyZXZpYXRlZCk6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJjLWV4YW1wbGVcbuKUnOKUgOKUgCBkZXBzXG7ilIIgICDilJzilIDilIAgY3VybC03LjU4LjBcbuKUgiAgIOKUgiAgIOKUnOKUgOKUgCBpbmNsdWRlXG7ilIIgICDilIIgICDilIIgICDilJzilIDilIAgTWFrZWZpbGUuYW1cbuKUgiAgIOKUgiAgIOKUgiAgIOKUnOKUgOKUgCBNYWtlZmlsZS5pblxu4pSCICAg4pSCICAg4pSCICAg4pSc4pSA4pSAIFJFQURNRVxu4pSCICAg4pSCICAg4pSCICAg4pSU4pSA4pSAIGN1cmxcbuKUgiAgIOKUgiAgIOKUnOKUgOKUgCBpbnN0YWxsLXNoXG7ilIIgICDilIIgICDilJzilIDilIAgbGliXG7ilIIgICDilIIgICDilIIgICDilJzilIDilIAgYXN5bi5oXG7ilIIgICDilIIgICDilIIgICDilJzilIDilIAgYmFzZTY0LmNcbuKUgiAgIOKUgiAgIOKUgiAgIOKUnOKUgOKUgCBjaGVja3NyYy5wbFxu4pSCICAg4pSCICAg4pSCICAg4pSc4pSA4pSAIGNvbmZpZy1hbWlnYW9zLmhcbuKUgiAgIOKUgiAgIOKUgiAgIOKUnOKUgOKUgCBjb25uY2FjaGUuY1xu4pSCICAg4pSCICAg4pSCICAg4pSc4pSA4pSAIGNvbm5jYWNoZS5oXG7ilIIgICDilIIgICDilJzilIDilIAgc3JjXG7ilIIgICDilIIgICDilIIgICDilJzilIDilIAgdG9vbF9iaW5tb2RlLmNcbuKUgiAgIOKUgiAgIOKUgiAgIOKUnOKUgOKUgCB0b29sX2Jpbm1vZGUuaFxu4pSCICAg4pSCICAg4pSCICAg4pSc4pSA4pSAIHRvb2xfYm5hbWUuY1xu4pSCICAg4pSCICAg4pSCICAg4pSc4pSA4pSAIHRvb2xfeGF0dHIuY1xuLi4uXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIYXZpbmcgYSBsYXJnZSBwZXJjZW50YWdlIG9mIGZpbGVzIGluIHRoZWlyIG9yaWdpbmFsICh1bmNoYW5nZWQpIGZvcm0gaXMgY3JpdGljYWwgdG8gYWNjdXJhdGVseSBpZGVudGlmeSBkZXBlbmRlbmNpZXMgYW5kIHNvIHJlcG9ydCB0aGUgY29ycmVjdCBzZXQgb2YgdnVsbmVyYWJpbGl0aWVzLiBJZiB5b3UgbW9kaWZ5IG1hbnkgb2YgdGhlIGZpbGVzIChvciwgZm9yIGV4YW1wbGUsIGluY2x1ZGUgb25seSBoZWFkZXIgZmlsZXMpLCB0aGlzIHJlZHVjZXMgdGhlIGNvbmZpZGVuY2Ugb2YgdGhlIHNjYW5uaW5nIGVuZ2luZSwgbGVhZGluZyB0byBlaXRoZXIgZGVwZW5kZW5jaWVzIG5vdCBiZWluZyBpZGVudGlmaWVkLCBvciBiZWluZyBpZGVudGlmaWVkIGluY29ycmVjdGx5IChhcyBhIGRpZmZlcmVudCB2ZXJzaW9uLCBvciBldmVuIGEgZGlmZmVyZW50IHBhY2thZ2UpLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJkYXRhLWNvbGxlY3Rpb24tbm90ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGF0YS1jb2xsZWN0aW9uLW5vdGUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGF0YSBjb2xsZWN0aW9uIG5vdGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiB5b3Ugc2NhbiBDKysgcHJvamVjdHMsIHRoZSBmb2xsb3dpbmcgZGF0YSBpcyBjb2xsZWN0ZWQgYW5kIG1heSBiZSBzdG9yZWQgZm9yIHRyb3VibGVzaG9vdGluZyBwdXJwb3NlczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJDYXRlZ29yeSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJEZXNjcmlwdGlvbiIpXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkhhc2hlcyBvZiB0aGUgc2Nhbm5lZCBmaWxlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkFsbCBmaWxlcyBhcmUgY29udmVydGVkIHRvIGEgbGlzdCBvZiBpcnJldmVyc2libGUgaGFzaGVzLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIlJlbGF0aXZlIHBhdGhzIHRvIHNjYW5uZWQgZmlsZXMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiVGhlIHBhdGhzIHRvIGZpbGVzIHJlbGF0aXZlIHRvIHRoZSBkaXJlY3RvcnkgYmVpbmcgc2Nhbm5lZCBhcmUgaW5jbHVkZWQgZm9yIGJldHRlciBpZGVudGlmaWNhdGlvbiBhbmQgbWF0Y2hpbmcuIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfdm0uX3YoIkV4YW1wbGU6IiksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIi4vcHJvamVjdC1uYW1lL3ZlbmRvci9iemlwMi0xLjAuNi9ibG9ja3NvcnQuYyIpLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNueWstY2xpLWZvci1jLWMtcHJvamVjdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NueWstY2xpLWZvci1jLWMtcHJvamVjdHMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU255ayBDTEkgZm9yIEMgLyBDKysgcHJvamVjdHMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiaW5zdGFsbC10aGUtc255ay1jbGkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luc3RhbGwtdGhlLXNueWstY2xpIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEluc3RhbGwgdGhlIFNueWsgQ0xJIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiQy9DKysgc2Nhbm5pbmcgaXMgYXZhaWxhYmxlIGluICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL2d1aWRlL3NueWstY2xpLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiU255ayBDTEkiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIuIFNlZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3VpZGUvc255ay1jbGkvaW5zdGFsbC10aGUtc255ay1jbGkvIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkluc3RhbGwgdGhlIENMSSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGZvciBkZXRhaWxzLiIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5UaGUgbWluaW11bSB2ZXJzaW9uIG9mIFNueWsgQ0xJIHdpdGggQy9DKysgc2Nhbm5pbmcgaXMgMS44NTcuMC5cbnslIGVuZGhpbnQgJX0nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicnVuLXRoZS10ZXN0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNydW4tdGhlLXRlc3QiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJ1biB0aGUgdGVzdCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVG8gdGVzdCB5b3VyIHByb2plY3QgZm9yIHZ1bG5lcmFiaWxpdGllcywgcnVuOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJCBzbnlrIHRlc3QgLS11bm1hbmFnZWRcbiIpXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAneyUgaGludCBzdHlsZT0id2FybmluZyIgJX1cbklmIHlvdSBzY2FuIGEgTGludXggcHJvamVjdCBvbiBXaW5kb3dzLCBtYWtlIHN1cmUgdGhlIHJlcG9zaXRvcnkgaXMgY2xvbmVkIHdpdGggTGludXggbGluZSBlbmRpbmdzLiBTZWUgdGhlICcKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2d1aWRlL3Byb2R1Y3RzL3NueWstb3Blbi1zb3VyY2UvbGFuZ3VhZ2UtYW5kLXBhY2thZ2UtbWFuYWdlci1zdXBwb3J0L3NueWstZm9yLWMtYysrLmh0bWwja25vd24taXNzdWVzIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJLbm93biBJc3N1ZXMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBzZWN0aW9uIGZvciBtb3JlIGRldGFpbHMuXG57JSBlbmRoaW50ICV9IiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiZGlzcGxheWluZy1kZXBlbmRlbmNpZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Rpc3BsYXlpbmctZGVwZW5kZW5jaWVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERpc3BsYXlpbmcgZGVwZW5kZW5jaWVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUbyBkaXNwbGF5IGRlcGVuZGVuY2llcywgdXNlIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi0tcHJpbnQtZGVwcyIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCIkIHNueWsgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJ0ZXN0IildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIC0tdW5tYW5hZ2VkIC0tcHJpbnQtZGVwc1xuXG5EZXBlbmRlbmNpZXM6XG5cbiAgY3B5dGhvbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInwiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi9jcHl0aG9uL2FyY2hpdmUvdjMuNy4yLnppcEAzLjcuMlxuICBjb25maWRlbmNlOiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gbnVtYmVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjEuMDAwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuICBcbiAgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiemlwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInwiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaHR0cDovL2Z0cC5kZWJpYW4ub3JnL2RlYmlhbi9wb29sL21haW4vei96aXAvemlwXzMuMC5vcmlnLnRhci5nekAzLjBcbiAgY29uZmlkZW5jZTogIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIwLjk5MyIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gbGVhcm4gd2hhdCBmaWxlcyBjb250cmlidXRlZCB0byBlYWNoIGRlcGVuZGVuY3kgYmVpbmcgaWRlbnRpZmllZCwgdXNlIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi0tcHJpbnQtZGVwLXBhdGhzIildKSwKICAgICAgICBfdm0uX3YoIiBhcmd1bWVudDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWJhc2ggZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtYmFzaCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCIkIHNueWsgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBidWlsdGluIGNsYXNzLW5hbWUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJ0ZXN0IildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIC0tdW5tYW5hZ2VkIC0tcHJpbnQtZGVwLXBhdGhzXG5cbkRlcGVuZGVuY2llczpcblxuICAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJjdXJsIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInwiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2N1cmwvY3VybC9yZWxlYXNlcy9kb3dubG9hZC9jdXJsLTdfNThfMC9jdXJsLTcuNTguMC50YXIueHpANy41OC4wXG4gIGNvbmZpZGVuY2U6ICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMS4wMDAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiXG4gIG1hdGNoaW5nIGZpbGVzOlxuICAgIC0gYy1leGFtcGxlL2RlcHMvY3VybC03LjU4LjAvQ0hBTkdFU1xuICAgIC0gYy1leGFtcGxlL2RlcHMvY3VybC03LjU4LjAvQ01ha2UvQ01ha2VDb25maWd1cmFibGVGaWxlLmluXG4gICAgLSBjLWV4YW1wbGUvZGVwcy9jdXJsLTcuNTguMC9DTWFrZS9DdXJsU3ltYm9sSGlkaW5nLmNtYWtlXG4gICAgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi4uIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIi4gYW5kICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIyODU3IiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJtb3JlIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBmaWxlc1xuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJ1bmRlcnN0YW5kaW5nLXRoZS1jb25maWRlbmNlLWxldmVsIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN1bmRlcnN0YW5kaW5nLXRoZS1jb25maWRlbmNlLWxldmVsIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFVuZGVyc3RhbmRpbmcgdGhlIGNvbmZpZGVuY2UgbGV2ZWwiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IG1heSBuZWVkIHRvIGNoYW5nZSB0aGUgc291cmNlIGNvZGUgb2YgdGhlIGRlcGVuZGVuY2llcyB0aGF0IHlvdSB1c2UgaW4geW91ciBzb2Z0d2FyZS4gQXMgU255ayB1c2VzIGZpbGUgc2lnbmF0dXJlcyB0byBmaW5kIHRoZSBjbG9zZXN0IHBvc3NpYmxlIG1hdGNoIHRvIGFuIG9wZW4gc291cmNlIGxpYnJhcnksIHlvdXIgY2hhbmdlcyBtYXkgZGVjcmVhc2UgdGhlIGFjY3VyYWN5IG9mIHRoZSBpZGVudGlmaWNhdGlvbiBvZiB0aGUgYWN0dWFsIGxpYnJhcnkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGxlYXJuIGhvdyBjb25maWRlbnQgU255ayBpcyBhYm91dCB0aGUgaWRlbnRpZmllZCBkZXBlbmRlbmN5IGFuZCBpdHMgdmVyc2lvbiwgdXNlIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi0tcHJpbnQtZGVwcyIpXSksCiAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItLXByaW50LWRlcC1wYXRocyIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZCBsaW5lIGFyZ3VtZW50OiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiY3VybHxodHRwczovL2dpdGh1Yi5jb20vY3VybC9jdXJsL3JlbGVhc2VzL2Rvd25sb2FkL2N1cmwtN181OF8wL2N1cmwtNy41OC4wLnRhci54ekA3LjU4LjBcbmNvbmZpZGVuY2U6IDAuOTkzXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGNvbmZpZGVuY2UgbGV2ZWwgc2hvd3MgaG93IGNvbmZpZGVudCBTbnlrIGlzIGFib3V0IHRoZSBhY3R1YWwgaWRlbnRpZmljYXRpb24gb2YgdGhlIGRlcGVuZGVuY3kuIFRoZSBudW1iZXIgY2FuIGJlIGJldHdlZW4gMCBhbmQgMSBhbmQgdGhlIGhpZ2hlciBpdCBpcywgdGhlIG1vcmUgYWNjdXJhdGUgdGhlIGlkZW50aWZpY2F0aW9uIGlzLiBTbyBhIGNvbmZpZGVuY2Ugb2YgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjEiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgbWVhbnMgdGhhdCBhbGwgdGhlIGZpbGVzIGluIHRoZSBzb3VyY2UgdHJlZSBmdWxseSBtYXRjaGVkIGFsbCB0aGUgZXhwZWN0ZWQgZmlsZXMgaW4gb3VyIGRhdGFiYXNlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJqc29uLW91dHB1dCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjanNvbi1vdXRwdXQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEpTT04gb3V0cHV0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUbyBnZXQgYSBtYWNoaW5lLXJlYWRhYmxlIG91dHB1dCBpbiBKU09OLCB1c2UgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLS1qc29uIildKSwKICAgICAgICBfdm0uX3YoIiBhcmd1bWVudDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJyQgc255ayB0ZXN0IC0tdW5tYW5hZ2VkIC0tanNvblxuW1xuICB7XG4gICAgImlzc3VlcyI6IFtcbiAgICAgIHtcbiAgICAgICAgInBrZ05hbWUiOiAiY3VybHxodHRwczovL2dpdGh1Yi5jb20vY3VybC9jdXJsL3JlbGVhc2VzL2Rvd25sb2FkL2N1cmwtN181OF8wL2N1cmwtNy41OC4wLnRhci54eiIsXG4gICAgICAgICJwa2dWZXJzaW9uIjogIjcuNTguMCIsXG4gICAgICAgICJpc3N1ZUlkIjogIkNWRS0yMDE5LTU0ODEiLFxuICAgICAgICAiZml4SW5mbyI6IHtcbiAgICAgICAgICAiaXNQYXRjaGFibGUiOiBmYWxzZSxcbiAgICAgICAgICAiaXNQaW5uYWJsZSI6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdLFxuICAgICJpc3N1ZXNEYXRhIjoge1xuICAgICAgIkNWRS0yMDE5LTU0ODEiOiB7XG4gICAgICAgICJzZXZlcml0eSI6ICJoaWdoIixcbiAgICAgICAgIkNWU1N2MyI6ICIiLFxuICAgICAgICAib3JpZ2luYWxTZXZlcml0eSI6ICJoaWdoIixcbiAgICAgICAgInNldmVyaXR5V2l0aENyaXRpY2FsIjogImhpZ2giLFxuICAgICAgICAidHlwZSI6ICJ2dWxuIixcbiAgICAgICAgImFsdGVybmF0aXZlSWRzIjogW1xuICAgICAgICAgICIiXG4gICAgICAgIF0sXG4gICAgICAgICJjcmVhdGlvblRpbWUiOiAiMjAxOS0wOS0xNlQxOToxNTowMC4wMDBaIixcbiAgICAgICAgImRpc2Nsb3N1cmVUaW1lIjogIjIwMTktMDktMTZUMTk6MTU6MDAuMDAwWiIsXG4gICAgICAgICJtb2RpZmljYXRpb25UaW1lIjogIjIwMjAtMTAtMjBUMjI6MTU6MDAuMDAwWiIsXG4gICAgICAgICJwdWJsaWNhdGlvblRpbWUiOiAiMjAxOS0wOS0xNlQxOToxNTowMC4wMDBaIixcbiAgICAgICAgImNyZWRpdCI6IFtcbiAgICAgICAgICAiIlxuICAgICAgICBdLFxuICAgICAgICAiaWQiOiAiQ1ZFLTIwMTktNTQ4MSIsXG4gICAgICAgICJwYWNrYWdlTWFuYWdlciI6ICJjcHAiLFxuICAgICAgICAicGFja2FnZU5hbWUiOiAiY3VybHxodHRwczovL2dpdGh1Yi5jb20vY3VybC9jdXJsL3JlbGVhc2VzL2Rvd25sb2FkL2N1cmwtN181OF8wL2N1cmwtNy41OC4wLnRhci54eiIsXG4gICAgICAgICJsYW5ndWFnZSI6ICJjcHAiLFxuICAgICAgICAiZml4ZWRJbiI6IFtcbiAgICAgICAgICAiIlxuICAgICAgICBdLFxuICAgICAgICAicGF0Y2hlcyI6IFtdLFxuICAgICAgICAiZXhwbG9pdCI6ICJObyBEYXRhIixcbiAgICAgICAgImZ1bmN0aW9ucyI6IFtcbiAgICAgICAgICAiIlxuICAgICAgICBdLFxuICAgICAgICAic2VtdmVyIjoge1xuICAgICAgICAgICJ2dWxuZXJhYmxlIjogW1xuICAgICAgICAgICAgIjcuNTguMCJcbiAgICAgICAgICBdLFxuICAgICAgICAgICJ2dWxuZXJhYmxlSGFzaGVzIjogW1xuICAgICAgICAgICAgIiJcbiAgICAgICAgICBdLFxuICAgICAgICAgICJ2dWxuZXJhYmxlQnlEaXN0cm8iOiB7fVxuICAgICAgICB9LFxuICAgICAgICAicmVmZXJlbmNlcyI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICAidGl0bGUiOiAiaHR0cHM6Ly9jdXJsLmhheHguc2UvZG9jcy9DVkUtMjAxOS01NDgxLmh0bWwiLFxuICAgICAgICAgICAgInVybCI6ICJodHRwczovL2N1cmwuaGF4eC5zZS9kb2NzL0NWRS0yMDE5LTU0ODEuaHRtbCJcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICAiaW50ZXJuYWwiOiB7fSxcbiAgICAgICAgImlkZW50aWZpZXJzIjoge1xuICAgICAgICAgICJDVkUiOiBbXG4gICAgICAgICAgICAiQ1ZFLTIwMTktNTQ4MSJcbiAgICAgICAgICBdLFxuICAgICAgICAgICJDV0UiOiBbXSxcbiAgICAgICAgICAiQUxURVJOQVRJVkUiOiBbXG4gICAgICAgICAgICAiIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgInRpdGxlIjogIkNWRS0yMDE5LTU0ODEiLFxuICAgICAgICAiZGVzY3JpcHRpb24iOiAiIixcbiAgICAgICAgImxpY2Vuc2UiOiAiIixcbiAgICAgICAgInByb3ByaWV0YXJ5IjogdHJ1ZSxcbiAgICAgICAgIm5lYXJlc3RGaXhlZEluVmVyc2lvbiI6ICIiXG4gICAgICB9XG4gICAgfSxcbiAgICAiZmlsZVNpZ25hdHVyZXNEZXRhaWxzIjoge1xuICAgICAgImN1cmx8aHR0cHM6Ly9naXRodWIuY29tL2N1cmwvY3VybC9yZWxlYXNlcy9kb3dubG9hZC9jdXJsLTdfNThfMC9jdXJsLTcuNTguMC50YXIueHpANy41OC4wIjoge1xuICAgICAgICAiZmlsZVBhdGhzIjogW1xuICAgICAgICAgICJkZXBzL2N1cmwtNy41OC4wL0NIQU5HRVMiLFxuICAgICAgICAgICJjLWV4YW1wbGUvZGVwcy9jdXJsLTcuNTguMC9DTWFrZS9DTWFrZUNvbmZpZ3VyYWJsZUZpbGUuaW4iLFxuICAgICAgICAgICJjLWV4YW1wbGUvZGVwcy9jdXJsLTcuNTguMC9DTWFrZS9DdXJsU3ltYm9sSGlkaW5nLmNtYWtlIlxuICAgICAgICBdLFxuICAgICAgICAiY29uZmlkZW5jZSI6IDFcbiAgICAgIH1cbiAgICB9XG4gIH1cbl1cbicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNvbW1hbmQtbGluZS1vcHRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb21tYW5kLWxpbmUtb3B0aW9ucyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb21tYW5kLWxpbmUgb3B0aW9ucyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGZvbGxvd2luZyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsiKV0pLAogICAgICAgIF92bS5fdigiY29tbWFuZC1saW5lIG9wdGlvbnMgYXJlIHN1cHBvcnRlZCB3aXRoIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgdGVzdC9tb25pdG9yIC0tdW5tYW5hZ2VkIildKSwKICAgICAgICBfdm0uX3YoIiBjb21tYW5kczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAib3JnLW5hbWUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI29yZy1uYW1lIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBPUkdfTkFNRSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigiLS1vcmc9T1JHX05BTUUiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU3BlY2lmeSB0aGUgT1JHX05BTUUgdG8gcnVuIFNueWsgY29tbWFuZHMgdGllZCB0byBhIHNwZWNpZmljIG9yZ2FuaXphdGlvbi4gVGhpcyBkZWZpbmVzIHdoZXJlIG5ldyBwcm9qZWN0cyBhcmUgY3JlYXRlZCBhZnRlciBydW5uaW5nIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigibW9uaXRvciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjb21tYW5kLiBTb21lIGZlYXR1cmVzIGhhdmUgYXZhaWxhYmlsaXR5IGFuZCBwcml2YXRlIHRlc3RpbmcgbGltaXRzLiBJZiB5b3UgaGF2ZSBtdWx0aXBsZSBvcmdhbml6YXRpb25zLCB5b3UgY2FuIHNldCBhIGRlZmF1bHQgZnJvbSB0aGUgQ0xJIHVzaW5nOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrIGNvbmZpZyBzZXQgb3JnPU9SR19OQU1FXG4iKV0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNldHRpbmcgYSBkZWZhdWx0IGVuc3VyZXMgYWxsIG5ld2x5IG1vbml0b3JlZCBwcm9qZWN0cyBhcmUgY3JlYXRlZCB1bmRlciB5b3VyIGRlZmF1bHQgb3JnYW5pemF0aW9uLiBUbyBvdmVycmlkZSB0aGUgZGVmYXVsdCwgdXNlIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1vcmc9T1JHX05BTUUiKV0pLAogICAgICAgIF92bS5fdigiIGFyZ3VtZW50LiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEZWZhdWx0OiB1c2VzIHRoZSBPUkdfTkFNRSBzZXQgYXMgZGVmYXVsdCBpbiB5b3VyIEFjY291bnQgc2V0dGluZ3MuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImpzb24iIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2pzb24iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIganNvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigiLS1qc29uIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcmludHMgcmVzdWx0cyBpbiBKU09OIGZvcm1hdC4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIm91dHB1dC1maWxlLXBhdGgiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI291dHB1dC1maWxlLXBhdGgiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT1VUUFVUX0ZJTEVfUEFUSCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigiLS1qc29uLWZpbGUtb3V0cHV0PU9VVFBVVF9GSUxFX1BBVEgiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiKG9ubHkgaW4gdGVzdCBjb21tYW5kKSBTYXZlIHRlc3Qgb3V0cHV0IGluIEpTT04gZm9ybWF0IGRpcmVjdGx5IHRvIHRoZSBzcGVjaWZpZWQgZmlsZSwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIG9yIG5vdCB5b3UgdXNlIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1qc29uIildKSwKICAgICAgICBfdm0uX3YoIiBvcHRpb24uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGlzIGlzIHVzZWZ1bCB0byBkaXNwbGF5IHRoZSBodW1hbi1yZWFkYWJsZSB0ZXN0IG91dHB1dCB2aWEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInN0ZG91dCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIGF0IHRoZSBzYW1lIHRpbWUgc2F2ZSB0aGUgSlNPTiBmb3JtYXQgb3V0cHV0IHRvIGEgZmlsZS4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigidGFyZ2V0LWRpciIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigiLS10YXJnZXQtZGlyIDxkaXJlY3Rvcnk+IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNjYW4gdGhlIHBhdGggc3BlY2lmaWVkIGluIHRoZSBhcmd1bWVudCBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IGRpcmVjdG9yeS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoJ3slIGhpbnQgc3R5bGU9ImluZm8iICV9XG5BbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHJ1biBqdXN0ICcpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayB0ZXN0IC0tdW5tYW5hZ2VkIDxkaXJlY3Rvcnk+IildKSwKICAgICAgICBfdm0uX3YoIlxueyUgZW5kaGludCAlfSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJtYXgtZGVwdGgiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiY29kZSIsIFtfdm0uX3YoIi0tbWF4LWRlcHRoPTEiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlNwZWNpZnkgdGhlIG1heGltdW0gbGV2ZWwgb2YgYXJjaGl2ZSBleHRyYWN0aW9uLiBVc2UgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIwIildKSwKICAgICAgICBfdm0uX3YoIiB0byBkaXNhYmxlIGFyY2hpdmUgZXh0cmFjdGlvbiBjb21wbGV0ZWx5LiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpbXBvcnQtc2Nhbi1yZXN1bHRzLWluLXNueWstYXBwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpbXBvcnQtc2Nhbi1yZXN1bHRzLWluLXNueWstYXBwIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEltcG9ydCBzY2FuIHJlc3VsdHMgaW4gU255ayBBcHAiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gaW1wb3J0IHRoZSB0ZXN0IHJlc3VsdHMgKGlzc3VlcyBhbmQgZGVwZW5kZW5jaWVzKSBpbiBTbnlrIEFwcDsgcnVuIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgbW9uaXRvciAtLXVubWFuYWdlZCIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiQgc255ayBtb25pdG9yIC0tdW5tYW5hZ2VkXG5Nb25pdG9yaW5nIC9jLWV4YW1wbGUgKGMtZXhhbXBsZSkuLi5cblxuRXhwbG9yZSB0aGlzIHNuYXBzaG90IGF0IGh0dHBzOi8vYXBwLnNueWsuaW8vb3JnL2V4YW1wbGUtb3JnL3Byb2plY3QvOGFjMGUyMzMtZDBmOS00MDNlLWI0MjItNTk3MGU3YTM3NDQzL2hpc3RvcnkvNWRlNDYxNmQtMzk2Ny00ODVmLWJmMjEtYmJiZTkxMDY4MDI5XG5cbk5vdGlmaWNhdGlvbnMgYWJvdXQgbmV3bHkgZGlzY2xvc2VkIGlzc3VlcyByZWxhdGVkIHRvIHRoZXNlIGRlcGVuZGVuY2llcyB3aWxsIGJlIGVtYWlsZWQgdG8geW91LlxuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBjcmVhdGVzIGEgc25hcHNob3Qgb2YgZGVwZW5kZW5jaWVzIGFuZCB2dWxuZXJhYmlsaXRpZXMsIGFuZCBpbXBvcnRzIHRoZW0gaW50byB0aGUgU255ayBBcHAsIHdoZXJlIHlvdSBjYW4gcmV2aWV3IHRoZSBpc3N1ZXMgYW5kIHNlZSB0aGVtIGluY2x1ZGVkIGluIHlvdXIgcmVwb3J0cy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW1wb3J0aW5nIGEgcHJvamVjdCB3aXRoIHVubWFuYWdlZCBkZXBlbmRlbmNpZXMgY3JlYXRlcyBhIG5ldyBwcm9qZWN0IGluIFNueWsgQXBwOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9rdXZhLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJQcm9qZWN0IHdpdGggdW5tYW5hZ2VkIGRlcGVuZGVuY2llcyIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJrbm93bi1pc3N1ZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2tub3duLWlzc3VlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgS25vd24gaXNzdWVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNjYW5uaW5nIG9uIFdpbmRvd3MiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTWFueSBvcGVuIHNvdXJjZSBwcm9qZWN0cyBpbiBnaXQgdXNlIFVuaXggbGluZSBlbmRpbmdzLiBCeSBkZWZhdWx0LCBnaXQgb24gV2luZG93cyBjb252ZXJ0cyBVbml4IGxpbmUgZW5kaW5ncyB0byBXaW5kb3dzIGxpbmUgZW5kaW5ncyBhbmQgb25seSBjb252ZXJ0cyB0aGVtIGJhY2sgZm9yIHRoZSBhY3R1YWwgY29tbWl0cy4gT3VyIGRhdGFiYXNlIGNvbnRhaW5zIHNvdXJjZSBjb2RlIHNpZ25hdHVyZXMgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBlbmRpbmdzIChhcyBkZWZpbmVkIGluIHRoZSBpbmRpdmlkdWFsIHByb2plY3RzKSwgc28gd2hlbiB5b3Ugc2NhbiBvbiBXaW5kb3dzLCB0aGUgc2lnbmF0dXJlcyBnZW5lcmF0ZWQgZm9yIHRoZSBmaWxlcyB3aXRoIFdpbmRvd3MgbGluZSBlbmRpbmdzIGFyZSBkaWZmZXJlbnQgdGhhbiB0aGUgc2lnbmF0dXJlcyBpbiBvdXIgZGF0YWJhc2UuIEluIHRoYXQgY2FzZSwgaXQgaXMgdmVyeSBsaWtlbHkgbm8gZGVwZW5kZW5jaWVzIHdpbGwgYmUgZm91bmQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIHNjYW4gYSBwcm9qZWN0IHdpdGggVW5peCBsaW5lIGVuZGluZ3Mgb24gV2luZG93cywgZGlzYWJsZSBnaXQgbGluZSBlbmRpbmdzIGNvbnZlcnNpb24uIFRvIGNvbmZpZ3VyZSB0aGlzIGdsb2JhbGx5LCBydW46IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1zaGVsbCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS1zaGVsbCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJnaXQiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIGNvbmZpZyAtLWdsb2JhbCBjb3JlLmF1dG9jcmxmICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGJvb2xlYW4iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZmFsc2UiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNmcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGcmVxdWVudGx5IGFza2VkIHF1ZXN0aW9ucyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJpcy1teS1zb3VyY2UtY29kZS1zZW50LXRvLXNueWstc2VydmVycyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXMtbXktc291cmNlLWNvZGUtc2VudC10by1zbnlrLXNlcnZlcnMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIklzIG15IHNvdXJjZSBjb2RlIHNlbnQgdG8gU255ayBzZXJ2ZXJzPyIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vLiBUaGUgZmlsZXMgYXJlIGNvbnZlcnRlZCB0byBhIGxpc3Qgb2YgaGFzaGVzIGJlZm9yZSB0aGV5IGFyZSBzZW50IGZvciBzY2FubmluZy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAid2h5LWRpZC1zbnlrLW5vdC1maW5kLWFueS1kZXBlbmRlbmNpZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doeS1kaWQtc255ay1ub3QtZmluZC1hbnktZGVwZW5kZW5jaWVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJXaHkgZGlkIFNueWsgbm90IGZpbmQgYW55IGRlcGVuZGVuY2llcz8iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZSBzdG9yZSB0aGUgb2ZmaWNpYWwgcmVsZWFzZXMgb2YgbWFueSBvZiBvcGVuIHNvdXJjZSBjb21wb25lbnRzIGluIG91ciBkYXRhYmFzZSBidXQgaXQgaXMgcG9zc2libGUgdGhhdCB0aGUgc291cmNlIGNvZGUgeW91IHNjYW5uZWQgaXMgbm90IHRoZXJlIG9yIGlzIGp1c3Qgc2ltcGx5IG5vdCBmb3VuZC4gTGV0IHVzIGtub3cgYW5kIHdlIGNhbiBoZWxwIHlvdSBmaW5kIG91dCB3aGF0IGhhcHBlbmVkIGFuZCBwb3RlbnRpYWxseSBpbXByb3ZlIG91ciBzY2FubmluZyBhbGdvcml0aG1zLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSGVyZSBhcmUgYSBmZXcgdGhpbmdzIHRoYXQgeW91IGNhbiBjaGVjayBvbiB5b3VyIG93bjoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHNvdXJjZSBjb2RlIG9mIHRoZSBkZXBlbmRlbmNpZXMgeW91IHNjYW5uZWQgaXMgYWN0dWFsbHkgYXZhaWxhYmxlIGFzIHNvdXJjZSBjb2RlICh1bnBhY2tlZCkgaW4gdGhlIGZvbGRlciB0aGF0IHlvdSBzY2FubmVkLiBJZiB5b3UgdXNlIGEgcGFja2FnZSBtYW5hZ2VyLCBzdWNoIGFzIENvbmFuLCB0aGUgc291cmNlIGNvZGUgaXMgbGlrZWx5IHRvIGJlIGluIHRoZSBDb25hbiBjYWNoZSwgYWxvbmcgd2l0aCB0aGUgc291cmNlIGNvZGUgb2Ygb3RoZXIgZGVwZW5kZW5jaWVzIG9mIHlvdXIgb3RoZXIgcHJvamVjdHMuIFRvIHNjYW4gZGVwZW5kZW5jaWVzIG1hbmFnZWQgYnkgYSBwYWNrYWdlIG1hbmFnZXIsIHdlIHJlY29tbWVuZCB0aGF0IHlvdSBkbyB0aGF0IGluIGEgY2xlYW4gZW52aXJvbm1lbnQgKGZvciBleGFtcGxlIGR1cmluZyBhIGJ1aWxkKS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBzb3VyY2UgY29kZSBvZiB0aGUgZGVwZW5kZW5jaWVzIGlzIG5vdCBmcm9tIGFuIG9mZmljaWFsIHJlbGVhc2Ugb2YgdGhlIE9TUyBjb21wb25lbnQsIGFuZCB3ZSBkbyBub3QgaGF2ZSBpdCBpbiB0aGUgZGF0YWJhc2UiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBzb3VyY2UgY29kZSBvZiB0aGUgT1NTIGhhcyBiZWVuIG1vZGlmaWVkIHRvbyBtdWNoLCBzbyBTbnlrIGNhbm5vdCBkZXRlY3QgaXQuIElmIHRoZXJlIGFyZSB0b28gZmV3IGZpbGVzIGFuZCB5b3UgbW9kaWZ5IG1vc3Qgb2YgdGhlbSwgU255ayBjYW5ub3QgbWF0Y2ggdGhlbSB0byBhIGNvbXBvbmVudCBmcm9tIG91ciBkYXRhYmFzZS4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkV4YW1wbGVzIG9mIGNvbW1vbiBtb2RpZmljYXRpb25zIGFyZSB3aGl0ZXNwYWNlIGZvcm1hdHRpbmcsIGFkZGluZyBsaWNlbnNlIG9yIGNvcHlyaWdodCBoZWFkZXJzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IGFyZSBvbiBXaW5kb3dzLCBhbmQgZ2l0IGNvbnZlcnRlZCBsaW5lIGVuZGluZ3MgdG8gV2luZG93cyBsaW5lIGVuZGluZ3MuIEN1cnJlbnRseSB3ZSBjYW4gcmVjb2duaXplIGZpbGVzIHRoYXQgaGF2ZSByZXRhaW5lZCB0aGVpciBvcmlnaW5hbCBsaW5lIGVuZGluZ3MuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgc291cmNlIGNvZGUgb2YgdGhlIE9TUyBjb21wb25lbnRzIGlzIHRvbyBuZXcuIE91ciBkYXRhYmFzZSBpcyByZWZyZXNoZWQgbW9udGhseSBidXQgaXQgdGFrZXMgdGltZSBmb3IgdGhlIGxhdGVzdCByZWxlYXNlcyB0byBnZXQgcHJvY2Vzc2VkLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}