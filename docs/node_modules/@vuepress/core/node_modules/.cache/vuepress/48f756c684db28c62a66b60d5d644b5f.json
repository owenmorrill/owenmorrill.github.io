{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/getting-started/snyk-billing-plan-onboarding/snyk-cicd-integration-good-practices.md?vue&type=template&id=64272bd8&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/snyk/getting-started/snyk-billing-plan-onboarding/snyk-cicd-integration-good-practices.md","mtime":1644439892975},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAic255ay1jaS1jZC1pbnRlZ3JhdGlvbi1nb29kLXByYWN0aWNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1jaS1jZC1pbnRlZ3JhdGlvbi1nb29kLXByYWN0aWNlcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTbnlrIENJL0NEIEludGVncmF0aW9uOiBnb29kIHByYWN0aWNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpbXBsZW1lbnRhdGlvbi1vcHRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpbXBsZW1lbnRhdGlvbi1vcHRpb25zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEltcGxlbWVudGF0aW9uIE9wdGlvbnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cbkFsbCB0aGVzZSBtZXRob2RzIHByb3ZpZGUgdGhlIHNhbWUgcmVzdWx0cywgYXMgdGhleSBhbGwgcmVseSBvbiB0aGUgc2FtZSBTbnlrIGVuZ2luZSBiZWhpbmQgdGhlIHNjZW5lcy4gU28gdGhlIHNhbWUgYXJndW1lbnRzIG9yIG9wdGlvbnMgc2hvdWxkIGJlIHRydWUgd2hhdGV2ZXIgZGVwbG95bWVudCBtZXRob2QgeW91IHNlbGVjdC5cbnslIGVuZGhpbnQgJX0nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiY2ktY2QtZGVwbG95bWVudC1tZXRob2RzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjaS1jZC1kZXBsb3ltZW50LW1ldGhvZHMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ0kvQ0QgRGVwbG95bWVudCBtZXRob2RzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIGFyZSB2YXJpb3VzIHdheXMgdG8gY29uZmlndXJlIFNueWsgd2l0aGluIHlvdXIgcGlwZWxpbmUuIFRoZSBjaG9pY2Ugb2Ygd2hpY2ggbWV0aG9kIHdpbGwgbWFpbmx5IGRlcGVuZCBvbiB5b3VyIGVudmlyb25tZW50IGFuZCBwcmVmZXJlbmNlLCBhbmQgdGhleSBzaG91bGQgYWxsIGxlYWQgdG8gYSBzdWNjZXNzZnVsIHJ1bjoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiVXNpbmcgU255ayBuYXRpdmUgcGx1Z2lucyIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBdmFpbGFibGUgZm9yIG1vc3QgY29tbW9uIENJL0NEIHRvb2xzLiBFYXNpZXN0IHdheSB0byBzZXR1cCBhbmQgZ2V0IHN0YXJ0ZWQuIFRoZSBwbHVnaW5zIGluY2x1ZGUgdGhlIG1vc3QgY29tbW9uIHBhcmFtZXRlcnMgYW5kIG9wdGlvbnMgaW4gdGhlIGludGVyZmFjZSBVSS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiRGVwbG95IFNueWsgQ0xJIHVzaW5nIHRoZSBucG0gbWV0aG9kIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNpbWlsYXIgc3RlcHMgYXMgaW5zdGFsbGluZyB0aGUgQ0xJIGxvY2FsbHkuIFJlcXVpcmVzIHlvdSB0byBiZSBhYmxlIHRvIHJ1biBhbiBucG0gY29tbWFuZCBpbiB0aGUgcGlwZWxpbmUgc2NyaXB0LiBUaGlzIG1ldGhvZCBoYXMgdGhlIGFkdmFudGFnZSBvZiBjb21wbGV0ZWx5IGFsaWduaW5nIHdpdGggdGhlIENMSSBleHBlcmllbmNlIHNvIHlvdSBjYW4gZWFzaWx5IHRyb3VibGVzaG9vdCBhbmQgY29uZmlndXJlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJEZXBsb3kgU255ayBDTEkgYmluYXJ5IHZlcnNpb24iKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGFkdmFudGFnZSBvZiB0aGUgYmluYXJ5IHNldHVwIGlzIHRoYXQgaXQgaGFzIG5vIGRlcGVuZGVuY3kgd2l0aCB0aGUgbG9jYWwgZW52aXJvbm1lbnQuIEl0IGlzIHVzZWZ1bCBpZiB5b3UgY2Fubm90IHJ1biBhIG5wbSBjb21tYW5kIGluIHlvdXIgcGlwZWxpbmUgZm9yIGluc3RhbmNlVGhlIHZhcmlvdXMgdmVyc2lvbnMgb2YgdGhlIENMSSBiaW5hcmllcyBhcmUgYXZhaWxhYmxlIGhlcmU6IgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrL3NueWsvdGFncyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJodHRwczovL2dpdGh1Yi5jb20vc255ay9zbnlrL3RhZ3MiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiU255ayBoYXMgYSBMaW51eCwgV2luZG93cyBhbmQgb3RoZXIgdmVyc2lvbnMuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRlcGxveSBhIFNueWsgQ29udGFpbmVyIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBtYXkgYWxzbyBkZXBsb3kgU255ayBpbiB5b3VyIHBpcGVsaW5lIHVzaW5nIG9uZSBvZiBvdXIgaW1hZ2VzIGluIERvY2tlcmh1YjogIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vaHViLmRvY2tlci5jb20vci9zbnlrL3NueWsiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiaHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3NueWsvc255ayIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImV4YW1wbGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNleGFtcGxlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRXhhbXBsZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGZvbGxvd2luZyByZXBvIHNoYXJlcyBzb21lIGV4YW1wbGVzIG9mIGJpbmFyeSBhbmQgTlBNIGludGVncmF0aW9ucyBmb3IgdmFyaW91cyBDSS9DRCB0b29sczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3NueWstbGFicy9zbnlrLWNpY2QtaW50ZWdyYXRpb24tZXhhbXBsZXMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQ0kvQ0QgZXhhbXBsZXMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0eXBpY2FsLXN0YWdlcy1vZi1hZG9wdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdHlwaWNhbC1zdGFnZXMtb2YtYWRvcHRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVHlwaWNhbCBzdGFnZXMgb2YgYWRvcHRpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkRldmVsb3BlciB0ZWFtcyB0eXBpY2FsbHkgYWRvcHQgU255ayBpbiB0aGUgZm9sbG93aW5nIHN0YWdlczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvc255ay9nZXR0aW5nLXN0YXJ0ZWQvc255ay1iaWxsaW5nLXBsYW4tb25ib2FyZGluZy9zbnlrLWNpY2QtaW50ZWdyYXRpb24tZ29vZC1wcmFjdGljZXMuaHRtbCIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiRXhwb3NlIHZ1bG5lcmFiaWxpdGllcyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAoc255ayBtb25pdG9yKSIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL3NueWsvZ2V0dGluZy1zdGFydGVkL3NueWstYmlsbGluZy1wbGFuLW9uYm9hcmRpbmcvc255ay1jaWNkLWludGVncmF0aW9uLWdvb2QtcHJhY3RpY2VzLmh0bWwiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlVzZSBTbnlrIGFzIGEgZ2F0ZWtlZXBlciIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAoc255ayB0ZXN0KSIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOiAiL3NueWsvZ2V0dGluZy1zdGFydGVkL3NueWstYmlsbGluZy1wbGFuLW9uYm9hcmRpbmcvc255ay1jaWNkLWludGVncmF0aW9uLWdvb2QtcHJhY3RpY2VzLmh0bWwiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRpbnVvdXMgbW9uaXRvcmluZyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAoc255ayB0ZXN0ICsgU255ayBtb25pdG9yKSIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInN0YWdlLTEtZXhwb3NlLXZ1bG5lcmFiaWxpdGllcy1zbnlrLW1vbml0b3IiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N0YWdlLTEtZXhwb3NlLXZ1bG5lcmFiaWxpdGllcy1zbnlrLW1vbml0b3IiIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiU3RhZ2UgMTogRXhwb3NlIHZ1bG5lcmFiaWxpdGllcyAoU255ayBtb25pdG9yKSIpLAogICAgICAgICAgXSksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgaXMgYSB0eXBpY2FsIGluaXRpYWwgYXBwcm9hY2gsIHVzaW5nIFNueWsgcmVzdWx0cyB0byBleHBvc2UgdG8geW91ciB0ZWFtIHZ1bG5lcmFiaWxpdGllcyBkdXJpbmcgdGhlIGRldmVsb3BtZW50IHByb2Nlc3MsIHdoaWNoIGluY3JlYXNlcyB2aXNpYmlsaXR5IG9mIHRoZXNlIHZ1bG5lcmFiaWxpdGllcyBhbW9uZ3N0IHlvdXIgdGVhbS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiB5b3UgZmlyc3QgaW1wbGVtZW50IFNueWsgaW4geW91ciBwaXBlbGluZSwgd2UgcmVjb21tZW5kIHlvdSB1c2Ugb25seSB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWsgbW9uaXRvciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjb21tYW5kLCBvciBpZiB5b3UgdXNlIG9uZSBvZiBTbnlrJ3MgQ0kgcGx1Z2lucywgdG8gY29uZmlndXJlIHRoZSBwbHVnaW4gdG8gbm90IGZhaWwgdGhlIGJ1aWxkLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcblRoaXMgaXMgYmVjYXVzZSBhbGwgcHJvamVjdHMgYXJlIHZ1bG5lcmFibGUsIGFuZCBhZnRlciB5b3Ugc2V0IFNueWsgdG8gZmFpbCB0aGUgYnVpbGQsIGV2ZXJ5IGJ1aWxkIHdpbGwgZmFpbCBiZWNhdXNlIG9mIFNueWssIHdoaWNoIG1heSBjYXVzZSBwcm9ibGVtcyB3aXRoIHlvdXIgdGVhbSBiZWluZyBxdWlja2x5IG92ZXJ3aGVsbWVkIHdpdGggZmFpbHVyZSBtZXNzYWdlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlVzaW5nICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIG1vbml0b3IiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8gZXhwb3NlIHJlc3VsdHMgd2lsbCBwcm92aWRlIGluZm9ybWF0aW9uLCB3aXRob3V0IGRpc3J1cHRpbmcgcHJvY2Vzc2VzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInN0YWdlLTItdXNlLXNueWstYXMtYS1nYXRla2VlcGVyLXNueWstdGVzdCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3RhZ2UtMi11c2Utc255ay1hcy1hLWdhdGVrZWVwZXItc255ay10ZXN0IiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIlN0YWdlIDI6IFVzZSBTbnlrIGFzIGEgZ2F0ZWtlZXBlciAoc255ayB0ZXN0KSIpLAogICAgICAgICAgXSksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1RoaXMgbmV4dCBhcHByb2FjaCBwcmV2ZW50cyB0aGUgaW50cm9kdWN0aW9uIG9mIG5ldyB2dWxuZXJhYmlsaXRpZXMgKHNvbWV0aW1lcyBrbm93biBhcyAic3RvcHBpbmcgdGhlIGJsZWVkaW5nIikuJwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFmdGVyIHlvdXIgdGVhbXMgdW5kZXJzdGFuZCB0aGUgdnVsbmVyYWJpbGl0aWVzIGluIHRoZWlyIGFwcGxpY2F0aW9ucywgYW5kIGRldmVsb3BzIGEgcHJvY2VzcyBmb3IgcmVtZWRpYXRpbmcgdGhlbSBlYXJseSBpbiB0aGUgZGV2ZWxvcG1lbnQgY3ljbGUsIHlvdSBjYW4gY29uZmlndXJlIFNueWsgdG8gZmFpbCB5b3VyIGJ1aWxkcywgdG8gcHJldmVudCBpbnRyb2R1Y2luZyB2dWxuZXJhYmlsaXRpZXMgaW50byB5b3VyIGFwcGxpY2F0aW9ucy4uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBZGQgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWsgdGVzdCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byB5b3VyIGJ1aWxkIG9yIGVuYWJsZSB0aGUgZmFpbCBmdW5jdGlvbmFsaXR5IHRvIG1ha2UgU255ayBmYWlsIHlvdXIgYnVpbGRzLCBwcm92aWRpbmcgdGhlIHJlc3VsdHMgb3V0cHV0IHRvIHRoZSBjb25zb2xlLiBZb3VyIERldnMgb3IgRGV2T3BzIHRlYW1zIGNhbiB1c2UgdGhlIHJlc3VsdHMgdG8gZGVjaWRlIHdoZXRoZXIgdG8gc3RvcCBvciBjb250aW51ZSB0aGUgYnVpbGQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogInN0YWdlLTMtY29udGludW91cy1tb25pdG9yaW5nLXNueWstdGVzdC1zbnlrLW1vbml0b3IiIH0sCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNzdGFnZS0zLWNvbnRpbnVvdXMtbW9uaXRvcmluZy1zbnlrLXRlc3Qtc255ay1tb25pdG9yIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIlN0YWdlIDM6IENvbnRpbnVvdXMgbW9uaXRvcmluZyAoc255ayB0ZXN0ICsgU255ayBtb25pdG9yKSIpLAogICAgICAgICAgXSksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFmdGVyIHlvdSBjb25maWd1cmUgU255ayB0byBmYWlsIHRoZSBidWlsZCB3aGVuIHZ1bG5lcmFiaWxpdGllcyBhcmUgZGV0ZWN0ZWQsIHlvdSBjYW4gbm93IGNvbmZpZ3VyZSBTbnlrIHRvIHNlbmQgYSBzbmFwc2hvdCBvZiB5b3VyIHByb2plY3QncyBzdWNjZXNzZnVsIGJ1aWxkcyB0byBTbnlrIGZvciBvbmdvaW5nIG1vbml0b3JpbmcuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUbyBkbyB0aGlzLCBjb25maWd1cmUgeW91ciBwaXBlbGluZSB0byBydW4gIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWsgbW9uaXRvciIpXSksCiAgICAgICAgX3ZtLl92KCIgaWYgeW91ciAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigic255ayB0ZXN0IildKSwKICAgICAgICBfdm0uX3YoIiByZXR1cm5zIGEgc3VjY2Vzc2Z1bCBleGl0IGNvZGUuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRlY2huaWNhbC1pbXBsZW1lbnRhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGVjaG5pY2FsLWltcGxlbWVudGF0aW9uIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUZWNobmljYWwgSW1wbGVtZW50YXRpb24iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcmVyZXF1aXNpdGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwcmVyZXF1aXNpdGVzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcmVyZXF1aXNpdGVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGNvbmZpZ3VyZSBTbnlrIHRvIHJ1biBpbiBhIHBpcGVsaW5lLCByZXRyaWV2ZSBrZXkgY29uZmlndXJhdGlvbiBpbnB1dHMgZnJvbSB5b3VyIFNueWsgYWNjb3VudC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZGVmaW5lLXRhcmdldC1vcmdhbml6YXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2RlZmluZS10YXJnZXQtb3JnYW5pemF0aW9uIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlZmluZSB0YXJnZXQgb3JnYW5pemF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoZW4geW91IHJ1biBTbnlrIGluIHlvdXIgQ0kvQ0QgcGxhdGZvcm0sIHlvdSB3aWxsIHR5cGljYWxseSB3YW50IHRvIHBvc3QgdGhlIHRlc3QgcmVzdWx0cyB0byBTbnlrLCBmb3IgcmV2aWV3IGFuZCBvbmdvaW5nIG1vbml0b3JpbmcuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBjYW4gZGVmaW5lIHRoZSB0YXJnZXQgb3JnYW5pemF0aW9uIGluIHRoZSBTbnlrIENMSSwgYnkgZWl0aGVyIFVSTCBzbHVnIG9yIG9yZ2FuaXphdGlvbiBJRCwgdXNpbmcgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItLW9yZyIpXSksCiAgICAgICAgX3ZtLl92KCIgQ0xJIGFyZ3VtZW50OiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJZb3UgY2FuIGRlZmluZSB0aGUgdGFyZ2V0IG9yZ2FuaXphdGlvbiB1c2luZyBpdHMgVVJMIHNsdWcsIGFzIGRpc3BsYXllZCBpbiB0aGUgYnJvd3NlcidzIGFkZHJlc3MgYmFyIHdoZW4gdmlld2luZyBpdCBpbiB0aGUgU255ayBVSToiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiT3IgeW91IGNhbiBkZWZpbmUgdGhlIHRhcmdldCBvcmdhbml6YXRpb24gdXNpbmcgaXRzICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIm9yZyBpZCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpbiBlYWNoIG9yZ2FuaXphdGlvbidzIHNldHRpbmdzIHBhZ2U6IiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlMS5wbmciKSwgYWx0OiAiIiB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJEZWZhdWx0IG9yZ2FuaXphdGlvbiIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgZG8gbm90IGRlZmluZSBhIHRhcmdldCBvcmdhbml6YXRpb24sIFNueWsgdXNlcyB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb24gZm9yIHRoZSBhdXRoZW50aWNhdGlvbiB0b2tlbiB5b3UgdXNlOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGb3IgdXNlciBhY2NvdW50cywgdGhpcyBpcyB0aGUgdXNlcidzIHByZWZlcnJlZCBvcmdhbml6YXRpb24gKGNvbmZpZ3VyYWJsZSBpbiB0aGUgdXNlcidzIHNldHRpbmdzKS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZvciBvcmdhbml6YXRpb24gc2VydmljZSBhY2NvdW50cywgdGhpcyBpcyB0aGUgb3JnYW5pemF0aW9uIGluIHdoaWNoIHRoZSBhY2NvdW50IHdhcyBjcmVhdGVkLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInNueWstYXV0aGVudGljYXRpb24tdG9rZW4iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NueWstYXV0aGVudGljYXRpb24tdG9rZW4iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU255ayBBdXRoZW50aWNhdGlvbiBUb2tlbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBydW4gdGhlIHNueWsgdGVzdCwgeW91IG5lZWQgYW4gYXV0aGVudGljYXRpb24gdG9rZW4gd2l0aCBhY2Nlc3MgdG8gdGhlIGRlc2lyZWQgdGFyZ2V0IG9yZ2FuaXphdGlvbiAuIFdoaWxlIHlvdSBjYW4gdXNlIGFueSB2YWxpZCBhdXRoZW50aWNhdGlvbiB0b2tlbiwgd2UgcmVjb21tZW5kIHVzaW5nIGEgc2VydmljZSBhY2NvdW50LiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL2ludGVncmF0aW9ucy9tYW5hZ2luZy1pbnRlZ3JhdGlvbnMvc2VydmljZS1hY2NvdW50cyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJTZXJ2aWNlIGFjY291bnRzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic2V0dGluZy11cCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc2V0dGluZy11cCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU2V0dGluZyBVcCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbnlrIHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcyB0byBhZGQgdGVzdHMgdG8gYSBidWlsZCBwaXBlbGluZToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgaW50ZWdyYXRpb24gcGx1Z2lucyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IFNueWsgcHJvdmlkZXMgcHJlLWJ1aWx0IHBsdWdpbnMgZm9yIHNldmVyYWwgQ0kgc2VydmVycywgaW5jbHVkaW5nICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9pbnRlZ3JhdGlvbnMvY2ktY2QtaW50ZWdyYXRpb25zL2plbmtpbnMtaW50ZWdyYXRpb24tb3ZlcnZpZXciLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkplbmtpbnMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL2ludGVncmF0aW9ucy9jaS1jZC1pbnRlZ3JhdGlvbnMvdGVhbWNpdHktaW50ZWdyYXRpb24tb3ZlcnZpZXciLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlRlYW0gQ2l0eSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnNueWsuaW8vaW50ZWdyYXRpb25zL2NpLWNkLWludGVncmF0aW9ucy9iaXRidWNrZXQtcGlwZWxpbmVzLWludGVncmF0aW9uLW92ZXJ2aWV3IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIsIEJpdGJ1Y2tldCBQaXBlbGluZXMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL2ludGVncmF0aW9ucy9jaS1jZC1pbnRlZ3JhdGlvbnMvYXp1cmUtcGlwZWxpbmVzLWludGVncmF0aW9uIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJBenVyZSBQaXBlbGluZXMuICIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgU2VlIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL2ludGVncmF0aW9ucy9jaS1jZC1pbnRlZ3JhdGlvbnMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRpbnVvdXMgSW50ZWdyYXRpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZGV0YWlscyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgQ0xJOiIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEZvciB0ZWFtcyB3aXRoIG1vcmUgY29tcGxleCB3b3JrZmxvd3MsIG9yIHVzaW5nIGEgYnVpbGQgc3lzdGVtIHdpdGhvdXQgYSBTbnlrIHByZS1idWlsdCBwbHVnaW4sIHlvdSBjYW4gdXNlIHRoZSBTbnlrIENMSSB0b29sIGR1cmluZyBDSS9DRCBzZXR1cHMuIFNlZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0bzogIi9zbnlrL2dldHRpbmctc3RhcnRlZC9zbnlrLWJpbGxpbmctcGxhbi1vbmJvYXJkaW5nL3NueWstY2ljZC1pbnRlZ3JhdGlvbi1nb29kLXByYWN0aWNlcy5odG1sIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJTZXR0aW5nIHVwIHVzaW5nIFNueWsgQ0xJIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIGZvciBtb3JlIGRldGFpbHMuIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNueWsgQVBJIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjogRm9yIHRlYW1zIHdpdGggY29tcGxleCByZXF1aXJlbWVudHMsIFNueWsgcHJvdmlkZXMgYSBSRVNUIEFQSSwgd2hpY2ggeW91IGNhbiB1c2UgZm9yIGZ1bmN0aW9ucyBpbmNsdWRpbmcgaW5pdGlhdGluZyBzY2Fucywgb25ib2FyZGluZyBuZXcgcHJvamVjdHMsIGFuZCB0ZXN0aW5nIGFyYml0cmFyeSBsaWJyYXJpZXMuIFNlZSB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrL3VzZXItZG9jcy90cmVlLzU0ZTBkZWMwZmUwZTA4MWQ0OWYzNDExOWE5MDE4NDk5YWQ1YzllOTYvZ2V0dGluZy1zdGFydGVkL3NueWstYmlsbGluZy1wbGFuLW9uYm9hcmRpbmcvc255ay1jaWNkLWludGVncmF0aW9uLWdvb2QtcHJhY3RpY2VzL1JFQURNRS5tZCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiU255ayBBUEkgZG9jdW1lbnRhdGlvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgZm9yIG1vcmUgZGV0YWlscy4iKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic2V0dGluZy11cC11c2luZy1zbnlrLWNsaSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2V0dGluZy11cC11c2luZy1zbnlrLWNsaSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTZXR0aW5nIHVwIHVzaW5nIFNueWsgQ0xJIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgQ0xJIGlzIGEgTm9kZUpTIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGJlIHNjcmlwdGVkIGRpcmVjdGx5IGJ5IGRldmVsb3BlcnMgZm9yIGVhc3kgaW50ZWdyYXRpb24gaW50byBtb3N0IENJL0NEIGVudmlyb25tZW50cywgYW5kIGlzIGF2YWlsYWJsZSBhcyBhbiBOUE0gYXBwbGljYXRpb24sIHByZS1wYWNrYWdlZCBiaW5hcnksIG9yIGNvbnRhaW5lciBpbWFnZS4gU2VlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9zbnlrLWNsaS9pbnN0YWxsLXRoZS1zbnlrLWNsaSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJJbnN0YWxsIHRoZSBTbnlrIENMSSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgZm9yIG1vcmUgZGV0YWlscyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU255ayBDTEkgY2FuIGJlIGNvbmZpZ3VyZWQgdG86IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJSZXR1cm4gbm9uLXplcm8gZXJyb3IgY29kZXMgb25seSB3aGVuIGNlcnRhaW4gY3JpdGVyaWEgYXJlIG1ldC4gRm9yIGV4YW1wbGUsIGV4aXQgd2l0aCBhbiBlcnJvciBjb2RlIG9ubHkgaWYgdnVsbmVyYWJpbGl0aWVzIG9mIGhpZ2ggc2V2ZXJpdHkgYXJlIHByZXNlbnQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk91dHB1dCBhbGwgb2YgaXRzIGRhdGEgaW50byBKU09OIGZvciBtb3JlIGZsZXhpYmlsaXR5LiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJFeGl0IENvZGVzIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJXaGVuIHVzaW5nIHRoZSBTbnlrIENMSToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIHRlc3QiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGlzIGEgc3luY2hyb25vdXMgY29tbWFuZCwgdGhhdCBlbmRzIHdpdGggYW4gZXhpdCBjb2RlLiBFeGl0IGNvZGVzIGNhbiB0aGVuIGJlIHVzZWQgYnkgeW91ciBidWlsZCBzeXN0ZW0gdG8gZWl0aGVyIHBhc3Mgb3IgZmFpbCB0aGUgYnVpbGQgYmFzZWQgb24gdGhlIHRlc3QgcmVzdWx0cy4gU2VlIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnNueWsuaW8vc255ay1jbGkvZ3VpZGVzLWZvci1vdXItY2xpL2NsaS1yZWZlcmVuY2UiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkNMSSByZWZlcmVuY2UgZ3VpZGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGZvciBkZXRhaWxzIG9uIGV4aXQgc3RhdHVzZXMgYW5kIHRoZWlyIG1lYW5pbmdzLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIG1vbml0b3IiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICh3aGljaCBwb3N0cyB0ZXN0IHJlc3VsdHMgdG8gdGhlIFNueWsgd2ViIFVJKSBpcyBhbiBhc3luY2hyb25vdXMgY29tbWFuZCwgdGhhdCBkb2VzIG5vdCBlbmQgd2l0aCBleGl0IGNvZGUgYmFzZWQgb24gdGhlIHZ1bG5lcmFiaWxpdHkgc3RhdHVzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkRlcGVuZGluZyBvbiB5b3VyIGFwcHJvYWNoIGFuZCBnb2FscywgeW91IG1heSBuZWVkIHRvIHVzZSBib3RoIGNvbW1hbmQgc2V0cyBpbiB5b3VyIHBpcGVsaW5lLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJDTEkgRXhhbXBsZXMiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkV4YW1wbGVzIG9mIHJ1bm5pbmcgdGhlIFNueWsgQ0xJIGluIGEgYnVpbGQgcGlwZWxpbmU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlNueWsgbW9uaXRvciB0byBzdXJmYWNlIHZ1bG5lcmFiaWxpdGllcyBhbmQgcG9zdCB0byB0aGUgU255ayBVSSBmb3Igb25nb2luZyBtb25pdG9yaW5nOiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJzbnlrIG1vbml0b3IgLS1hbGwtcHJvamVjdHMgLS1vcmc9c255ay1hcHBzXG4iKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJTbnlrIHRlc3QgdG8gZmFpbCB0aGUgYnVpbGQgb24gaGlnaCBzZXZlcml0eSBpc3N1ZXM6IiksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgInNueWsgdGVzdCAtLWFsbC1wcm9qZWN0cyAtLW9yZz1zbnlrLWFwcHMgLS1zZXZlcml0eS10aHJlc2hvbGQ9aGlnaFxuIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRvIHZpZXcgdGhlIGZ1bGwgbGlzdCBvZiBmbGFncyBpbiB0aGUgQ0xJLCBydW4gdGhlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIC0taGVscCIpXSksCiAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWsgY29udGFpbmVyIC0taGVscCIpXSksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbmZpZ3VyaW5nLWZhaWxpbmctYnVpbGQtcGFyYW1ldGVycyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29uZmlndXJpbmctZmFpbGluZy1idWlsZC1wYXJhbWV0ZXJzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbmZpZ3VyaW5nIGZhaWxpbmcgYnVpbGQgcGFyYW1ldGVycyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiWW91IGNhbiBhZGQgZmxhZ3MgdG8gdGhlICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIHRlc3QiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgY29tbWFuZCB0byBmaW5lLXR1bmUgcGFyYW1ldGVycyB0aGF0IHdpbGwgcmVzdWx0IGluIGEgZmFpbGVkIGJ1aWxkOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1zZXZlcml0eS10aHJlc2hvbGQ9aGlnaCIpXSksCiAgICAgICAgICBfdm0uX3YoIjogRmFpbCB0aGUgYnVpbGQgb25seSBmb3IgSGlnaCBTZXZlcml0eSBpc3N1ZXM6IiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tZmFpbC1vbj11cGdyYWRhYmxlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjogRmFpbCB0aGUgYnVpbGQgb25seSBmb3IgaXNzdWVzIHRoYXQgYXJlIHVwZ3JhZGFibGUgKGNhbiBiZSBmaXhlZCB3aXRoIFNueWsgcmVtZWRpYXRpb24gYWR2aWNlKToiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZb3UgY2FuIGFsc28gZmFpbCB0aGUgYnVpbGQgZm9yIGFueSBvdGhlciBwYXJhbWV0ZXIgaW4gdGhlIFNueWsgSlNPTiBvdXRwdXQgKHN1Y2ggYXMgQ1ZTUyBzY29yZSksIHVzaW5nIGEgd3JhcHBlciBsaWtlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc255ay10ZWNoLXNlcnZpY2VzL3NueWstZmlsdGVyIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInNueWstZmlsdGVyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgb3IgdXNlIGFkZGl0aW9uYWwgdG9vbGluZyBsaWtlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3N1cHBvcnQuc255ay5pby9oYy9lbi11cy9hcnRpY2xlcy8zNjAwMTk5Nzk5NzgiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigic255ay1kZWx0YSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byBmYWlsIHRoZSBidWlsZCBvbmx5IGZvciBpc3N1ZXMgZm91bmQgc2luY2UgdGhlIGxhc3QgYnVpbGQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNyZWF0aW5nLWN1c3RvbS1idWlsZC1hcnRpZmFjdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NyZWF0aW5nLWN1c3RvbS1idWlsZC1hcnRpZmFjdHMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ3JlYXRpbmcgY3VzdG9tIGJ1aWxkIGFydGlmYWN0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZb3UgY2FuIHVzZSBTbnlrJ3MgSlNPTiBvdXRwdXQgdG8gY3JlYXRlIGN1c3RvbSB0ZXN0IHJlcG9ydHMgYXMgYnVpbGQgYXJ0aWZhY3RzLCB1c2luZyB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrL3NueWstdG8taHRtbCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJzbnlrLXRvLWh0bWwiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIHV0aWxpdHksIG9yIG90aGVyIGN1c3RvbSBwcm9jZXNzaW5nIHlvdSBkZXZlbG9wLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImNyZWF0aW5nLXdvcmstaXRlbXMtZm9yLW5ldy12dWxuZXJhYmlsaXRpZXMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NyZWF0aW5nLXdvcmstaXRlbXMtZm9yLW5ldy12dWxuZXJhYmlsaXRpZXMiIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBDcmVhdGluZyB3b3JrIGl0ZW1zIGZvciBuZXcgdnVsbmVyYWJpbGl0aWVzIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgYWxsb3dzIHlvdSB0byBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBuZXcgd29yayBpdGVtcyBpbiBKSVJBIChzZWUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL2ludGVncmF0aW9ucy91bnRpdGxlZC0zL2ppcmEiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiSmlyYSBpbnRlZ3JhdGlvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBkb2N1bWVudGF0aW9uKS4gWW91IGNhbiBjdXN0b21pemUgdGhpcyBjb2RlIGZvciB5b3VyIHNwZWNpZmljIHJlcXVpcmVtZW50cywgb3IgYWRhcHQgaXQgdG8gd29yayB3aXRoIG90aGVyIHdvcmsgbWFuYWdlbWVudCBzeXN0ZW1zLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiU2VlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc255ay10ZWNoLXNlcnZpY2VzL2ppcmEtdGlja2V0cy1mb3ItbmV3LXZ1bG5zIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkppcmEgdGlja2V0cyBmb3IgbmV3IHZ1bG5zIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB0byBnZXQgc3RhcnRlZCwgb3IgcmV2aWV3IHRoZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3NueWsvdXNlci1kb2NzL3RyZWUvNTRlMGRlYzBmZTBlMDgxZDQ5ZjM0MTE5YTkwMTg0OTlhZDVjOWU5Ni9nZXR0aW5nLXN0YXJ0ZWQvc255ay1iaWxsaW5nLXBsYW4tb25ib2FyZGluZy9zbnlrLWNpY2QtaW50ZWdyYXRpb24tZ29vZC1wcmFjdGljZXMvUkVBRE1FLm1kI3JlZmVyZW5jZS9wcm9qZWN0cy9wcm9qZWN0LWppcmEtaXNzdWVzL2NyZWF0ZS1qaXJhLWlzc3VlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkFQSSB0byBjcmVhdGUgSmlyYSB0aWNrZXRzLiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImlnbm9yaW5nLWlzc3VlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaWdub3JpbmctaXNzdWVzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJZ25vcmluZyBpc3N1ZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnQnkgZGVmYXVsdCBpZiBpc3N1ZXMgYXJlIG5vdCBpZ25vcmVkLCBvciBpZiB5b3UgYXJlIG5vdCB1c2luZyBTbnlrLWRlbHRhLCBhICJzbnlrIHRlc3QiIGluIHlvdXIgcGlwZWxpbmUgZmFpbHMgdGhlIGJ1aWxkIHdoZW4gaXNzdWVzIGFyZSBmb3VuZC4gVG8gYWxsb3cgYnVpbGRzIHRvIGNvbnRpbnVlIHdpdGhvdXQgcmVzb2x2aW5nIHRoZXNlIGlzc3VlcywgeW91IGNhbjonCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnNueWsuaW8vc255ay1jbGkvZml4LXZ1bG5lcmFiaWxpdGllcy1mcm9tLXRoZS1jbGkvaWdub3JlLXZ1bG5lcmFiaWxpdGllcy11c2luZy1zbnlrLWNsaSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiSWdub3JlIGlzc3VlcyB1c2luZyBhIFNueWsgcG9saWN5IGZpbGUiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zdXBwb3J0LnNueWsuaW8vaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDAwOTIzNDk4LUhvdy1jYW4tSS1pZ25vcmUtYS12dWxuZXJhYmlsaXR5LSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiSWdub3JlIGlzc3VlcyBmcm9tIHRoZSBTbnlrIFVJIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbnlrLmRvY3MuYXBpYXJ5LmlvLyNyZWZlcmVuY2UvcHJvamVjdHMvcHJvamVjdC1pZ25vcmVzLWJ5LWlzc3VlL2FkZC1pZ25vcmUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIklnbm9yZSBpc3N1ZXMgZnJvbSB0aGUgU255ayBBUEkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlVzZSB0aGUgU255ayBQeXRob24gQVBJIGZvciBidWxrIGlnbm9yZXM6IHNlZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrLWxhYnMvcHlzbnlrIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJodHRwczovL2dpdGh1Yi5jb20vc255ay1sYWJzL3B5c255ayIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3NueWstbGFicy9weXNueWsvYmxvYi9tYXN0ZXIvZXhhbXBsZXMvYXBpLWRlbW8tOWMtYnVsay1pZ25vcmUtdnVsbnMtYnktaXNzdWVJZExpc3QucHkiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3NueWstbGFicy9weXNueWsvYmxvYi9tYXN0ZXIvZXhhbXBsZXMvYXBpLWRlbW8tOWMtYnVsay1pZ25vcmUtdnVsbnMtYnktaXNzdWVJZExpc3QucHkiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInNueWstb3Blbi1zb3VyY2Utc3BlY2lmaWMtc3RyYXRlZ2llcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1vcGVuLXNvdXJjZS1zcGVjaWZpYy1zdHJhdGVnaWVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgT3BlbiBTb3VyY2Utc3BlY2lmaWMgc3RyYXRlZ2llcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVzZSBzdHJhdGVnaWVzIGFyZSB1c2VmdWwgdG8gdGVhbXMgdXNpbmcgU255aydzIFNDQSAoU29mdHdhcmUgQ29tcG9zaXRpb24gQW5hbHlzaXMpIHRlc3RpbmcgZmVhdHVyZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImdyYWRsZS1zY2FsYSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZ3JhZGxlLXNjYWxhIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHcmFkbGUgJiBTY2FsYSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdGb3IgIm11bHRpLXByb2plY3QiIGNvbmZpZ3VyYXRpb25zLCB0ZXN0IGFsbCBzdWItcHJvamVjdHMsIHVzZSB0aGUgbmV4dCBmbGFnIHdpdGggeW91ciBtb25pdG9yIG9yIHRlc3QgY29tbWFuZCAnCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tYWxsLXN1Yi1wcm9qZWN0cyIpXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVG8gc2NhbiBzcGVjaWZpYyBjb25maWd1cmF0aW9ucywgc2VsZWN0IGNlcnRhaW4gdmFsdWVzIG9mIGNvbmZpZ3VyYXRpb24gYXR0cmlidXRlcyB0byByZXNvbHZlIHRoZSBkZXBlbmRlbmNpZXMuIFVzZSB0aGUgbmV4dCBmbGFnIHdpdGggeW91ciB0ZXN0IG9yIG1vbml0b3IgY29tbWFuZCAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tY29uZmlndXJhdGlvbi1hdHRyaWJ1dGVzPSIpXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInB5dGhvbiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHl0aG9uIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFB5dGhvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICdTbnlrIHVzZXMgUHl0aG9uIHRvIHNjYW4gYW5kIGZpbmQgeW91ciBkZXBlbmRlbmNpZXMuIFNueWsgbmVlZHMgdGhlIFB5dGhvbiB2ZXJzaW9uIHRvIHN0YXJ0IHNjYW5uaW5nLCBhbmQgZGVmYXVsdHMgdG8gInB5dGhvbiIuIElmIHlvdSBhcmUgdXNpbmcgbXVsdGlwbGUgUHl0aG9uIHZlcnNpb25zLCB1c2UgdGhpcyBwYXJhbWV0ZXIgdG8gc3BlY2lmeSB0aGUgY29ycmVjdCBQeXRob24gY29tbWFuZCBmb3IgZXhlY3V0aW9uLicKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiXG5Vc2UgdGhlIG5leHQgZmxhZyB3aXRoIHlvdXIgdGVzdCBvciBtb25pdG9yIGNtZCB0byBzcGVjaWZ5IHRoZSBQeXRob24gdmVyc2lvbiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItLWNvbW1hbmQ9IildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIEZvciBleGFtcGxlOiIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtdGV4dCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrIHRlc3QgLS1jb21tYW5kPXB5dGhvbjNcbiIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiSWYgeW91IHNjYW4gYSBQaXAgcHJvamVjdCBhbmQgdXNlIHRoZSAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tZmlsZT0iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBiZWNhdXNlIHlvdXIgbWFuaWZlc3QgZmlsZSBpc27igJl0IHRoZSBzdGFuZGFyZCBvZiAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInJlcXVpcmVtZW50LnR4dCIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCB0aGVuIHRoZSBuZXh0IGZsYWcgaXMgbWFuZGF0b3J5IHRvIHNwZWNpZnkgUGlwIGFzIHRoZSBwYWNrYWdlIG1hbmFnZXIgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1wYWNrYWdlLW1hbmFnZXI9cGlwIildKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuZXQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAuTmV0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSB1c2UgYSAuc2xuIGZpbGUsIHlvdSBjYW4gc3BlY2lmeSB0aGUgcGF0aCB0byB0aGUgZmlsZSwgYW5kIHNueWsgd2lsbCBzY2FuIGFsbCB0aGUgc3ViIHByb2plY3RzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIHJlcG8uIEZvciBleGFtcGxlOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtdGV4dCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayB0ZXN0IC0tZmlsZT1zbG4vLnNsblxuIildKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ5YXJuLXdvcmtzcGFjZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjeWFybi13b3Jrc3BhY2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFlhcm4gV29ya3NwYWNlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJGb3IgWWFybiB3b3Jrc3BhY2VzIHVzZSB0aGUgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0teWFybi13b3Jrc3BhY2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZsYWcgdG8gdGVzdCBhbmQgbW9uaXRvciB5b3VyIHBhY2thZ2VzLiBUaGUgcm9vdCBsb2NrZmlsZSB3aWxsIGJlIHJlZmVyZW5jZWQgd2hlbiBzY2FubmluZyBhbGwgdGhlIHBhY2thZ2VzLiBVc2UgdGhlIC0iCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLWRldGVjdGlvbi1kZXB0aCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBwYXJhbWV0ZXIgdG8gZmluZCBzdWItZm9sZGVycyB3aGljaCBhcmUgbm90IGF1dG8gZGlzY292ZXJlZCBieSBkZWZhdWx0LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cbicpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIlxuWWFybiB3b3Jrc3BhY2VzIHN1cHBvcnQgaXMgZm9yICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIHRlc3QiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigic255ayBtb25pdG9yIildKSwKICAgICAgICBfdm0uX3YoIiBjb21tYW5kcyBvbmx5IGF0IHRoaXMgdGltZS5cbnslIGVuZGhpbnQgJX0iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkV4YW1wbGU6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtdGV4dCBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoInNueWsgdGVzdCAtLXlhcm4td29ya3NwYWNlcyAtLWRldGVjdGlvbi1kZXB0aD02XG4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgc2NhbnMgb25seSB0aGUgcGFja2FnZXMgdGhhdCBiZWxvbmcgdG8gYW55IGRpc2NvdmVyZWQgd29ya3NwYWNlcyB0aGlzIGRpcmVjdG9yeSBhbmQgNSBzdWItZGlyZWN0b3JpZXMgZGVlcC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIllvdSBjYW4gdXNlIGEgY29tbW9uICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIuc255ayIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBwb2xpY3kgZmlsZSwgaWYgeW91IG1haW50YWluIGlnbm9yZXMvcGF0Y2hlcyBpbiBvbmUgcGxhY2UgdG8gYmUgYXBwbGllZCBmb3IgYWxsIGRldGVjdGVkIHdvcmtzcGFjZXMsIGJ5IHByb3ZpZGluZyB0aGUgcG9saWN5IHBhdGg6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigic255ayB0ZXN0IC0teWFybi13b3Jrc3BhY2VzIC0tcG9saWN5LXBhdGg9c3JjLy5zbnlrXG4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1vbm9yZXBvIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNtb25vcmVwbyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTW9ub3JlcG8iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU29tZSBjdXN0b21lcnMgaGF2ZSBjb21wbGV4IHByb2plY3RzLCB3aXRoIG11bHRpcGxlIGxhbmd1YWdlcywgcGFja2FnZSBtYW5hZ2VycywgYW5kIHByb2plY3RzLCBpbiBhIHNpbmdsZSByZXBvc2l0b3J5LiBUbyBmYWNpbGl0YXRlIHRoaXMsIHlvdSBjYW4gdGFrZSBkaWZmZXJlbnQgYXBwcm9hY2hlczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQXMgeW91IGJ1aWxkIGVhY2ggcHJvamVjdC9sYW5ndWFnZSwgYWRkIGEgZGlyZWN0aXZlIHRvIHJ1biB0aGUgc255ayB0ZXN0IGFuZCB0YXJnZXQgYSBzcGVjaWZpYyBwcm9qZWN0IGZpbGUuIEZvciBleGFtcGxlOiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic255ayB0ZXN0IC0tZmlsZT1wYWNrYWdlLmpzb25cbiIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBZnRlciB5b3UgaW5zdGFsbCB0aGUgZGVwZW5kZW5jaWVzIG9mIGVhY2ggcHJvamVjdCwgbWFrZSBhIHNpbWlsYXIgY2FsbCBwb2ludGluZyB0byB0aGUgc3BlY2lmaWMgYXJ0aWZhY3QgKHN1Y2ggYXMgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigicG9tLnhtbCIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiKS4gVGhpcyBpcyBmYXN0IGFuZCBlZmZpY2llbnQsIGJ1dCBjYW4gYmUgZGlmZmljdWx0IHRvIHNjYWxlLCBlc3BlY2lhbGx5IGlmIHlvdSBhcmUgbm90IGZhbWlsaWFyIHdpdGggdGhlIHByb2plY3QuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiVXNlIHRoZSAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tYWxsLXByb2plY3RzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1kZXRlY3Rpb24tZGVwdGgiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBhcmd1bWVudHMsIGFuZCB0aGUgU255ayBDTEkgb3IgQ0kvQ0QgcGx1Z2luIHdpbGwgc2VhcmNoIHVwIHRvICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tZGV0ZWN0aW9uLWRlcHRoIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgaW4gdGhlIGZvbGRlciBzdHJ1Y3R1cmUgZm9yIGFueSBtYW5pZmVzdHMgdGhhdCBtYXRjaCB0aGUgc3VwcG9ydGVkIGZpbGVzIHR5cGVzLiBFYWNoIHByb2plY3QgaXMgc2Nhbm5lZCBhbmQgaGFzIGl0cyBvd24gcmVzdWx0LiBTaW1pbGFybHksIGlmIHVzaW5nICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNueWstbW9uaXRvciIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCBhIHNlcGFyYXRlIHJlc3VsdCBpcyBjcmVhdGVkIGZvciBlYWNoIHByb2plY3QuIFRoaXMgaXMgYSBnb29kIHdheSB0byBhdXRvbWF0ZSBzY2FubmluZyBlc3BlY2lhbGx5IGlmIHlvdSBoYXZlIHByb2plY3RzIHNwYW5uaW5nIG5vZGUsIC5uZXQsIHB5dGhvbiwgYW5kIHNvIG9uLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTcGVjaWZpYyB0byBHcmFkbGU6IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRm9yIG1vc3QgR3JhZGxlIHByb2plY3RzLCB1c2luZyAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItLWFsbC1wcm9qZWN0cyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgd29ya3MsIGFzIGl0IGludm9rZXMgZ3JhZGxlLXNwZWNpZmljIG9wdGlvbnMgYmVoaW5kIHRoZSBzY2VuZXMgaW4gdGhlIGZvcm0gb2Y6IgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCIgIHNueWsgdGVzdCAtLWZpbGU9YnVpbGQuZ3JhZGxlIC0tYWxsLXN1Yi1wcm9qZWN0c1xuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigid2hlbiBpdCBmaW5kcyB0aGUgYnVpbGQgZmlsZSBhcyBwYXJ0IG9mIHRoZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1hbGwtcHJvamVjdHMiKV0pLAogICAgICAgIF92bS5fdigiIHNlYXJjaCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJHcmFkbGUgbWF5IHJlcXVpcmUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuIElmIHNvLCB0byB0YXJnZXQgdGhlIG90aGVyIGFydGlmYWN0cyB1c2luZyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tZmlsZT0iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGZvciBlYWNoIG1hbmlmZXN0IG9mIHRoZSBvdGhlciBsYW5ndWFnZXMvcGFja2FnZS1tYW5hZ2VycywgYXMgbWVudGlvbmVkIGluIHRoZSBmaXJzdCBvcHRpb24uIFlvdSBtdXN0IHRoZW4gdXNlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1hbGwtc3ViLXByb2plY3RzIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCBwb3RlbnRpYWxseSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItLWNvbmZpZ3VyYXRpb24tbWF0Y2hpbmciKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFuZCAtLWNvbmZpZ3VyYXRpb24tbWF0Y2hpbmcgdG8gc2NhbiBhIGNvbXBsZXggZ3JhZGxlIHByb2plY3QuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlNlZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zdXBwb3J0LnNueWsuaW8vaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDAzODE3MzU3LUphdmEtZm9yLVNueWsiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU255ayBmb3IgSmF2YSAoR3JhZGxlLCBNYXZlbikiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIGZvciBtb3JlIGluZm9ybWF0aW9uLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzbnlrLWNvbnRhaW5lci1zcGVjaWZpYy1zdHJhdGVnaWVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzbnlrLWNvbnRhaW5lci1zcGVjaWZpYy1zdHJhdGVnaWVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgQ29udGFpbmVyLXNwZWNpZmljIHN0cmF0ZWdpZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGJlc3Qgc3RhZ2UgdG8gaW1wbGVtZW50IFNueWsgQ29udGFpbmVyIGluIHlvdXIgcGlwZWxpbmUgaXMgYWZ0ZXIgdGhlIGNvbnRhaW5lciBpbWFnZSBpcyBidWlsdCAoYWZ0ZXIgcnVubmluZyB0aGUgZXF1aXZhbGVudCBvZiDigJxkb2NrZXIgYnVpbGTigJ0pLCBhbmQgYmVmb3JlIHlvdXIgaW1hZ2UgaXMgZWl0aGVyIHB1c2hlZCBpbnRvIHlvdXIgcmVnaXN0cnkgKOKAnGRvY2tlciBwdXNo4oCdKSBvciBkZXBsb3llZCB0byB5b3VyIHJ1bm5pbmcgaW5mcmFzdHJ1Y3R1cmUgKOKAnGhlbG0gaW5zdGFsbOKAnSwg4oCca3ViZWN0bCBhcHBseeKAnSBhbmQgc28gb24pLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUeXBpY2FsbHksIHRoZSB3YXlzIHlvdSBydW4geW91ciBjb250YWluZXIgYnVpbGQtdGVzdC1kZXBsb3kgcGlwZWxpbmUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhIERvY2tlciBkYWVtb24gaXMgYXZhaWxhYmxlIHRvIHRoZSBidWlsZCBhZ2VudC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJSdW5uaW5nIHBpcGVsaW5lIGlmIGEgRG9ja2VyIGRhZW1vbiBpcyBhdmFpbGFibGUiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIklmOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IGFyZSBydW5uaW5nIHlvdXIgYnVpbGQgdG9vbGluZyAoc3VjaCBhcyBKZW5raW5zKSBkaXJlY3RseSBvbiBhIGhvc3QgdGhhdCBoYXMgRG9ja2VyIG5hdGl2ZWx5IGluc3RhbGxlZC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIllvdXIgcGlwZWxpbmUgdGFza3MgYXJlIHJ1biBpbnNpZGUgY29udGFpbmVycyB3aGljaCBoYXZlIHRoZSBEb2NrZXIgc29ja2V0IFsvdmFyL3J1bi9kb2NrZXIuc29ja10gYmluZC1tb3VudGVkIHRvIHRoZSBob3N0LiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiWW91IGFyZSBydW5uaW5nIGEgRG9ja2VyLWluc2lkZS1Eb2NrZXIgc2V0dXAuIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlNueWsgY2FuIGhlbHA6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIldoZW4geW91IHJ1biAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzbnlrIGNvbnRhaW5lciB0ZXN0ICRJTUFHRV9OQU1FIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgU255ayBsb29rcyBmb3IgdGhhdCBpbWFnZSBpbiB5b3VyIGxvY2FsIGRhZW1vbuKAmXMgc3RvcmFnZSwgYW5kIGlmIGl0IGRvZXMgbm90IGV4aXN0LCBkb2VzIHRoZSBlcXVpdmFsZW50IG9mIGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJkb2NrZXIgcHVsbCIpXSksCiAgICAgICAgICBfdm0uX3YoIiB0byBkb3dubG9hZCBpdCBmcm9tIHlvdXIgdXBzdHJlYW0gcmVnaXN0cnkuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRm9yIHJlZ2lzdHJ5IGF1dGhlbnRpY2F0aW9uLCBTbnlrIHVzZXMgdGhlIGNyZWRlbnRpYWxzIHlvdSBhbHJlYWR5IGNvbmZpZ3VyZWQgKHdpdGggc29tZXRoaW5nIGxpa2UgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJkb2NrZXIgbG9naW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIpIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJZb3UgY2FuIHNwZWNpZnkgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1maWxlPURvY2tlcmZpbGUiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIG9uIHRoZSBjb21tYW5kIGxpbmUgdG8gbGluayB0aGUgaW1hZ2UgdnVsbmVyYWJpbGl0eSByZXN1bHRzIHdpdGggdGhlIERvY2tlcmZpbGUgdGhhdCBidWlsdCBpdCwgdG8gcmVjZWl2ZSBpbmxpbmUgcmVtZWRpYXRpb24gYWR2aWNlIGFuZCBhbHRlcm5hdGUgYmFzZSBpbWFnZSBzdWdnZXN0aW9ucy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoIlJ1bm5pbmcgcGlwZWxpbmUgaWYgYSBEb2NrZXIgZGFlbW9uIGlzIG5vdCBhdmFpbGFibGUiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIklmOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IGNvbnRhaW5lcml6ZSBlYWNoIGJ1aWxkIHRhc2sgYnV0IGRvIG5vdCBtb3VudCB0aGUgRG9ja2VyIHNvY2tldCBmb3Igc2VjdXJpdHkvcGVyZm9ybWFuY2UgcmVhc29ucy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBpcGVsaW5lIHRhc2tzIGFyZSBzcGxpdCBhY3Jvc3MgaG9zdHMgKG9yIGV2ZW4gY2x1c3RlcnMpIGFuZCByZWx5IG9uIGFydGlmYWN0cyB0byBiZSBoYW5kZWQgb2ZmIHZpYSBhIGNlbnRyYWwgdm9sdW1lIG9yIGludGVybWVkaWF0ZSByZWdpc3RyeS9vYmplY3Qgc3RvcmUuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJZb3Ugd29yayBleGNsdXNpdmVseSBpbiBhbiBlY29zeXN0ZW0gdGhhdCBvbmx5IHVzZXMgT0NJLWNvbXBsaWFudCBjb250YWluZXIgaW1hZ2VzIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlNueWsgY2FuIGhlbHA6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJ1biBlaXRoZXIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoInNueWsgY29udGFpbmVyIHRlc3QgZG9ja2VyLWFyY2hpdmU6YXJjaGl2ZS50YXIiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigic255ayBjb250YWluZXIgdGVzdCBvY2ktYXJjaGl2ZTphcmNoaXZlLnRhciIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gZ2V0IFNueWsgdnVsbmVyYWJpbGl0eSByZXN1bHRzIGFnYWluc3QgdGFyLWZvcm1hdHRlZCBjb250YWluZXIgaW1hZ2VzIChlaXRoZXIgaW4gRG9ja2VyIG9yIE9DSSBmb3JtYXQpIHdpdGhvdXQgcmVseWluZyBvbiB0aGUgRG9ja2VyIGRhZW1vbi4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSB0YXIgYXJjaGl2ZSBjYW4gYmUgZ2VuZXJhdGVkIGJ5IHlvdXIgYnVpbGQgcHJvY2VzcyB1c2luZyB0aGUgZXF1aXZhbGVudCBvZiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImRvY2tlciBzYXZlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBhbmQgc3RvcmVkIGluIGEgc2hhcmVkIHZvbHVtZSBvciBvYmplY3Qgc3RvcmUuIFRoaXMgY2FuIHRoZW4gYmUgYWNjZXNzZWQgYnkgdGhlIGJ1aWxkIGFnZW50IGNvbnRhaW5lciBydW5uaW5nIHRoZSBTbnlrIGJpbmFyeSwgd2l0aCBubyBvdGhlciBkZXBlbmRlbmNpZXMgcmVxdWlyZWQiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJnb29kLXByYWN0aWNlLXJlY29tbWVuZGF0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZ29vZC1wcmFjdGljZS1yZWNvbW1lbmRhdGlvbnMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgR29vZCBwcmFjdGljZSByZWNvbW1lbmRhdGlvbnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVnYXJkbGVzcyBvZiBob3cgeW91IGludGVncmF0ZSB3aXRoIGNvbnRhaW5lciBpbWFnZXMgZHVyaW5nIENJLCBydW4gYSBTbnlrIENvbnRhaW5lciBzY2FuIGFzIGEgc2VwYXJhdGUgYnVpbGQgc3RlcCBmcm9tIHlvdXIgU255ayBPcGVuIFNvdXJjZSAoYXBwbGljYXRpb24gU0NBKSB0ZXN0LiBUaGlzIGFsbG93cyB5b3UgdG8gaXNvbGF0ZSBidWlsZCBmYWlsdXJlcyB0byB2dWxuZXJhYmlsaXRpZXMgd2l0aGluIGVpdGhlciB0aGUgY29udGFpbmVyL09TIGxheWVyIG9yIHRoZSBhcHBsaWNhdGlvbiBsYXllciwgcmVzcGVjdGl2ZWx5LiBUaGlzIGFsc28gZW5hYmxlcyBtb3JlIGVhc2lseSBjb250YWluZXJpemVkIGJ1aWxkIHRhc2tzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJVc2UgQ0xJIGZsYWdzIGxpa2UgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLS1mYWlsLW9uIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItLXNldmVyaXR5LXRocmVzaG9sZCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gY3VzdG9taXplIHRoZSBmYWlsdXJlIHN0YXR1cyBmb3IgdGhlIGJ1aWxkIHRhc2suIEZvciBtb3JlIGFkdmFuY2VkIHVzYWdlLCB5b3UgY2FuIHVzZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tanNvbiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gZ2VuZXJhdGUgYSBKU09OIGZpbGUgY29udGFpbmluZyB0aGUgZnVsbCB2dWxuZXJhYmlsaXR5IHJlcG9ydCwgYW5kIHNldCB5b3VyIG93biBidWlsZCBmYWlsdXJlIHN0YXR1cyBiYXNlZCBvbiB0aGUgSlNPTiBkYXRhLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJQYXNzICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tZXhjbHVkZS1iYXNlLWltYWdlLXZ1bG5zIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0byBvbmx5IHJlcG9ydCB2dWxuZXJhYmlsaXRpZXMgaW50cm9kdWNlZCBieSB5b3VyIHVzZXIgbGF5ZXJzLCByYXRoZXIgdGhhbiB2dWxuZXJhYmlsaXRpZXMgdGhhdCBjb21lIGZyb20gdGhlIGNvbnRhaW5lcuKAmXMgYmFzZSBpbWFnZSAodGhlIGltYWdlIHlvdSBzcGVjaWZ5IGluIHRoZSBGUk9NIGxpbmUgaW4gdGhlIERvY2tlcmZpbGUpLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSdW4gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigic255ayBjb250YWluZXIgbW9uaXRvciIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmb2xsb3dpbmcgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigic255ayBjb250YWluZXIgdGVzdCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAob3Igc2ltcGx5IGNoZWNrIHRoZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJNb25pdG9yIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBib3ggb24geW91ciBwbHVnaW4gc2V0dGluZ3MpLCB0byBrZWVwIGEgcmVjb3JkIG9mIHRoaXMgY29udGFpbmVy4oCZcyBiaWxsIG9mIG1hdGVyaWFscyB3aXRoaW4gdGhlIFNueWsgVUkgYW5kIHByb2FjdGl2ZWx5IG1vbml0b3IgZm9yIG5ldyB2dWxuZXJhYmlsaXRpZXMgb24gYSBkYWlseSBiYXNpcy4gVGhpcyBpcyB1c2VmdWwgd2hlbiBwdXNoaW5nIG5ldyByZWxlYXNlcyBpbnRvIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLiBZb3UgY2FuIHVzZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tcHJvamVjdC1uYW1lIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0byBzcGVjaWZ5IGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSByZWxlYXNlIHRvIGVuc3VyZSBwcm9kdWN0aW9uIGNvbnRhaW5lcnMgYXJlIHRyYWNrZWQgc2VwYXJhdGVseSBmcm9tIG90aGVycyBpbiB5b3VyIGJ1aWxkIHByb2Nlc3MuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic255ay1pYWMtc3BlY2lmaWMtc3RyYXRlZ2llcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1pYWMtc3BlY2lmaWMtc3RyYXRlZ2llcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTbnlrIElhQy1zcGVjaWZpYyBzdHJhdGVnaWVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBiZXN0IHN0YWdlIHRvIGltcGxlbWVudCBTbnlrIEluZnJhc3RydWN0dXJlIEFzIENvZGUgaW4geW91ciBwaXBlbGluZSBhcyBwYXJ0IG9mIHRoZSBzdGFnZXMsIGJ1dCBhZnRlciB0aGUgU0NBIGFuZCB0aGUgQ29udGFpbmVycyBzdGFnZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlNueWsgSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSBzdXBwb3J0czoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkRlcGxveW1lbnRzLCBQb2RzIGFuZCBTZXJ2aWNlcy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNyb25Kb2JzLCBKb2JzLCBTdGF0ZWZ1bFNldCwgUmVwbGljYVNldCwgRGFlbW9uU2V0LCBhbmQgUmVwbGljYXRpb25Db250cm9sbGVyLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTZWUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL3NueWstaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS9zbnlrLWNsaS1mb3ItaW5mcmFzdHJ1Y3R1cmUtYXMtY29kZS90ZXN0LXlvdXIta3ViZXJuZXRlcy1maWxlcy13aXRoLW91ci1jbGktdG9vbCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiVGVzdCB5b3VyIEt1YmVybmV0ZXMgZmlsZXMgd2l0aCBvdXIgQ0xJIHRvb2wiKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIGZvciBtb3JlIGRldGFpbHMuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNpLWNkLXRyb3VibGVzaG9vdGluZy1hZHZhbmNlZC10aXBzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjaS1jZC10cm91Ymxlc2hvb3RpbmctYWR2YW5jZWQtdGlwcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDSS9DRCB0cm91Ymxlc2hvb3RpbmcgJiBBZHZhbmNlZCB0aXBzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHRoaXMgc2VjdGlvbiB3ZSBhcmUgZ29pbmcgdG8gc2hhcmUgYSBmZXcgdGlwcyB0byBoZWxwIHRyb3VibGVzaG9vdCBvciBzY2FsZSBDSS9DRCBpbnRlZ3JhdGlvbnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInN0ZXAtMS10cnktdG8tcmVwbGljYXRlLXdpdGgtc255ay1jbGkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N0ZXAtMS10cnktdG8tcmVwbGljYXRlLXdpdGgtc255ay1jbGkiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3RlcCAxOiBUcnkgdG8gcmVwbGljYXRlIHdpdGggU255ayBDTEkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ0xJIGFuZCBwaXBlbGluZSBhcmUgcnVubmluZyB0aGUgc2FtZSBlbmdpbmUsIHRyeSB0byBjbG9uZSB0aGUgcHJvamVjdCBhbmQgc2NhbiB3aXRoIENMSS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGxheSB3aXRoIHRoZSBDTEkgZmxhZ3MtIHVzZSBvdXIgU255ayBDTEkgdG9vbCB0byBmaW5kIGFuZCBmaXgga25vd24gdnVsbmVyYWJpbGl0aWVzIGFzIHlvdSBydW4gaXQgaW4gdGhlIHBpcGVsaW5lLiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zdXBwb3J0LnNueWsuaW8vaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDAzODEyNTc4LUNMSS1yZWZlcmVuY2UiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiTGluayBmb3IgZmxhZ3MiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJzdGVwLTItZ2V0LWxvZ3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3N0ZXAtMi1nZXQtbG9ncyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3RlcCAyOiBHZXQgbG9ncyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgY291bGQgcmVwbGljYXRlIHdpdGggQ0xJLCBhbmQgdGhlIHByb2JsZW0gc3RpbGwgZXhpc3QgYXNrIHRoZSBDTEkgdG8gb3V0cHV0IHRoZSBkZWJ1ZyBsb2dnaW5nIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29tbWFuZDoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkRFQlVHPSogb3IgdGhlIC1kIGZsYWcgdG8gY2FwdHVyZSBsb2dzLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNueWsgdGVzdCAtZFxuIildKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigib3IiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS10ZXh0IGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJERUJVRz0qIHNueWsgdGVzdFxuIildKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJzdGVwLTMtdXNlLXRoZS1jbGktaW5zdGVhZC1vZi10aGUtcGx1Z2luIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdGVwLTMtdXNlLXRoZS1jbGktaW5zdGVhZC1vZi10aGUtcGx1Z2luIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN0ZXAgMzogVXNlIHRoZSBDTEkgaW5zdGVhZCBvZiB0aGUgcGx1Z2luIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRyeSB0byByZXBsYWNlIHRoZSBuYXRpdmUgcGx1Z2luIGludG8gdGhlIENMSSBieSBpbnN0YWxsaW5nIHNueWsgdXNpbmcgbnBtIG9yIGJpbmFyeSBkb3dubG9hZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkZvciBucG0gdXNlIHRoZSBmb2xsb3dpbmcgY29tbWFuZHM6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJucG0gaW5zdGFsbCAtZyBzbnlrIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTbnlrIGF1dGgiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNueWsgdGVzdCIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBiaW5hcnkgZG93bmxvYWQgeW91IHdlIG5lZWQgdG8gZG93bmxvYWQgc255ayBmcm9tIHRoZSBmb2xsb3dpbmcgbGlua3M6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrL3NueWsvdGFncyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiRG93bmxvYWQgdGhlIFNueWsgQ0xJIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNvbW1vbi1mbGFncy1pbi1hLWNpLWNkLWludGVncmF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb21tb24tZmxhZ3MtaW4tYS1jaS1jZC1pbnRlZ3JhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb21tb24gZmxhZ3MgaW4gYSBDSS9DRCBpbnRlZ3JhdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbW9uZyB0aGUgbW9zdCBjb21tb24gZmxhZ3MgdXNlZCBpbiBhIENJL0NEIGludGVncmF0aW9uIGFyZSB0aGUgZm9sbG93aW5nOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItLSBhbGwtcHJvamVjdHMiKV0pLAogICAgICAgIF92bS5fdigiOiBBdXRvLWRldGVjdCBhbGwgcHJvamVjdHMgaW4gd29ya2luZyBkaXJlY3RvcnkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLXAiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICI6IFBydW5lIGRlcGVuZGVuY3kgdHJlZXMsIHJlbW92aW5nIGR1cGxpY2F0ZSBzdWItZGVwZW5kZW5jaWVzLiBXaWxsIHN0aWxsIGZpbmQgYWxsIHZ1bG5lcmFiaWxpdGllcywgYnV0IHBvdGVudGlhbGx5IG5vdCBhbGwgb2YgdGhlIHZ1bG5lcmFibGUgcGF0aHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0tb3JnPU9SR19OQU1FIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiOiBTcGVjaWZ5IHRoZSBPUkdfTkFNRSB0byBydW4gU255ayBjb21tYW5kcyB0aWVkIHRvIGEgc3BlY2lmaWMgb3JnYW5pemF0aW9uLiBUaGlzIHdpbGwgaW5mbHVlbmNlIHdoZXJlIHdpbGwgbmV3IHByb2plY3RzIGJlIGNyZWF0ZWQgYWZ0ZXIgcnVubmluZyBtb25pdG9yIGNvbW1hbmQsIHNvbWUgZmVhdHVyZXMgYXZhaWxhYmlsaXR5IGFuZCBwcml2YXRlIHRlc3RzIGxpbWl0cy4gSWYgeW91IGhhdmUgbXVsdGlwbGUgb3JnYW5pemF0aW9ucywgeW91IGNhbiBzZXQgYSBkZWZhdWx0IGZyb20gdGhlIENMSSB1c2luZzoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLXRleHQgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiQgc255ayBjb25maWcgc2V0IG9yZz1PUkdfTkFNRVxuIildKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTZXR0aW5nIGEgZGVmYXVsdCB3aWxsIGVuc3VyZSBhbGwgbmV3bHkgbW9uaXRvcmVkIHByb2plY3RzIHdpbGwgYmUgY3JlYXRlZCB1bmRlciB5b3VyIGRlZmF1bHQgb3JnYW5pemF0aW9uLiBJZiB5b3UgbmVlZCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCwgeW91IGNhbiB1c2UgdGhlIC0tb3JnPU9SR19OQU1FIGFyZ3VtZW50LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEZWZhdWx0OiB1c2VzIE9SR19OQU1FIHRoYXQgc2V0cyBhcyBkZWZhdWx0IGluIHlvdXIgQWNjb3VudCBzZXR0aW5ncyAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hcHAuc255ay5pby9hY2NvdW50IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImh0dHBzOi8vYXBwLnNueWsuaW8vYWNjb3VudCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlVzZWZ1bCByZXNvdXJjZXMiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGZvbGxvd2luZyByZXBvIHNoYXJlcyBzb21lIGV4YW1wbGVzIG9mIGJpbmFyeSBhbmQgTlBNIGludGVncmF0aW9ucyBmb3IgdmFyaW91cyBDSS9DRCB0b29sczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZ2l0aHViLWNpLWNkLWV4YW1wbGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNnaXRodWItY2ktY2QtZXhhbXBsZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbnlrLWxhYnMvc255ay1jaWNkLWludGVncmF0aW9uLWV4YW1wbGVzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkdpdEh1YiBDSS9DRCBleGFtcGxlcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}