{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/github-read-only-projects.md?vue&type=template&id=669c598b&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/github-read-only-projects.md","mtime":1646940842971},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiZ2l0aHViLXJlYWQtb25seS1wcm9qZWN0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZ2l0aHViLXJlYWQtb25seS1wcm9qZWN0cyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHaXRIdWIgUmVhZC1Pbmx5IFByb2plY3RzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgb2ZmZXJzIHRoZSBhYmlsaXR5IHRvIG1vbml0b3IgYSBwdWJsaWMgR2l0SHViIHJlcG9zaXRvcnkgd2l0aG91dCBncmFudGluZyBhbnkgcGVybWlzc2lvbnMgdGhyb3VnaCB5b3VyIG93biBTbnlrIGFjY291bnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImhvdy1pdC13b3JrcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaG93LWl0LXdvcmtzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb3cgaXQgd29ya3M6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgYWxsb3dzIHlvdSB0byB0cmFjayB0aGUgdnVsbmVyYWJpbGl0aWVzIGluIGEgcHJvamVjdCB5b3UgYXJlIGNvbnNpZGVyaW5nIHVzaW5nIGFzIGEgZGVwZW5kZW5jeSwgYXJlIHVzaW5nIGFzIGEgc3RhbmQtYWxvbmUgaW5kZXBlbmRlbnQgdG9vbCB3aXRoaW4geW91ciBidXNpbmVzcywgb3IgYW55IG90aGVyIHB1YmxpYyByZXBvc2l0b3J5IHdoZXJlIHlvdSBkbyBub3QgbmVlZCB0byBhY3RpdmVseSBwcmV2ZW50IG9yIGZpeCBpc3N1ZXMgdXNpbmcgU255aydzIHRvb2wuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSByZXBvc2l0b3J5IHdpbGwgYmUgYXV0b21hdGljYWxseSB0ZXN0ZWQgZGFpbHkgdXNpbmcgU255aydzIG93biBHaXRIdWIgY3JlZGVudGlhbHMsIGFuZCB0ZXN0cyBkbyBub3QgY291bnQgYWdhaW5zdCBhbnkgdGVzdCBsaW1pdHMgeW91IG1heSBoYXZlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdBcyBwdWJsaWMgcHJvamVjdHMgaW1wb3J0ZWQgaW4gdGhpcyB3YXkgYXJlIG5vdCBjb25zaWRlcmVkIHRvIGJlICJ5b3VycyIsIHRoZXkgZG8gbm90IGFwcGVhciBpbiAnCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hcHAuc255ay5pby9yZXBvcnRzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIlNueWsncyBSZXBvcnRzIHNlY3Rpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJVbmxpa2UgcHJvamVjdHMgaW1wb3J0ZWQgdGhyb3VnaCB0aGUgU255ayBHaXRIdWIgaW50ZWdyYXRpb24sIHByb2plY3RzIGltcG9ydGVkL21vbml0b3JlZCBpbiB0aGlzIHdheSBhcmUgbm90IGVsaWdpYmxlIGZvcjoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQXV0b21hdGljIHJldGVzdGluZyB3aGVuIGEgcHVsbCByZXF1ZXN0IGlzIG1lcmdlZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29tbWl0IHRlc3RzIG9uIGFueSBQUiByYWlzZWQsIHRvIGRldGVjdCAoYW5kIG9wdGlvbmFsbHkgYmxvY2spIG5ldyB2dWxuZXJhYmlsaXRpZXMgZnJvbSBiZWluZyBpbnRyb2R1Y2VkIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBdXRvbWF0ZWQgZml4IFBScyB0byByZWNvbW1lbmQgbWluaW1hbCBjaGFuZ2VzIHRvIGZpeCB2dWxuZXJhYmlsaXRpZXMgLSBmaW5kIG91dCBtb3JlIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBdXRvbWF0ZWQgZGVwZW5kZW5jeSB1cGdyYWRlIFBScywgdG8ga2VlcCBkZXBlbmRlbmNpZXMgdXAgdG8gZGF0ZSBhbmQgaGVscCBhdm9pZCBuZXcgdnVsbmVyYWJpbGl0aWVzIGFuZCBzaW1wbGlmeSBmaXhpbmcgdGhvc2UgdGhhdCBhcmUgZm91bmQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJNYW51YWwgRml4IFBScyBnZW5lcmF0ZWQgdGhyb3VnaCBTbnlrIHRvIGFkZHJlc3Mgc3BlY2lmaWMgaXNzdWVzIGNob3NlbiBieSB0aGUgdXNlciIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvamVjdHMgY2FuIGJlIGltcG9ydGVkIGluIHRoaXMgd2F5IGJvdGggIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2d1aWRlL2dpdGh1Yi1yZWFkLW9ubHktcHJvamVjdHMuaHRtbCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJkdXJpbmcgb25ib2FyZGluZyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCBvciAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3VpZGUvZ2l0aHViLXJlYWQtb25seS1wcm9qZWN0cy5odG1sIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoInBvc3Qtb25ib2FyZGluZyB0byBTbnlrIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgKGR1cmluZyBub3JtYWwgb25nb2luZyB1c2UpLiIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImR1cmluZy1vbmJvYXJkaW5nLXRvLXNueWsiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2R1cmluZy1vbmJvYXJkaW5nLXRvLXNueWsiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRHVyaW5nIG9uYm9hcmRpbmcgdG8gU255azoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRHVyaW5nIG9uYm9hcmRpbmcsIHNlbGVjdGluZyBHaXRIdWIgYXMgdGhlIHNvdXJjZSBmcm9tIHdoaWNoIHRvIGltcG9ydCBwcm9qZWN0cyBhbGxvd3MgeW91IHRvIHNldCB1cCB0aGUgZnVsbCBHaXRIdWIgaW50ZWdyYXRpb24gKGFuZCB0YWtlIGFkdmFudGFnZSBvZiB0aGUgdnVsbmVyYWJpbGl0eSBwcmV2ZW50aW9uIGFuZCBmaXggZnVuY3Rpb25hbGl0eSBhdmFpbGFibGUpLCBvciBvcHQgdG8gcHJvY2VlZCB3aXRob3V0IGdyYW50aW5nIFNueWsgcGVybWlzc2lvbnMgdmlhIHRoZSBsaW5rIGF0IHRoZSBib3R0b20uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3NjcmVlbnNob3RfMjAyMC0wNy0wM19hdF8wOC4wMi4yOS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0VudGVyIGEgcmVwb3NpdG9yeSB0byBtb25pdG9yLCBpbiB0aGUgZm9ybWF0IG9mICJvd25lci9yZXBvc2l0b3J5IjonCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvc2NyZWVuc2hvdF8yMDIwLTA3LTAzX2F0XzA4LjAxLjQxLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnV2hlbiBhIHZhbGlkIHJlcG9zaXRvcnkgbmFtZSBpcyBlbnRlcmVkLCBjbGljayAiKyBBZGQgcmVwbyIsIGFuZCB0aGUgcmVwbyB3aWxsIGJlIHF1aWNrbHkgdGVzdGVkIGZvciBhIHN1cHBvcnRlZCBtYW5pZmVzdCBmaWxlLicKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdFbnRlciBhcyBtYW55IHJlcG9zaXRvcmllcyBhcyBuZWVkZWQsIGFuZCBjbGljayAiSW1wb3J0IFggcmVwb3NpdG9yeS9pZXMiLicKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9zY3JlZW5zaG90XzIwMjAtMDctMDNfYXRfMDguMDEuNTIucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwb3N0LW9uYm9hcmRpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Bvc3Qtb25ib2FyZGluZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9zdC1vbmJvYXJkaW5nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJlYWQgb25seSBwcm9qZWN0cyBjYW4gYmUgaW1wb3J0ZWQgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIGZ1bGwgR2l0SHViIGludGVncmF0aW9uIGlzIHNldCB1cCwgYXMgdGhleSBkbyBub3QgcmVseSBvbiB5b3VyIEdpdEh1YiBwZXJtaXNzaW9ucyB0byBkbyBzby4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnVGhpcyBjYW4gYmUgZG9uZSB2aWEgdGhlICJBZGQgcHJvamVjdHMiIGRyb3Bkb3duIG9uIHRoZSBkYXNoYm9hcmQsIG9yIGJ5IGdvaW5nIHRvICcKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2FwcC5zbnlrLmlvL2FkZC9naXRodWItcmVhZG9ubHkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoImh0dHBzOi8vYXBwLnNueWsuaW8vYWRkL2dpdGh1Yi1yZWFkb25seSIpLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3NjcmVlbl9zaG90XzIwMjAtMDYtMDlfYXRfMTQuMjcuNDAucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdFbnRlciBhIHJlcG9zaXRvcnkgdG8gbW9uaXRvciwgaW4gdGhlIGZvcm1hdCBvZiAib3duZXIvcmVwb3NpdG9yeSI6JwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL3NjcmVlbnNob3RfMjAyMC0wNy0wM19hdF8wOC4wMS40MS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1doZW4gYSB2YWxpZCByZXBvc2l0b3J5IG5hbWUgaXMgZW50ZXJlZCwgY2xpY2sgIisgQWRkIHJlcG8iLCBhbmQgdGhlIHJlcG8gd2lsbCBiZSBxdWlja2x5IHRlc3RlZCBmb3IgYSBzdXBwb3J0ZWQgbWFuaWZlc3QgZmlsZS4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnRW50ZXIgYXMgbWFueSByZXBvc2l0b3JpZXMgYXMgbmVlZGVkLCBhbmQgY2xpY2sgIkltcG9ydCBYIHJlcG9zaXRvcnkvaWVzIi4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvc2NyZWVuc2hvdF8yMDIwLTA3LTAzX2F0XzA4LjAxLjUyLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}