{"remainingRequest":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/owenmorrill/Sites/vue-docs/docs/src/guide/visual-studio-code-extension-for-snyk-code.md?vue&type=template&id=1e35084c&","dependencies":[{"path":"/Users/owenmorrill/Sites/vue-docs/docs/src/guide/visual-studio-code-extension-for-snyk-code.md","mtime":1647024045483},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647884535666},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/cache-loader/dist/cjs.js","mtime":1647884535821},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/vue-loader/lib/index.js","mtime":1647884534539},{"path":"/Users/owenmorrill/Sites/vue-docs/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1647884535441}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAidmlzdWFsLXN0dWRpby1jb2RlLWV4dGVuc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdmlzdWFsLXN0dWRpby1jb2RlLWV4dGVuc2lvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBWaXN1YWwgU3R1ZGlvIENvZGUgZXh0ZW5zaW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ3slIGhpbnQgc3R5bGU9Indhcm5pbmciICV9XG5TbnlrXCdzIFZpc3VhbCBTdHVkaW8gQ29kZSBleHRlbnNpb24gaXMgYXZhaWxhYmxlIGZvciBpbnN0YWxsIG9uIHRoZSBtYXJrZXRwbGFjZTogJwogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1zbnlrLXNlY3VyaXR5LnNueWstdnVsbmVyYWJpbGl0eS1zY2FubmVyIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXM/aXRlbU5hbWU9c255ay1zZWN1cml0eS5zbnlrLXZ1bG5lcmFiaWxpdHktc2Nhbm5lciIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlZpc3VhbCBTdHVkaW8gQ29kZSByZXF1aXJlcyBTbnlrIENMSSwgc2VlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi9zbnlrLWNsaS9pbnN0YWxsLXRoZS1zbnlrLWNsaS8iLAogICAgICAgICAgICAgICAgdGl0bGU6ICJtZW50aW9uIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJpbnN0YWxsLXRoZS1zbnlrLWNsaSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLlxueyUgZW5kaGludCAlfSIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogInN1cHBvcnRlZC1sYW5ndWFnZXMtcGFja2FnZS1tYW5hZ2Vycy1hbmQtZnJhbWV3b3JrcyIgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI3N1cHBvcnRlZC1sYW5ndWFnZXMtcGFja2FnZS1tYW5hZ2Vycy1hbmQtZnJhbWV3b3JrcyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFN1cHBvcnRlZCBsYW5ndWFnZXMsIHBhY2thZ2UgbWFuYWdlcnMgYW5kIGZyYW1ld29ya3MiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRm9yIFNueWsgT3BlbiBTb3VyY2U6IHRoZSBWUyBDb2RlIGV4dGVuc2lvbiBzdXBwb3J0IGFsbCB0aGUgbGFuZ3VhZ2VzIGFuZCBwYWNrYWdlIG1hbmFnZXJzIHN1cHBvcnRlZCBieSBTbnlrIE9wZW4gU291cmNlIGFuZCB0aGUgQ0xJLiBTZWUgdGhlIGZ1bGwgbGlzdCAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnNueWsuaW8vcHJvZHVjdHMvc255ay1vcGVuLXNvdXJjZS9sYW5ndWFnZS1hbmQtcGFja2FnZS1tYW5hZ2VyLXN1cHBvcnQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImhlcmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRm9yIFNueWsgQ29kZTogdGhlIFZTIENvZGUgZXh0ZW5zaW9uIHN1cHBvcnQgYWxsIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZG9jcy5zbnlrLmlvL3Byb2R1Y3RzL3NueWstY29kZS9zbnlrLWNvZGUtbGFuZ3VhZ2UtYW5kLWZyYW1ld29yay1zdXBwb3J0I2xhbmd1YWdlLXN1cHBvcnQtd2l0aC1zbnlrLWNvZGUtYWktZW5naW5lIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCJsYW5ndWFnZXMgYW5kIGZyYW1ld29ya3Mgc3VwcG9ydGVkIGJ5IFNueWsgQ29kZSIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHRvZGF5LiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpbnN0YWxsLXRoZS1leHRlbnNpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luc3RhbGwtdGhlLWV4dGVuc2lvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJbnN0YWxsIHRoZSBleHRlbnNpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiBmaW5kIHRoZSBTbnlrIEV4dGVuc2lvbiBpbiB0aGUgVmlzdWFsIFN0dWRpbyBDb2RlIE1hcmtldHBsYWNlLiBUbyBpbnN0YWxsLCBlaXRoZXI6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiTmF2aWdhdGUgdG8gdGhlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXNueWstc2VjdXJpdHkuc255ay12dWxuZXJhYmlsaXR5LXNjYW5uZXIiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNueWsgRXh0ZW5zaW9uIG9uIHRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgTWFya2V0cGxhY2UiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgYW5kIGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIGZvciB0aGUgU255ayBleHRlbnNpb24uIFRoZSBkb2NzIGZyb20gVlMgQ29kZSBoZWxwIHlvdSB0cmlnZ2VyIHRoZSBpbnN0YWxsYXRpb24gcHJvY2VzcyBmcm9tIFZpc3VhbCBTdHVkaW8gQ29kZSBhbmQgZ3VpZGUgeW91IHRocm91Z2ggdGhlIGluc3RhbGxhdGlvbiBzdGVwcy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQnJvd3NlIGZvciB0aGUgZXh0ZW5zaW9uIGFzIGFkdmlzZWQgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb2NzL2VkaXRvci9leHRlbnNpb24tZ2FsbGVyeSNfYnJvd3NlLWZvci1leHRlbnNpb25zIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJoZXJlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgc2VhcmNoIGZvciBTbnlrLCB0aGVuIGluc3RhbGwgKGFzIGRlc2NyaWJlZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2V4dGVuc2lvbi1nYWxsZXJ5I19pbnN0YWxsLWFuLWV4dGVuc2lvbiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiaGVyZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIpLiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmNlIGluc3RhbGxlZCB5b3UgY2FuIGZpbmQgYSBTbnlrIGljb24gaW4gdGhlIHNpZGViYXIgIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvU2NyZWVuIFNob3QgMjAyMS0xMi0wMyBhdCA4LjAyLjA3IEFNLnBuZz4pLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbnlr4oCZcyBleHRlbnNpb24gcHJvdmlkZXMgYWxsIHRoZSBzdWdnZXN0aW9ucyBpbiBhIGNvbmNpc2UgYW5kIGNsZWFuIHZpZXcgY29udGFpbmluZyBhbGwgaW5mb3JtYXRpb24geW91IG5lZWQgdG8gZGVjaWRlIGhvdyB0byBmaXggb3IgYWN0IHVwb246IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlICg3NikgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMikgKDIpLnBuZz4pIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNvbmZpZ3VyYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbmZpZ3VyYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbmZpZ3VyYXRpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiZW52aXJvbm1lbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Vudmlyb25tZW50IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFbnZpcm9ubWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBhbmFseXplIHByb2plY3RzLCB0aGUgcGx1Z2luIHVzZXMgdGhlIFNueWsgQ0xJIHdoaWNoIG5lZWRzIHNvbWUgZW52aXJvbm1lbnQgdmFyaWFibGVzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBBVEgiKV0pLAogICAgICAgICAgX3ZtLl92KCI6IHRoZSBwYXRoIHRvIG5lZWRlZCBiaW5hcmllcywgKGZvciBleGFtcGxlLCB0byBtYXZlbikuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJKQVZBX0hPTUUiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiB0aGUgcGF0aCB0byB0aGUgSkRLIHlvdSB3YW50IHRvIHVzZSB0byBhbmFseXplIEphdmEgZGVwZW5kZW5jaWVzIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2V0dGluZyB0aGVzZSB2YXJpYWJsZXMgb25seSBpbiBhIHNoZWxsIGVudmlyb25tZW50IChmb3IgZXhhbXBsZSx1c2luZyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4vLmJhc2hyYyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIikgaXMgbm90IHN1ZmZpY2llbnQsIGlmIHlvdSBkbyBub3Qgc3RhcnQgdGhlIElERSBmcm9tIHRoZSBjb21tYW5kIGxpbmUgb3IgY3JlYXRlIGEgc2NyaXB0IGZpbGUgdGhhdCBzdGFydHMgdGhlIElERSB1c2luZyBhIHNoZWxsIGVudmlyb25tZW50LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk9uICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJXaW5kb3dzIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgeW91IGNhbiBzZXQgdGhlIHZhcmlhYmxlcywgdXNpbmcgdGhlIEdVSSBvciBvbiB0aGUgY29tbWFuZCBsaW5lIHVzaW5nIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZXR4IildKSwKICAgICAgICAgIF92bS5fdigiIHRvb2wuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJPbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWFjT1MiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIHRoZSBwcm9jZXNzICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsYXVuY2hkIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBtdXN0IGtub3cgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBpZiB5b3Ugd2FudCB0byBsYXVuY2ggdGhlIElERSBmcm9tIEZpbmRlciBkaXJlY3RseS4gWW91IGNhbiBzZXQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBhcHBsaWNhdGlvbnMgbGF1bmNoZWQgdmlhIEZpbmRlciB1c2luZyB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibGF1bmNoY3RsIHNldGVudiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgY29tbWFuZCBlLmcuIG9uIHN0YXJ0LXVwIG9yIHZpYSBhIHNjcmlwdCB5b3UgbGF1bmNoIGF0IHVzZXIgbG9naW4uIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRoZSBwcm92aXNpb24gb2YgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSBtYWNPUyBVSSBjYW4gY2hhbmdlIGJldHdlZW4gb3BlcmF0aW5nIHN5c3RlbSByZWxlYXNlcywgc28gaXQgbWlnaHQgYmUgZWFzaWVyIHRvIGNyZWF0ZSBhIHNtYWxsIHNoZWxsIHNjcmlwdCB0aGF0IGxhdW5jaGVzIHRoZSBJREUgdG8gbGV2ZXJhZ2UgdGhlIHNoZWxsIGVudmlyb25tZW50LCB0aGF0IGNhbiBiZSBkZWZpbmVkIHZpYSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ+Ly5iYXNocmMiKV0pLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJPbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGludXgiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLCB1cGRhdGluZyB0aGUgZmlsZSAvZXRjL2Vudmlyb25tZW50IGNhbiBiZSB1c2VkIHRvIHByb3BhZ2F0ZSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSB3aW5kb3dzIG1hbmFnZXIgYW5kIFVJLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3h5IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwcm94eSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBQcm94eSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgYXJlIGJlaGluZCBhIHByb3h5LCBwcm94eSBzZXR0aW5ncyBhcmUgY29uZmlndXJlZCBlaXRoZXIgdXNpbmcgVlMgQ29kZSBwcm94eSBzZXR0aW5ncyBvciBzZXQgdXNpbmcgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJodHRwX3Byb3h5IildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJodHRwc19wcm94eSIpXSksCiAgICAgICAgX3ZtLl92KCIgZW52aXJvbm1lbnQgdmFyaWFibGVzLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJhdXRoZW50aWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYXV0aGVudGljYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEF1dGhlbnRpY2F0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUbyBhdXRoZW50aWNhdGUgZm9sbG93IHRoZSBzdGVwczoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk9uY2UgdGhlIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWQsIGNsaWNrIG9uIHRoZSBTbnlrIEljb24gaW4gdGhlIGxlZnQgbmF2aWdhdGlvbiBiYXI6IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlICg2MikgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMikgKDMpLnBuZz4pIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiQ2xpY2sgIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDb25uZWN0IFZTIENvZGUgd2l0aCBTbnlrIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIuIFRoZSBleHRlbnNpb24gcmVsaWVzIG9uIHRoZSBTbnlrIGF1dGhlbnRpY2F0aW9uIEFQSSBhbmQgaXQgd2lsbCBhc2sgeW91IHRvIGF1dGhlbnRpY2F0ZSB5b3UgYWdhaW5zdCBTbnlr4oCZcyB3ZWIgYXBwbGljYXRpb246IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlICg3MSkgKDMpLnBuZz4pIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJDbGljayAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkF1dGhlbnRpY2F0ZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQWZ0ZXIgc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvbiwgeW91IHdpbGwgc2VlIGEgY29uZmlybWF0aW9uIG1lc3NhZ2U6IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlICg4NSkgKDEpLnBuZz4pIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJDbG9zZSB0aGUgYnJvd3NlciB3aW5kb3cgYW5kIHJldHVybiB0byBWUyBDb2RlLiBWUyBDb2RlIGlzIG5vdyByZWFkaW5nIGFuZCBzYXZpbmcgdGhlIGF1dGhlbnRpY2F0aW9uIG9uIHlvdXIgbG9jYWwgbWFjaGluZS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicnVuLWFuYWx5c2lzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNydW4tYW5hbHlzaXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJ1biBhbmFseXNpcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiB0aGUgSURFIHlvdSB3aWxsIG5vdGljZSB0aGF0IHRoZSBleHRlbnNpb24gaXMgYWxyZWFkeSBwaWNraW5nIHVwIHRoZSBmaWxlcyBhbmQgdXBsb2FkaW5nIHRoZW0gZm9yIGFuYWx5c2lzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbnlrIE9wZW4gU291cmNlIHJlcXVpcmVzIFNueWsgQ0xJLCBzbyBpdCB3aWxsIHByb2NlZWQgd2l0aCB0aGUgZG93bmxvYWQgaW4gdGhlIGJhY2tncm91bmQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsgQ29kZSBhbmFseXNpcyBydW5zIHF1aWNrbHkgd2l0aG91dCBpdCwgc28gcmVzdWx0cyBtYXkgZXZlbiBhbHJlYWR5IGJlIGF2YWlsYWJsZS4gT3RoZXJ3aXNlLCB5b3Ugd2lsbCBzZWUgdGhlIGZvbGxvd2luZyBzY3JlZW4gd2hpbGUgU255ayBzY2FucyB5b3VyIHdvcmtzcGFjZSBmb3IgdnVsbmVyYWJpbGl0aWVzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDgwKSAoMykucG5nPikiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNueWsncyBhbmFseXNpcyBydW5zIGF1dG9tYXRpY2FsbHkgd2hlbiB5b3Ugb3BlbiBhIGZvbGRlciBvciB3b3Jrc3BhY2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiU255ayBDb2RlIHBlcmZvcm1zIHNjYW5zIGF1dG9tYXRpY2FsbHkgb24gZmlsZSBzYXZlcy4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTbnlrIE9wZW4gU291cmNlIGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgcnVuIG9uIHNhdmUgYnkgZGVmYXVsdCwgYnV0IHlvdSBjYW4gZW5hYmxlIGl0IGluIHNldHRpbmdzOiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pbWFnZSAoNzMpICgzKS5wbmc+KSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVGlwIildKSwKICAgICAgICBfdm0uX3YoIjogaWYgeW91IGRvbid0IGxpa2UgdG8gbWFudWFsbHkgc2F2ZSB3aGlsZSB3b3JraW5nLCBlbmFibGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2NvZGViYXNpY3MjX3NhdmUtYXV0by1zYXZlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkF1dG9TYXZlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicmVzY2FuIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZXNjYW4iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUmVzY2FuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzY2FuLCBlaXRoZXIgU2F2ZSBvciBtYW51YWxseSByZXNjYW4gdXNpbmcgdGhlIHJlc2NhbiBpY29uOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDYxKSAoMikucG5nPikiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSBvbmx5IG5lZWQgdGhlIENvZGUgUXVhbGl0eSwgQ29kZSBTZWN1cml0eSBvciBPcGVuIFNvdXJjZSBTZWN1cml0eSBwb3J0aW9uIG9mIHRoZSBmaW5kaW5ncywgeW91IGNhbiBlYXNpbHkgZGlzYWJsZSB0aGUgZmVhdHVyZSB3aXRoIHRoZSByZXN1bHRzIHlvdSBkb24ndCB3YW50IHRvIHNlZSBvciBzaW1wbHkgY29sbGFwc2UgdGhlIHZpZXc6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pbWFnZSAoODMpICgyKS5wbmc+KSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAic255ay1jb2RlLWFkdmFuY2VkLW1vZGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NueWstY29kZS1hZHZhbmNlZC1tb2RlIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgQ29kZSBhZHZhbmNlZCBtb2RlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1NueWsgQ29kZSBoYXMgIkFkdmFuY2VkIiBtb2RlIHRoYXQgYWxsb3dzIHlvdSB0byBjb250cm9sIGhvdyBzY2FuIGlzIHBlcmZvcm1lZC4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gbWFudWFsbHkgcGVyZm9ybSB0aGUgYW5hbHlzaXMsIGluIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBleHRlbnNpb24sIHlvdSBjYW4gZW5hYmxlIEFkdmFuY2VkIE1vZGUgd2hpY2ggZW5hYmxlcyB5b3UgdG8gY29udHJvbCB0aGUgc2Nhbm5pbmcgcHJvY2VzczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDc4KSAoMSkgKDEpICgxKSAoMSkgKDEpLnBuZz4pIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInZpZXctYW5hbHlzaXMtcmVzdWx0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdmlldy1hbmFseXNpcy1yZXN1bHRzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFZpZXcgYW5hbHlzaXMgcmVzdWx0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbnlrIGFuYWx5c2lzIHNob3dzIGEgbGlzdCBvZiBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgYW5kIGNvZGUgaXNzdWVzIGZvdW5kIGluIHRoZSBhcHBsaWNhdGlvbiBjb2RlLiBGb3IgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcyBvZiBob3cgb3RoZXJzIGZpeGVkIHRoZSBpc3N1ZSwgc2VsZWN0IGEgc2VjdXJpdHkgdnVsbmVyYWJpbGl0eSBvciBhIGNvZGUgc2VjdXJpdHkgaXNzdWUuIE9uY2Ugc2VsZWN0ZWQgeW91IHdpbGwgc2VlIHRoZSBTbnlrIHN1Z2dlc3Rpb24gaW5mb3JtYXRpb24gaW4gYSBwYW5lbCBvbiB0aGUgcmlnaHQgc2lkZToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDc2KSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgyKSAoNikucG5nPikiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDYyKSAoMikgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMTApICg4KS5wbmc+KSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJzbnlrLXBhbmVsIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzbnlrLXBhbmVsIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTbnlrIHBhbmVsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBTbnlrIGFuYWx5c2lzIHBhbmVsIChvbiB0aGUgbGVmdCBvZiB0aGUgY29kZSBzY3JlZW4gaW4gdGhlIGFib3ZlIHNjcmVlbnNob3QpIHNob3dzIGhvdyBtdWNoIHRpbWUgdGhlIGFuYWx5c2lzIHRvb2sgcGx1cyBhIGxpc3Qgb2YgaXNzdWVzIHdpdGggdGhlIHN1Z2dlc3Rpb25zIGZvdW5kIGZvciB0aGVtLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlIGljb25zIGhlcmUgbWVhbjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pbWFnZSAoNzUpICgyKS5wbmc+KSBDcml0aWNhbCBzZXZlcml0eSIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTWF5IGFsbG93IGF0dGFja2VycyB0byBhY2Nlc3Mgc2Vuc2l0aXZlIGRhdGEgYW5kIHJ1biBjb2RlIG9uIHlvdXIgYXBwbGljYXRpb24uIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlICg2NCkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMikgKDMpLnBuZz4pIEhpZ2ggc2V2ZXJpdHkiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIk1heSBhbGxvdyBhdHRhY2tlcnMgdG8gYWNjZXNzIHNlbnNpdGl2ZSBkYXRhIG9uIHlvdXIgYXBwbGljYXRpb24uIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pbWFnZSAoNjMpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDIpICgzKS5wbmc+KSBNZWRpdW0gc2V2ZXJpdHkiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIk1heSBhbGxvdyBhdHRhY2tlcnMgdW5kZXIgc29tZSBjb25kaXRpb25zIHRvIGFjY2VzcyBzZW5zaXRpdmUgZGF0YSBvbiB5b3VyIGFwcGxpY2F0aW9uLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDgxKSAoMSkgKDEpICgxKSAoMSkgKDEpLnBuZz4pIExvdyBzZXZlcml0eSIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVGhlIGFwcGxpY2F0aW9uIG1heSBleHBvc2Ugc29tZSBkYXRhIGFsbG93aW5nIHZ1bG5lcmFiaWxpdHkgbWFwcGluZywgd2hpY2ggY2FuIGJlIHVzZWQgd2l0aCBvdGhlciB2dWxuZXJhYmlsaXRpZXMgdG8gYXR0YWNrIHRoZSBhcHBsaWNhdGlvbi4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiBmaWx0ZXIgdGhlIGlzc3VlcyBieSBzZXR0aW5nIHRoZSBzZXZlcml0aWVzIHlvdSB3YW50IHRvIHNlZSB1c2luZyB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzbnlrLnNldmVyaXR5IildKSwKICAgICAgICBfdm0uX3YoIiBzZXR0aW5nLiBFLmcuIHNldCAiKSwKICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyJzbnlrLnNldmVyaXR5IjogeyAiY3JpdGljYWwiOiB0cnVlLCAiaGlnaCI6IHRydWUsICJtZWRpdW0iOiB0cnVlLCAibG93IjogZmFsc2UgfScKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byBoaWRlIGxvdyBzZXZlcml0eSBpc3N1ZXMuIFlvdSBjYW4gYWxzbyBhcHBseSB0aGUgc2V0dGluZyB2aWEgU2V0dGluZ3MgVUkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9pbWFnZSAoNjUpICgyKS5wbmc+KSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAic255ay1jb2RlLWVkaXRvci13aW5kb3ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NueWstY29kZS1lZGl0b3Itd2luZG93IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNueWsgQ29kZSBlZGl0b3Igd2luZG93IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBlZGl0b3Igd2luZG93IChpbiB0aGUgbWlkZGxlIG9mIHRoZSByZXN1bHRzIHNjcmVlbikgc2hvd3MgdGhlIGNvZGUgdGhhdCBpcyBpbnNwZWN0ZWQuIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4geW91IGFyZSBpbnNwZWN0aW5nIGEgU255ayBpc3N1ZSwgeW91IGFsd2F5cyBoYXZlIHRoZSBjb2RlIGNvbnRleHQgY2xvc2UgdG8gdGhlIGlzc3VlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJzbnlrLWNvZGUtdnVsbmVyYWJpbGl0eS13aW5kb3ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NueWstY29kZS12dWxuZXJhYmlsaXR5LXdpbmRvdyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTbnlrIENvZGUgdnVsbmVyYWJpbGl0eSB3aW5kb3ciKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIVtdKDwuLi8uLi8uLi8uZ2l0Ym9vay9hc3NldHMvaW1hZ2UgKDc2KSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgyKSAoMykucG5nPikiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIFNueWsgU3VnZ2VzdGlvbiBwYW5lbCAob24gdGhlIHJpZ2h0IG9mIHRoZSByZXN1bHRzIHNjcmVlbikgc2hvd3MgdGhlIGFyZ3VtZW50YXRpb24gb2YgdGhlIFNueWsgZW5naW5lIHVzaW5nIGZvciBleGFtcGxlIHZhcmlhYmxlIG5hbWVzIG9mIHlvdXIgY29kZSBhbmQgdGhlIGxpbmUgbnVtYmVycyBpbiByZWQuIFlvdSBjYW4gYWxzbyBzZWU6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxpbmtzIHRvIGV4dGVybmFsIHJlc291cmNlcyB0byBleHBsYWluIHRoZSBidWcgcGF0dGVybiBpbiBtb3JlIGRldGFpbCAodGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTW9yZSBpbmZvIildKSwKICAgICAgICAgIF92bS5fdigiIGxpbmspLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGFncyB0aGF0IHdlcmUgYXNzaWduZWQgYnkgU255aywgc3VjaCBhcyAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTZWN1cml0eSIpXSksCiAgICAgICAgICBfdm0uX3YoIiAodGhlIGlzc3VlIGZvdW5kIGlzIGEgc2VjdXJpdHkgaXNzdWUpLCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJEYXRhYmFzZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiAoaXQgaXMgcmVsYXRlZCB0byBkYXRhYmFzZSBpbnRlcmFjdGlvbiksIG9yICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkluIFRlc3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgKHRoZSBpc3N1ZSBpcyB3aXRoaW4gdGhlIHRlc3QgY29kZSkuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29kZSBmcm9tIG9wZW4gc291cmNlIHJlcG9zaXRvcmllcyB0aGF0IG1pZ2h0IGJlIG9mIGhlbHAgdG8gc2VlIGhvdyBvdGhlcnMgZml4ZWQgdGhlIGlzc3VlLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IGNhbiBhZGQgaWdub3JlIGNvbW1lbnRzIHRoYXQgd291bGQgbWFrZSBTbnlrIGlnbm9yZSB0aGlzIHBhcnRpY3VsYXIgc3VnZ2VzdGlvbiwgb3IgYWxsIG9mIHRoZXNlIHN1Z2dlc3Rpb25zIGZvciB0aGUgd2hvbGUgZmlsZSwgYnkgdXNpbmcgdGhlIHR3byBidXR0b25zIG9uIHRoZSBsb3dlciBlbmQgb2YgdGhlIHBhbmVsLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIGFsc28gaW5jbHVkZSBhIGZlZWRiYWNrIG1lY2hhbmlzbSB0byByZXBvcnQgZmFsc2UgcG9zaXRpdmVzIHNvIHlvdSBvdGhlcnMgZG8gbm90IHNlZSB0aGUgc2FtZSBpc3N1ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAic255ay1vcGVuLXNvdXJjZS1lZGl0b3Itd2luZG93IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzbnlrLW9wZW4tc291cmNlLWVkaXRvci13aW5kb3ciIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU255ayBPcGVuIFNvdXJjZSBlZGl0b3Igd2luZG93IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVkaXRvciB3aW5kb3cgc2hvd3Mgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIGluIG9wZW4gc291cmNlIG1vZHVsZXMgd2hpbGUgeW91IGNvZGUgaW4gSmF2YVNjcmlwdCwgVHlwZVNjcmlwdCBhbmQgSFRNTC4gUmVjZWl2ZSBmZWVkYmFjayBpbi1saW5lIHdpdGggeW91ciBjb2RlLCBzdWNoIGFzIGhvdyBtYW55IHZ1bG5lcmFiaWxpdGllcyBhIG1vZHVsZSBjb250YWlucyB0aGF0IHlvdSBhcmUgaW1wb3J0aW5nLiBFZGl0b3Igc3VyZmFjZXMgb25seSB0b3AtbGV2ZWwgZGVwZW5kZW5jeSB2dWxuZXJhYmlsaXRpZXMsIGZvciB0aGUgZnVsbCBsaXN0IG9mIHZ1bG5lcmFiaWxpdGllcyByZWZlciB0byB0aGUgc2lkZSBwYW5lbC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRmluZCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgaW4gdGhlIG5wbSBwYWNrYWdlcyB5b3UgaW1wb3J0OiBzZWUgdGhlIG51bWJlciBvZiBrbm93biB2dWxuZXJhYmlsaXRpZXMgaW4geW91ciBpbXBvcnRlZCBucG0gcGFja2FnZXMgYXMgc29vbiBhcyB5b3UgcmVxdWlyZSB0aGVtOiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL29zcy1lZGl0b3ItdnVsbmVyYWJpbGl0eS1jb3VudC5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ29kZSBpbmxpbmUgdnVsbmVyYWJpbGl0eSBjb3VudHMgYXJlIGFsc28gc2hvd24gaW4geW91ciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGFja2FnZS5qc29uIildKSwKICAgICAgICAgIF92bS5fdigiIGZpbGU6IiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCIhW10oPC4uLy4uLy4uLy5naXRib29rL2Fzc2V0cy9vc3MtZWRpdG9yLXBqc29uICgxKS5wbmc+KSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGaW5kIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBpbiB5b3VyIEphdmFTY3JpcHQgcGFja2FnZXMgZnJvbSB3ZWxsLWtub3duIENETnM6IHRoZSBleHRlbnNpb24gc2NhbnMgYW55IEhUTUwgZmlsZXMgaW4geW91ciBwcm9qZWN0cyBhbmQgZGlzcGxheXMgdnVsbmVyYWJpbGl0eSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kdWxlcyB5b3UgaW5jbHVkZSBmcm9tIHlvdXIgZmF2b3JpdGUgQ0ROLlxuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ3VycmVudGx5IHN1cHBvcnRlZCBDRE4nczpcbiIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInVucGtnLmNvbSIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImFqYXguZ29vZ2xlYXBpcy5jb20iKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJjZG4uanNkZWxpdnIubmV0IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiY2RuanMuY2xvdWRmbGFyZS5jb20iKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJjb2RlLmpxdWVyeS5jb20iKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJtYXhjZG4uYm9vdHN0cmFwY2RuLmNvbSIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInlhc3RhdGljLm5ldCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImFqYXguYXNwbmV0Y2RuLmNvbSIpXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL29zcy1lZGl0b3ItaHRtbC5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBjYW4gbmF2aWdhdGUgdG8gdGhlIG1vc3Qgc2V2ZXJlIHZ1bG5lcmFiaWxpdHkgYnkgdHJpZ2dlcmluZyB0aGUgcHJvdmlkZWQgY29kZSBhY3Rpb25zLiBUaGlzIG9wZW5zIGEgdnVsbmVyYWJpbGl0eSB3aW5kb3cgdG8gc2hvdyBtb3JlIGRldGFpbHM6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL29zcy1lZGl0b3Itc2hvdy12dWxuZXJhYmlsaXR5ICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkucG5nPikiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAic255ay1vcGVuLXNvdXJjZS12dWxuZXJhYmlsaXR5LXdpbmRvdyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc255ay1vcGVuLXNvdXJjZS12dWxuZXJhYmlsaXR5LXdpbmRvdyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTbnlrIE9wZW4gU291cmNlIHZ1bG5lcmFiaWxpdHkgd2luZG93IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiFbXSg8Li4vLi4vLi4vLmdpdGJvb2svYXNzZXRzL2ltYWdlICg2OCkgKDEpICgxKSAoMSkgKDEpICgxKSAoMSkgKDEpICgxKSAoMikgKDEpLnBuZz4pIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9TUyB2dWxuZXJhYmlsaXR5IHRhYiBzaG93cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdnVsbmVyYWJsZSBtb2R1bGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxpbmtzIHRvIGV4dGVybmFsIHJlc291cmNlcyAoQ1ZFLCBDV0UsIFNueWsgVnVsbmVyYWJpbGl0eSBEQikgdG8gZXhwbGFpbiB0aGUgdnVsbmVyYWJpbGl0eSBpbiBtb3JlIGRldGFpbC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkRpc3BsYXlzIENWU1Mgc2NvcmUgYW5kIGV4cGxvaXQgbWF0dXJpdHkuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQcm92aWRlcyBkZXRhaWxlZCBwYXRoIG9uIGhvdyB2dWxuZXJhYmlsaXR5IGlzIGludHJvZHVjZWQgdG8gdGhlIHN5c3RlbS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNob3dzIHN1bW1hcnkgb2YgdGhlIHZ1bG5lcmFiaWxpdHkgdG9nZXRoZXIgd2l0aCB0aGUgcmVtZWRpYXRpb24gYWR2aWNlIHRvIGZpeCBpdC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJleHRlbnNpb24tY29uZmlndXJhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZXh0ZW5zaW9uLWNvbmZpZ3VyYXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRXh0ZW5zaW9uIGNvbmZpZ3VyYXRpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWZ0ZXIgdGhlIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWQsIHlvdSBjYW4gc2V0IHRoZSBmb2xsb3dpbmcgY29uZmlndXJhdGlvbnMgZm9yIHRoZSBleHRlbnNpb246IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUb2tlbiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IHRoZSB0b2tlbiB0aGUgZXh0ZW5zaW9uIHVzZXMgdG8gY29ubmVjdCB0byBTbnlrLiBZb3UgY2FuIG1hbnVhbGx5IHJlcGxhY2UgaXQsIGlmIHlvdSBuZWVkIHRvIHN3aXRjaCB0byBhbm90aGVyIGFjY291bnQuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRmVhdHVyZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29kZSBTZWN1cml0eSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIjogY29uZmlndXJlcyBpZiBjb2RlIHNlY3VyaXR5IGFuYWx5c2lzIHNob3VsZCBydW4gb3ZlciB5b3VyIGNvZGUuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDb2RlIFF1YWxpdHkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICI6IGNvbmZpZ3VyZXMgaWYgY29kZSBxdWFsaXR5IGFuYWx5c2lzIHNob3VsZCBydW4gb3ZlciB5b3VyIGNvZGUuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJPcGVuIFNvdXJjZSBTZWN1cml0eSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIjogY29uZmlndXJlcyBpZiBzZWN1cml0eSBhbmFseXNpcyBzaG91bGQgcnVuIG92ZXIgeW91ciBvcGVuIHNvdXJjZSBkZXBlbmRlbmNpZXMuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNldmVyaXR5IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjogc2V0cyBzZXZlcml0eSBsZXZlbCB0byBkaXNwbGF5IGluIHRoZSBhbmFseXNpcyByZXN1bHQgdHJlZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBZHZhbmNlZCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBZHZhbmNlZCBtb2RlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiOiB0b2dnbGVzIGEgcGFuZWwgdG8gYWxsb3cgdGhlIHVzZXIgdG8gbWFudWFsbHkgY29udHJvbCB3aGVuIHRoZSBhbmFseXNpcyBzaG91bGQgYmUgcnVuLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQXV0byBTY2FuIE9wZW4gU291cmNlIFNlY3VyaXR5IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiOiBzZXRzIHNldmVyaXR5IGxldmVsIHRvIGRpc3BsYXkgaW4gdGhlIGFuYWx5c2lzIHJlc3VsdCB0cmVlLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQWRkaXRpb25hbCBQYXJhbWV0ZXJzIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiOiBzZXRzIHBhcmFtZXRlcnMgdG8gYmUgcGFzc2VkIHRvIFNueWsgQ0xJIGZvciBPcGVuIFNvdXJjZSBTZWN1cml0eSB0ZXN0cy4gRm9yIHRoZSBmdWxsIGxpc3QgeW91IGNhbiBjb25zdWx0ICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3Muc255ay5pby9mZWF0dXJlcy9zbnlrLWNsaS9ndWlkZXMtZm9yLW91ci1jbGkvY2xpLXJlZmVyZW5jZSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJ0aGlzIHJlZmVyZW5jZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNyZWF0ZS1hLWRjaWdub3JlLWZpbGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NyZWF0ZS1hLWRjaWdub3JlLWZpbGUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ3JlYXRlIGEgLmRjaWdub3JlIGZpbGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRvIGlnbm9yZSBjZXJ0YWluIGZpbGVzIGFuZCBkaXJlY3RvcmllcyAoZm9yIGV4YW1wbGUsICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJub2RlX21vZHVsZXMiKV0pLAogICAgICAgIF92bS5fdigiKSwgY3JlYXRlIGEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi5kY2lnbm9yZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmaWxlLiBZb3UgY2FuIGNyZWF0ZSBpdCBpbiBhbnkgZGlyZWN0b3J5IG9uIGFueSBsZXZlbCBzdGFydGluZyBmcm9tIHRoZSBkaXJlY3Rvcnkgd2hlcmUgeW91ciBwcm9qZWN0IHJlc2lkZXMuIFRoZSBmaWxlIHN5bnRheCBpcyBpZGVudGljYWwgdG8gLmdpdGlnbm9yZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJXZSByZWNvbW1lbmQgYWRkaW5nIHRoZSBmaWxlIHdoZW4gdGhlcmUgaXMgbm8gIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLmdpdGlnbm9yZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZmlsZS4gVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHRoZSBmaWxlcyB0aGF0IG5lZWQgdG8gYmUgdXBsb2FkZWQgYW5kIHNwZWVkIHVwIHRoZSBhbmFseXNpcy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVG8gcXVpY2tseSBhZGQgdGhlIGRlZmF1bHQgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLmRjaWdub3JlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBmaWxlIHVzZSB0aGUgY29tbWFuZCBwcm92aWRlZCBieSBWUyBDb2RlIGFuZCB0aGUgU255ayBleHRlbnNpb246IFNueWsgY3JlYXRlIC5kY2lnbm9yZSBmaWxlIGFuZCBzYXZlIHRoZSBuZXdseSBjcmVhdGVkIC5kY2lnbm9yZSBmaWxlLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN1cHBvcnQtY29udGFjdCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3VwcG9ydC1jb250YWN0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTdXBwb3J0IC8gQ29udGFjdCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigneyUgaGludCBzdHlsZT0iaW5mbyIgJX1cbk5lZWQgbW9yZSBoZWxwPyAnKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zdXBwb3J0LnNueWsuaW8vaGMvZW4tdXMvcmVxdWVzdHMvbmV3IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkNvbnRhY3Qgb3VyIFN1cHBvcnQgdGVhbSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuXG57JSBlbmRoaW50ICV9IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInNoYXJlLXlvdXItZXhwZXJpZW5jZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2hhcmUteW91ci1leHBlcmllbmNlIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNoYXJlIHlvdXIgZXhwZXJpZW5jZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZSBjb250aW51b3VzbHkgc3RyaXZlIHRvIGltcHJvdmUgb3VyIHBsdWdpbnMgZXhwZXJpZW5jZS4gV291bGQgeW91IGxpa2UgdG8gc2hhcmUgd2l0aCB1cyB5b3VyIGZlZWRiYWNrIGFib3V0IFNueWsncyBWaXN1YWwgU3R1ZGlvIENvZGUgZXh0ZW5zaW9uOiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9jYWxlbmRseS5jb20vc255ay1nZW9yZ2kvNDVtaW4/bW9udGg9MjAyMi0wMSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJzY2hlZHVsZSBhIG1lZXRpbmciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}